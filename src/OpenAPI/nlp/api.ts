const BASE_PATH = "https://api.chatdaddy.tech/nlp".replace(/\/+$/, "");

/* tslint:disable */
/* eslint-disable */
/**
 * ChatDaddy NLP Service
 * Manage keyword based replies & AI automation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
import type { RequestArgs } from '../base';
// @ts-ignore
import { COLLECTION_FORMATS, BaseAPI, RequiredError } from '../base';

/**
 * 
 * @export
 * @interface AiCreditUse
 */
interface AiCreditUse {
    /**
     * 
     * @type {string}
     * @memberof AiCreditUse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof AiCreditUse
     */
    'teamId': string;
    /**
     * 
     * @type {string}
     * @memberof AiCreditUse
     */
    'doneBy': string;
    /**
     * An ISO formatted timestamp
     * @type {string}
     * @memberof AiCreditUse
     */
    'doneAt': string;
    /**
     * 
     * @type {object}
     * @memberof AiCreditUse
     */
    'metadata'?: object;
}
/**
 * 
 * @export
 * @interface AutocompleteCalendarEventRequest
 */
interface AutocompleteCalendarEventRequest {
    /**
     * message to extract calendar event data from
     * @type {string}
     * @memberof AutocompleteCalendarEventRequest
     */
    'text': string;
}
/**
 * 
 * @export
 * @interface AutocompleteInbox200Response
 */
export interface AutocompleteInbox200Response {
    /**
     * Name of the chatbot that generated the suggestions. Will use \"ChatDaddy AI\" if used vanilla GPT
     * @type {string}
     * @memberof AutocompleteInbox200Response
     */
    'chatbotName': string;
    /**
     * ID of the chatbot that generated the suggestions. Empty if used vanilla GPT
     * @type {string}
     * @memberof AutocompleteInbox200Response
     */
    'chatbotId'?: string;
    /**
     * 
     * @type {Array<AutocompleteSuggestion>}
     * @memberof AutocompleteInbox200Response
     */
    'suggestions': Array<AutocompleteSuggestion>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AutocompleteInbox200Response
     */
    'sources'?: Array<string>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const AutocompleteModifier = {
    Longer: 'longer',
    Shorter: 'shorter',
    Formal: 'formal',
    Friendlier: 'friendlier',
    Apologetic: 'apologetic',
    Assertive: 'assertive',
    Clearer: 'clearer',
    Ask: 'ask'
} as const;

export type AutocompleteModifier = typeof AutocompleteModifier[keyof typeof AutocompleteModifier];


/**
 * 
 * @export
 * @interface AutocompleteModify200Response
 */
export interface AutocompleteModify200Response {
    /**
     * Modified text
     * @type {string}
     * @memberof AutocompleteModify200Response
     */
    'text': string;
}
/**
 * 
 * @export
 * @interface AutocompleteModifyRequest
 */
export interface AutocompleteModifyRequest {
    /**
     * 
     * @type {AutocompleteModifyRequestChat}
     * @memberof AutocompleteModifyRequest
     */
    'chat'?: AutocompleteModifyRequestChat;
    /**
     * Text to be modified
     * @type {string}
     * @memberof AutocompleteModifyRequest
     */
    'text': string;
    /**
     * Language to get response in
     * @type {string}
     * @memberof AutocompleteModifyRequest
     */
    'language'?: string;
}
/**
 * Provide chat as context for the modifier
 * @export
 * @interface AutocompleteModifyRequestChat
 */
export interface AutocompleteModifyRequestChat {
    /**
     * 
     * @type {string}
     * @memberof AutocompleteModifyRequestChat
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof AutocompleteModifyRequestChat
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface AutocompleteSuggestion
 */
export interface AutocompleteSuggestion {
    /**
     * 
     * @type {string}
     * @memberof AutocompleteSuggestion
     */
    'text': string;
}
/**
 * 
 * @export
 * @interface CalendarEvent
 */
interface CalendarEvent {
    /**
     * Title of the event
     * @type {string}
     * @memberof CalendarEvent
     */
    'eventName': string;
    /**
     * Time of the event
     * @type {string}
     * @memberof CalendarEvent
     */
    'time': string;
    /**
     * Date of the event
     * @type {string}
     * @memberof CalendarEvent
     */
    'date': string;
    /**
     * duration of the event
     * @type {string}
     * @memberof CalendarEvent
     */
    'duration': string;
}
/**
 * 
 * @export
 * @interface ChatThread
 */
export interface ChatThread {
    /**
     * 
     * @type {string}
     * @memberof ChatThread
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ChatThread
     */
    'threadId': string;
    /**
     * 
     * @type {string}
     * @memberof ChatThread
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof ChatThread
     */
    'chatId': string;
    /**
     * An ISO formatted timestamp
     * @type {string}
     * @memberof ChatThread
     */
    'createdAt'?: string;
}
/**
 * 
 * @export
 * @interface Chatbot
 */
export interface Chatbot {
    /**
     * ID of the chatbot
     * @type {string}
     * @memberof Chatbot
     */
    'id': string;
    /**
     * 
     * @type {Array<Document>}
     * @memberof Chatbot
     */
    'documents'?: Array<Document>;
    /**
     * An ISO formatted timestamp
     * @type {string}
     * @memberof Chatbot
     */
    'createdAt': string;
    /**
     * An ISO formatted timestamp
     * @type {string}
     * @memberof Chatbot
     */
    'updatedAt': string;
    /**
     * Current training status of the chatbot
     * @type {string}
     * @memberof Chatbot
     */
    'trainingStatus': ChatbotTrainingStatusEnum;
    /**
     * Progress of training, between 0 and 100
     * @type {number}
     * @memberof Chatbot
     */
    'trainingProgress'?: number;
    /**
     * 
     * @type {Array<Job>}
     * @memberof Chatbot
     */
    'jobs'?: Array<Job>;
    /**
     * Name of the chatbot
     * @type {string}
     * @memberof Chatbot
     */
    'name': string;
    /**
     * Fallback message of the chatbot
     * @type {string}
     * @memberof Chatbot
     */
    'fallbackMessage': string;
    /**
     * Prompt message of the chatbot
     * @type {string}
     * @memberof Chatbot
     */
    'prompt': string;
    /**
     * Name of the member to assign to the chatbot
     * @type {string}
     * @memberof Chatbot
     */
    'assignedMember': string | null;
    /**
     * Name of the channel to deploy to the chatbot
     * @type {string}
     * @memberof Chatbot
     */
    'deployedAccount': string | null;
    /**
     * Use this chatbot as an AI assistant. Only one chatbot can be used as an AI assistant per team
     * @type {boolean}
     * @memberof Chatbot
     */
    'useAsAiAssistant': boolean;
    /**
     * Whether the chatbot is enabled to send messages to the deployed account
     * @type {boolean}
     * @memberof Chatbot
     */
    'enableAccountDeployment': boolean;
    /**
     * Should generated responses include the source of the data
     * @type {boolean}
     * @memberof Chatbot
     */
    'includeSourceInResponse': boolean;
}

export const ChatbotTrainingStatusEnum = {
    Pending: 'pending',
    Running: 'running',
    Finished: 'finished',
    Failed: 'failed',
    Aborted: 'aborted'
} as const;

export type ChatbotTrainingStatusEnum = typeof ChatbotTrainingStatusEnum[keyof typeof ChatbotTrainingStatusEnum];

/**
 * 
 * @export
 * @interface ChatbotAllOf
 */
export interface ChatbotAllOf {
    /**
     * ID of the chatbot
     * @type {string}
     * @memberof ChatbotAllOf
     */
    'id': string;
    /**
     * 
     * @type {Array<Document>}
     * @memberof ChatbotAllOf
     */
    'documents'?: Array<Document>;
    /**
     * An ISO formatted timestamp
     * @type {string}
     * @memberof ChatbotAllOf
     */
    'createdAt': string;
    /**
     * An ISO formatted timestamp
     * @type {string}
     * @memberof ChatbotAllOf
     */
    'updatedAt': string;
    /**
     * Current training status of the chatbot
     * @type {string}
     * @memberof ChatbotAllOf
     */
    'trainingStatus': ChatbotAllOfTrainingStatusEnum;
    /**
     * Progress of training, between 0 and 100
     * @type {number}
     * @memberof ChatbotAllOf
     */
    'trainingProgress'?: number;
    /**
     * 
     * @type {Array<Job>}
     * @memberof ChatbotAllOf
     */
    'jobs'?: Array<Job>;
}

export const ChatbotAllOfTrainingStatusEnum = {
    Pending: 'pending',
    Running: 'running',
    Finished: 'finished',
    Failed: 'failed',
    Aborted: 'aborted'
} as const;

export type ChatbotAllOfTrainingStatusEnum = typeof ChatbotAllOfTrainingStatusEnum[keyof typeof ChatbotAllOfTrainingStatusEnum];

/**
 * 
 * @export
 * @interface ChatbotMessageRequest
 */
export interface ChatbotMessageRequest {
    /**
     * 
     * @type {string}
     * @memberof ChatbotMessageRequest
     */
    'message': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ChatbotMessageRequest
     */
    'conversationHistory': Array<string>;
}
/**
 * 
 * @export
 * @interface ChatbotMessageResponse
 */
export interface ChatbotMessageResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof ChatbotMessageResponse
     */
    'message': Array<string>;
    /**
     * List of sources the bot used to generate the response
     * @type {Array<string>}
     * @memberof ChatbotMessageResponse
     */
    'sources': Array<string>;
    /**
     * Is the response a fallback message
     * @type {boolean}
     * @memberof ChatbotMessageResponse
     */
    'isFallback': boolean;
}
/**
 * 
 * @export
 * @interface ContactToken
 */
interface ContactToken {
    /**
     * ID of the contact
     * @type {string}
     * @memberof ContactToken
     */
    'contactId': string;
    /**
     * Access token for the contact
     * @type {string}
     * @memberof ContactToken
     */
    'accessToken': string;
}
/**
 * 
 * @export
 * @interface CreateChatbotResponse
 */
export interface CreateChatbotResponse {
    /**
     * 
     * @type {Chatbot}
     * @memberof CreateChatbotResponse
     */
    'chatbot': Chatbot;
}
/**
 * 
 * @export
 * @interface DeleteTriggers200Response
 */
export interface DeleteTriggers200Response {
    /**
     * 
     * @type {number}
     * @memberof DeleteTriggers200Response
     */
    'affected'?: number;
    /**
     * 
     * @type {Array<object>}
     * @memberof DeleteTriggers200Response
     */
    'raw'?: Array<object>;
}
/**
 * 
 * @export
 * @interface Document
 */
export interface Document {
    /**
     * URL of the stored data
     * @type {string}
     * @memberof Document
     */
    'link': string;
    /**
     * ID of the document
     * @type {string}
     * @memberof Document
     */
    'id': string;
    /**
     * An ISO formatted timestamp
     * @type {string}
     * @memberof Document
     */
    'createdAt': string;
    /**
     * An ISO formatted timestamp
     * @type {string}
     * @memberof Document
     */
    'deletedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    'fileName'?: string | null;
    /**
     * Number of tokens in the document
     * @type {number}
     * @memberof Document
     */
    'tokenCount': number;
}
/**
 * 
 * @export
 * @interface ExecutionFrame
 */
export interface ExecutionFrame {
    /**
     * 
     * @type {string}
     * @memberof ExecutionFrame
     */
    'day'?: ExecutionFrameDayEnum;
    /**
     * 
     * @type {string}
     * @memberof ExecutionFrame
     */
    'startTime': string;
    /**
     * 
     * @type {string}
     * @memberof ExecutionFrame
     */
    'endTime': string;
}

export const ExecutionFrameDayEnum = {
    Monday: 'Monday',
    Tuesday: 'Tuesday',
    Wednesday: 'Wednesday',
    Thursday: 'Thursday',
    Friday: 'Friday',
    Saturday: 'Saturday',
    Sunday: 'Sunday'
} as const;

export type ExecutionFrameDayEnum = typeof ExecutionFrameDayEnum[keyof typeof ExecutionFrameDayEnum];

/**
 * 
 * @export
 * @interface GetChatbotsResponse
 */
export interface GetChatbotsResponse {
    /**
     * 
     * @type {Array<Chatbot>}
     * @memberof GetChatbotsResponse
     */
    'chatbots': Array<Chatbot>;
}
/**
 * 
 * @export
 * @interface GetExecutionRecord200Response
 */
export interface GetExecutionRecord200Response {
    /**
     * 
     * @type {Array<KeywordActionExecutionRecord>}
     * @memberof GetExecutionRecord200Response
     */
    'logs'?: Array<KeywordActionExecutionRecord>;
    /**
     * 
     * @type {number}
     * @memberof GetExecutionRecord200Response
     */
    'nextPageCursor'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetExecutionRecord200Response
     */
    'totalTriggered'?: number;
}
/**
 * 
 * @export
 * @interface GetTriggers200Response
 */
export interface GetTriggers200Response {
    /**
     * 
     * @type {Array<KeywordBasedAction>}
     * @memberof GetTriggers200Response
     */
    'triggers'?: Array<KeywordBasedAction>;
    /**
     * 
     * @type {number}
     * @memberof GetTriggers200Response
     */
    'nextPageCursor'?: number;
    /**
     * total keywords present with these filters. Only returned if returnTotalCount is true
     * @type {number}
     * @memberof GetTriggers200Response
     */
    'totalCount'?: number;
}
/**
 * 
 * @export
 * @interface Job
 */
export interface Job {
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'id': string;
    /**
     * 
     * @type {JobType}
     * @memberof Job
     */
    'type': JobType;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'link': string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'fileName'?: string;
    /**
     * 
     * @type {number}
     * @memberof Job
     */
    'progress': number;
    /**
     * An ISO formatted timestamp
     * @type {string}
     * @memberof Job
     */
    'createdAt': string;
    /**
     * 
     * @type {JobStatus}
     * @memberof Job
     */
    'status': JobStatus;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const JobStatus = {
    Pending: 'pending',
    Running: 'running',
    Finished: 'finished',
    Failed: 'failed',
    Aborted: 'aborted'
} as const;

export type JobStatus = typeof JobStatus[keyof typeof JobStatus];


/**
 * - crawl: crawl the URL and extract data - extract: extract data from the URL, expect pdf or docx
 * @export
 * @enum {string}
 */

export const JobType = {
    Crawl: 'crawl',
    Extract: 'extract'
} as const;

export type JobType = typeof JobType[keyof typeof JobType];


/**
 * 
 * @export
 * @interface Keyword
 */
export interface Keyword {
    /**
     * 
     * @type {string}
     * @memberof Keyword
     */
    'text'?: string;
    /**
     * An ISO formatted timestamp
     * @type {string}
     * @memberof Keyword
     */
    'createdAt'?: string;
}
/**
 * 
 * @export
 * @interface KeywordActionCreateRequestObj
 */
export interface KeywordActionCreateRequestObj {
    /**
     * Status of reply service
     * @type {boolean}
     * @memberof KeywordActionCreateRequestObj
     */
    'enabled'?: boolean;
    /**
     * Accounts the keywords will trigger for
     * @type {Array<string>}
     * @memberof KeywordActionCreateRequestObj
     */
    'accountIds'?: Array<string>;
    /**
     * Should typing indicator & read receipt be sent
     * @type {boolean}
     * @memberof KeywordActionCreateRequestObj
     */
    'sendTyping'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof KeywordActionCreateRequestObj
     */
    'cancelIfReplyReceived'?: boolean;
    /**
     * Toggles whether the keyword reply will trigger for group chats
     * @type {boolean}
     * @memberof KeywordActionCreateRequestObj
     */
    'enableOnGroupChats'?: boolean;
    /**
     * Only on the first message in a chat
     * @type {boolean}
     * @memberof KeywordActionCreateRequestObj
     */
    'onlyOnFirstMessage'?: boolean;
    /**
     * 
     * @type {TriggerType}
     * @memberof KeywordActionCreateRequestObj
     */
    'triggerType': TriggerType;
    /**
     * Unique triggering keywords
     * @type {Array<Keyword>}
     * @memberof KeywordActionCreateRequestObj
     */
    'keywords': Array<Keyword>;
    /**
     * Flow ids to be triggered
     * @type {Array<string>}
     * @memberof KeywordActionCreateRequestObj
     */
    'flowIds': Array<string>;
    /**
     * Timespan before the keyword can be triggered again, measured in seconds
     * @type {number}
     * @memberof KeywordActionCreateRequestObj
     */
    'delay'?: number;
    /**
     * 
     * @type {Array<ExecutionFrame>}
     * @memberof KeywordActionCreateRequestObj
     */
    'executionFrames'?: Array<ExecutionFrame>;
}


/**
 * 
 * @export
 * @interface KeywordActionEditRequestObj
 */
export interface KeywordActionEditRequestObj {
    /**
     * Keyword Id (auto incrementing)
     * @type {number}
     * @memberof KeywordActionEditRequestObj
     */
    'id': number;
    /**
     * Accounts the keywords will trigger for
     * @type {Array<string>}
     * @memberof KeywordActionEditRequestObj
     */
    'accountIds'?: Array<string>;
    /**
     * Status of reply service
     * @type {boolean}
     * @memberof KeywordActionEditRequestObj
     */
    'enabled'?: boolean;
    /**
     * Should typing indicator & read receipt be sent
     * @type {boolean}
     * @memberof KeywordActionEditRequestObj
     */
    'sendTyping'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof KeywordActionEditRequestObj
     */
    'cancelIfReplyReceived'?: boolean;
    /**
     * Only on the first message in a chat
     * @type {boolean}
     * @memberof KeywordActionEditRequestObj
     */
    'onlyOnFirstMessage'?: boolean;
    /**
     * Toggles whether the keyword reply will trigger for group chats
     * @type {boolean}
     * @memberof KeywordActionEditRequestObj
     */
    'enableOnGroupChats'?: boolean;
    /**
     * 
     * @type {TriggerType}
     * @memberof KeywordActionEditRequestObj
     */
    'triggerType'?: TriggerType;
    /**
     * Unique triggering keywords
     * @type {Array<Keyword>}
     * @memberof KeywordActionEditRequestObj
     */
    'keywords'?: Array<Keyword>;
    /**
     * Flow ids to be triggered
     * @type {Array<string>}
     * @memberof KeywordActionEditRequestObj
     */
    'flowIds'?: Array<string>;
    /**
     * Timespan before the keyword can be triggered again, measured in seconds
     * @type {number}
     * @memberof KeywordActionEditRequestObj
     */
    'delay'?: number;
    /**
     * 
     * @type {Array<ExecutionFrame>}
     * @memberof KeywordActionEditRequestObj
     */
    'executionFrames'?: Array<ExecutionFrame>;
}


/**
 * 
 * @export
 * @interface KeywordActionExecutionRecord
 */
export interface KeywordActionExecutionRecord {
    /**
     * Keyword Id (auto incrementing)
     * @type {number}
     * @memberof KeywordActionExecutionRecord
     */
    'id': number;
    /**
     * Triggering chatId (jid)
     * @type {string}
     * @memberof KeywordActionExecutionRecord
     */
    'chatId': string;
    /**
     * Incoming message body
     * @type {string}
     * @memberof KeywordActionExecutionRecord
     */
    'text': string;
    /**
     * FlowId to be triggered
     * @type {string}
     * @memberof KeywordActionExecutionRecord
     */
    'flowId'?: string;
    /**
     * An ISO formatted timestamp
     * @type {string}
     * @memberof KeywordActionExecutionRecord
     */
    'timestamp': string;
    /**
     * 
     * @type {string}
     * @memberof KeywordActionExecutionRecord
     */
    'messageId': string;
    /**
     * 
     * @type {string}
     * @memberof KeywordActionExecutionRecord
     */
    'accountId'?: string;
}
/**
 * 
 * @export
 * @interface KeywordBasedAction
 */
export interface KeywordBasedAction {
    /**
     * Keyword Id (auto incrementing)
     * @type {number}
     * @memberof KeywordBasedAction
     */
    'id': number;
    /**
     * Team the keyword belongs to
     * @type {string}
     * @memberof KeywordBasedAction
     */
    'teamId': string;
    /**
     * Accounts the keywords will trigger for
     * @type {Array<string>}
     * @memberof KeywordBasedAction
     */
    'accountIds'?: Array<string>;
    /**
     * Status of reply service
     * @type {boolean}
     * @memberof KeywordBasedAction
     */
    'enabled': boolean;
    /**
     * Should typing indicator & read receipt be sent
     * @type {boolean}
     * @memberof KeywordBasedAction
     */
    'sendTyping'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof KeywordBasedAction
     */
    'cancelIfReplyReceived'?: boolean;
    /**
     * Toggles whether the keyword reply will trigger for group chats
     * @type {boolean}
     * @memberof KeywordBasedAction
     */
    'enableOnGroupChats'?: boolean;
    /**
     * Only on the first message in a chat
     * @type {boolean}
     * @memberof KeywordBasedAction
     */
    'onlyOnFirstMessage'?: boolean;
    /**
     * 
     * @type {TriggerType}
     * @memberof KeywordBasedAction
     */
    'triggerType': TriggerType;
    /**
     * Unique triggering keywords
     * @type {Array<Keyword>}
     * @memberof KeywordBasedAction
     */
    'keywords': Array<Keyword>;
    /**
     * Flow ids to be triggered
     * @type {Array<string>}
     * @memberof KeywordBasedAction
     */
    'flowIds'?: Array<string>;
    /**
     * Timespan before the keyword can be triggered again, measured in seconds
     * @type {number}
     * @memberof KeywordBasedAction
     */
    'delay'?: number;
    /**
     * 
     * @type {Array<ExecutionFrame>}
     * @memberof KeywordBasedAction
     */
    'executionFrames'?: Array<ExecutionFrame>;
    /**
     * An ISO formatted timestamp
     * @type {string}
     * @memberof KeywordBasedAction
     */
    'createdAt': string;
    /**
     * An ISO formatted timestamp
     * @type {string}
     * @memberof KeywordBasedAction
     */
    'updatedAt'?: string;
    /**
     * User who created the keyword
     * @type {string}
     * @memberof KeywordBasedAction
     */
    'createdBy': string;
}


/**
 * 
 * @export
 * @interface OauthCallback200Response
 */
interface OauthCallback200Response {
    /**
     * 
     * @type {string}
     * @memberof OauthCallback200Response
     */
    'accessToken'?: string;
}
/**
 * 
 * @export
 * @interface StartJobRequest
 */
export interface StartJobRequest {
    /**
     * 
     * @type {string}
     * @memberof StartJobRequest
     */
    'link': string;
    /**
     * 
     * @type {string}
     * @memberof StartJobRequest
     */
    'fileName'?: string;
}
/**
 * 
 * @export
 * @interface StartJobResponse
 */
export interface StartJobResponse {
    /**
     * 
     * @type {Job}
     * @memberof StartJobResponse
     */
    'job': Job;
}
/**
 * 
 * @export
 * @interface TagSuggest200Response
 */
export interface TagSuggest200Response {
    /**
     * 
     * @type {Array<string>}
     * @memberof TagSuggest200Response
     */
    'suggestedTagNames'?: Array<string>;
}
/**
 * 
 * @export
 * @interface TrainingStatusResponse
 */
export interface TrainingStatusResponse {
    /**
     * Status of training
     * @type {string}
     * @memberof TrainingStatusResponse
     */
    'status': TrainingStatusResponseStatusEnum;
    /**
     * Progress of training
     * @type {number}
     * @memberof TrainingStatusResponse
     */
    'progress': number;
}

export const TrainingStatusResponseStatusEnum = {
    Idle: 'idle',
    InProgress: 'inProgress',
    Completed: 'completed',
    Failed: 'failed'
} as const;

export type TrainingStatusResponseStatusEnum = typeof TrainingStatusResponseStatusEnum[keyof typeof TrainingStatusResponseStatusEnum];

/**
 * 
 * @export
 * @interface TranscribePost200Response
 */
export interface TranscribePost200Response {
    /**
     * The transcription of the audio
     * @type {string}
     * @memberof TranscribePost200Response
     */
    'transcription': string;
}
/**
 * 
 * @export
 * @interface TranscribePostRequest
 */
export interface TranscribePostRequest {
    /**
     * The URL of the audio to transcribe
     * @type {string}
     * @memberof TranscribePostRequest
     */
    'audioUrl': string;
}
/**
 * Type of trigger
 * @export
 * @enum {string}
 */

export const TriggerType = {
    Contains: 'contains',
    ContainsPhrase: 'containsPhrase',
    StartsWith: 'startsWith',
    KeywordIs: 'keywordIs',
    DefaultReply: 'defaultReply'
} as const;

export type TriggerType = typeof TriggerType[keyof typeof TriggerType];


/**
 * 
 * @export
 * @interface UpdatableChatbotProperties
 */
export interface UpdatableChatbotProperties {
    /**
     * Name of the chatbot
     * @type {string}
     * @memberof UpdatableChatbotProperties
     */
    'name'?: string;
    /**
     * Fallback message of the chatbot
     * @type {string}
     * @memberof UpdatableChatbotProperties
     */
    'fallbackMessage'?: string;
    /**
     * Prompt message of the chatbot
     * @type {string}
     * @memberof UpdatableChatbotProperties
     */
    'prompt'?: string;
    /**
     * Name of the member to assign to the chatbot
     * @type {string}
     * @memberof UpdatableChatbotProperties
     */
    'assignedMember'?: string | null;
    /**
     * Name of the channel to deploy to the chatbot
     * @type {string}
     * @memberof UpdatableChatbotProperties
     */
    'deployedAccount'?: string | null;
    /**
     * Use this chatbot as an AI assistant. Only one chatbot can be used as an AI assistant per team
     * @type {boolean}
     * @memberof UpdatableChatbotProperties
     */
    'useAsAiAssistant'?: boolean;
    /**
     * Whether the chatbot is enabled to send messages to the deployed account
     * @type {boolean}
     * @memberof UpdatableChatbotProperties
     */
    'enableAccountDeployment'?: boolean;
    /**
     * Should generated responses include the source of the data
     * @type {boolean}
     * @memberof UpdatableChatbotProperties
     */
    'includeSourceInResponse'?: boolean;
}
/**
 * 
 * @export
 * @interface UpdateChatbotRequest
 */
export interface UpdateChatbotRequest {
    /**
     * Name of the chatbot
     * @type {string}
     * @memberof UpdateChatbotRequest
     */
    'name'?: string;
    /**
     * Fallback message of the chatbot
     * @type {string}
     * @memberof UpdateChatbotRequest
     */
    'fallbackMessage'?: string;
    /**
     * Prompt message of the chatbot
     * @type {string}
     * @memberof UpdateChatbotRequest
     */
    'prompt'?: string;
    /**
     * Name of the member to assign to the chatbot
     * @type {string}
     * @memberof UpdateChatbotRequest
     */
    'assignedMember'?: string | null;
    /**
     * Name of the channel to deploy to the chatbot
     * @type {string}
     * @memberof UpdateChatbotRequest
     */
    'deployedAccount'?: string | null;
    /**
     * Use this chatbot as an AI assistant. Only one chatbot can be used as an AI assistant per team
     * @type {boolean}
     * @memberof UpdateChatbotRequest
     */
    'useAsAiAssistant'?: boolean;
    /**
     * Whether the chatbot is enabled to send messages to the deployed account
     * @type {boolean}
     * @memberof UpdateChatbotRequest
     */
    'enableAccountDeployment'?: boolean;
    /**
     * Should generated responses include the source of the data
     * @type {boolean}
     * @memberof UpdateChatbotRequest
     */
    'includeSourceInResponse'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateChatbotRequest
     */
    'removeDocumentIds'?: Array<string>;
}
/**
 * 
 * @export
 * @interface UpdateChatbotRequestAllOf
 */
export interface UpdateChatbotRequestAllOf {
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateChatbotRequestAllOf
     */
    'removeDocumentIds'?: Array<string>;
}

/**
 * AudioTranscriptionApi - axios parameter creator
 * @export
 */
export const AudioTranscriptionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Accepts an audio URL and converts it to text using AWS Transcribe. Supports both streaming and batch processing.
         * @summary Convert audio URL to text
         * @param {TranscribePostRequest} transcribePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transcribePost: async (transcribePostRequest: TranscribePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transcribePostRequest' is not null or undefined
            assertParamExists('transcribePost', 'transcribePostRequest', transcribePostRequest)
            const localVarPath = `/transcribe`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["AUTOCOMPLETE_GET"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transcribePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AudioTranscriptionApi - functional programming interface
 * @export
 */
export const AudioTranscriptionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AudioTranscriptionApiAxiosParamCreator(configuration)
    return {
        /**
         * Accepts an audio URL and converts it to text using AWS Transcribe. Supports both streaming and batch processing.
         * @summary Convert audio URL to text
         * @param {TranscribePostRequest} transcribePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transcribePost(transcribePostRequest: TranscribePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TranscribePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transcribePost(transcribePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AudioTranscriptionApi - factory interface
 * @export
 */
export const AudioTranscriptionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AudioTranscriptionApiFp(configuration)
    return {
        /**
         * Accepts an audio URL and converts it to text using AWS Transcribe. Supports both streaming and batch processing.
         * @summary Convert audio URL to text
         * @param {AudioTranscriptionApiTranscribePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transcribePost(requestParameters: AudioTranscriptionApiTranscribePostRequest, options?: AxiosRequestConfig): AxiosPromise<TranscribePost200Response> {
            return localVarFp.transcribePost(requestParameters.transcribePostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for transcribePost operation in AudioTranscriptionApi.
 * @export
 * @interface AudioTranscriptionApiTranscribePostRequest
 */
export interface AudioTranscriptionApiTranscribePostRequest {
    /**
     * 
     * @type {TranscribePostRequest}
     * @memberof AudioTranscriptionApiTranscribePost
     */
    readonly transcribePostRequest: TranscribePostRequest
}

/**
 * AudioTranscriptionApi - object-oriented interface
 * @export
 * @class AudioTranscriptionApi
 * @extends {BaseAPI}
 */
export class AudioTranscriptionApi extends BaseAPI {
    /**
     * Accepts an audio URL and converts it to text using AWS Transcribe. Supports both streaming and batch processing.
     * @summary Convert audio URL to text
     * @param {AudioTranscriptionApiTranscribePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudioTranscriptionApi
     */
    public transcribePost(requestParameters: AudioTranscriptionApiTranscribePostRequest, options?: AxiosRequestConfig) {
        return AudioTranscriptionApiFp(this.configuration).transcribePost(requestParameters.transcribePostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AutocompleteApi - axios parameter creator
 * @export
 */
export const AutocompleteApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Extract calendar event information from message
         * @param {AutocompleteCalendarEventRequest} [autocompleteCalendarEventRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autocompleteCalendarEvent: async (autocompleteCalendarEventRequest?: AutocompleteCalendarEventRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/autocomplete/calendar-event`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["AUTOCOMPLETE_GET"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(autocompleteCalendarEventRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns autocomplete suggestions for a chat
         * @param {string} accountId 
         * @param {string} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autocompleteInbox: async (accountId: string, chatId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('autocompleteInbox', 'accountId', accountId)
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('autocompleteInbox', 'chatId', chatId)
            const localVarPath = `/autocomplete/inbox/{accountId}/{chatId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"chatId"}}`, encodeURIComponent(String(chatId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["AUTOCOMPLETE_GET"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Apply some modification to the given text
         * @param {AutocompleteModifier} modifier 
         * @param {AutocompleteModifyRequest} autocompleteModifyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autocompleteModify: async (modifier: AutocompleteModifier, autocompleteModifyRequest: AutocompleteModifyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modifier' is not null or undefined
            assertParamExists('autocompleteModify', 'modifier', modifier)
            // verify required parameter 'autocompleteModifyRequest' is not null or undefined
            assertParamExists('autocompleteModify', 'autocompleteModifyRequest', autocompleteModifyRequest)
            const localVarPath = `/autocomplete/modify/{modifier}`
                .replace(`{${"modifier"}}`, encodeURIComponent(String(modifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["AUTOCOMPLETE_GET"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(autocompleteModifyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary OAuth callback
         * @param {string} code 
         * @param {string} state 
         * @param {string} [scope] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthCallback: async (code: string, state: string, scope?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('oauthCallback', 'code', code)
            // verify required parameter 'state' is not null or undefined
            assertParamExists('oauthCallback', 'state', state)
            const localVarPath = `/oauth/callback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (scope !== undefined) {
                localVarQueryParameter['scope'] = scope;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a suggested tag name
         * @param {string} accountId 
         * @param {string} chatId 
         * @param {boolean} [isCustomField] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagSuggest: async (accountId: string, chatId: string, isCustomField?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('tagSuggest', 'accountId', accountId)
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('tagSuggest', 'chatId', chatId)
            const localVarPath = `/tag/suggest/{accountId}/{chatId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"chatId"}}`, encodeURIComponent(String(chatId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["AUTOCOMPLETE_GET"], configuration)

            if (isCustomField !== undefined) {
                localVarQueryParameter['isCustomField'] = isCustomField;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AutocompleteApi - functional programming interface
 * @export
 */
export const AutocompleteApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AutocompleteApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Extract calendar event information from message
         * @param {AutocompleteCalendarEventRequest} [autocompleteCalendarEventRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async autocompleteCalendarEvent(autocompleteCalendarEventRequest?: AutocompleteCalendarEventRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CalendarEvent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.autocompleteCalendarEvent(autocompleteCalendarEventRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns autocomplete suggestions for a chat
         * @param {string} accountId 
         * @param {string} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async autocompleteInbox(accountId: string, chatId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AutocompleteInbox200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.autocompleteInbox(accountId, chatId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Apply some modification to the given text
         * @param {AutocompleteModifier} modifier 
         * @param {AutocompleteModifyRequest} autocompleteModifyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async autocompleteModify(modifier: AutocompleteModifier, autocompleteModifyRequest: AutocompleteModifyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AutocompleteModify200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.autocompleteModify(modifier, autocompleteModifyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary OAuth callback
         * @param {string} code 
         * @param {string} state 
         * @param {string} [scope] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oauthCallback(code: string, state: string, scope?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OauthCallback200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oauthCallback(code, state, scope, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a suggested tag name
         * @param {string} accountId 
         * @param {string} chatId 
         * @param {boolean} [isCustomField] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tagSuggest(accountId: string, chatId: string, isCustomField?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagSuggest200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tagSuggest(accountId, chatId, isCustomField, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AutocompleteApi - factory interface
 * @export
 */
export const AutocompleteApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AutocompleteApiFp(configuration)
    return {
        /**
         * 
         * @summary Extract calendar event information from message
         * @param {AutocompleteApiAutocompleteCalendarEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autocompleteCalendarEvent(requestParameters: AutocompleteApiAutocompleteCalendarEventRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CalendarEvent> {
            return localVarFp.autocompleteCalendarEvent(requestParameters.autocompleteCalendarEventRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns autocomplete suggestions for a chat
         * @param {AutocompleteApiAutocompleteInboxRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autocompleteInbox(requestParameters: AutocompleteApiAutocompleteInboxRequest, options?: AxiosRequestConfig): AxiosPromise<AutocompleteInbox200Response> {
            return localVarFp.autocompleteInbox(requestParameters.accountId, requestParameters.chatId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Apply some modification to the given text
         * @param {AutocompleteApiAutocompleteModifyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autocompleteModify(requestParameters: AutocompleteApiAutocompleteModifyRequest, options?: AxiosRequestConfig): AxiosPromise<AutocompleteModify200Response> {
            return localVarFp.autocompleteModify(requestParameters.modifier, requestParameters.autocompleteModifyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary OAuth callback
         * @param {AutocompleteApiOauthCallbackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthCallback(requestParameters: AutocompleteApiOauthCallbackRequest, options?: AxiosRequestConfig): AxiosPromise<OauthCallback200Response> {
            return localVarFp.oauthCallback(requestParameters.code, requestParameters.state, requestParameters.scope, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a suggested tag name
         * @param {AutocompleteApiTagSuggestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagSuggest(requestParameters: AutocompleteApiTagSuggestRequest, options?: AxiosRequestConfig): AxiosPromise<TagSuggest200Response> {
            return localVarFp.tagSuggest(requestParameters.accountId, requestParameters.chatId, requestParameters.isCustomField, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for autocompleteCalendarEvent operation in AutocompleteApi.
 * @export
 * @interface AutocompleteApiAutocompleteCalendarEventRequest
 */
export interface AutocompleteApiAutocompleteCalendarEventRequest {
    /**
     * 
     * @type {AutocompleteCalendarEventRequest}
     * @memberof AutocompleteApiAutocompleteCalendarEvent
     */
    readonly autocompleteCalendarEventRequest?: AutocompleteCalendarEventRequest
}

/**
 * Request parameters for autocompleteInbox operation in AutocompleteApi.
 * @export
 * @interface AutocompleteApiAutocompleteInboxRequest
 */
export interface AutocompleteApiAutocompleteInboxRequest {
    /**
     * 
     * @type {string}
     * @memberof AutocompleteApiAutocompleteInbox
     */
    readonly accountId: string

    /**
     * 
     * @type {string}
     * @memberof AutocompleteApiAutocompleteInbox
     */
    readonly chatId: string
}

/**
 * Request parameters for autocompleteModify operation in AutocompleteApi.
 * @export
 * @interface AutocompleteApiAutocompleteModifyRequest
 */
export interface AutocompleteApiAutocompleteModifyRequest {
    /**
     * 
     * @type {AutocompleteModifier}
     * @memberof AutocompleteApiAutocompleteModify
     */
    readonly modifier: AutocompleteModifier

    /**
     * 
     * @type {AutocompleteModifyRequest}
     * @memberof AutocompleteApiAutocompleteModify
     */
    readonly autocompleteModifyRequest: AutocompleteModifyRequest
}

/**
 * Request parameters for oauthCallback operation in AutocompleteApi.
 * @export
 * @interface AutocompleteApiOauthCallbackRequest
 */
export interface AutocompleteApiOauthCallbackRequest {
    /**
     * 
     * @type {string}
     * @memberof AutocompleteApiOauthCallback
     */
    readonly code: string

    /**
     * 
     * @type {string}
     * @memberof AutocompleteApiOauthCallback
     */
    readonly state: string

    /**
     * 
     * @type {string}
     * @memberof AutocompleteApiOauthCallback
     */
    readonly scope?: string
}

/**
 * Request parameters for tagSuggest operation in AutocompleteApi.
 * @export
 * @interface AutocompleteApiTagSuggestRequest
 */
export interface AutocompleteApiTagSuggestRequest {
    /**
     * 
     * @type {string}
     * @memberof AutocompleteApiTagSuggest
     */
    readonly accountId: string

    /**
     * 
     * @type {string}
     * @memberof AutocompleteApiTagSuggest
     */
    readonly chatId: string

    /**
     * 
     * @type {boolean}
     * @memberof AutocompleteApiTagSuggest
     */
    readonly isCustomField?: boolean
}

/**
 * AutocompleteApi - object-oriented interface
 * @export
 * @class AutocompleteApi
 * @extends {BaseAPI}
 */
export class AutocompleteApi extends BaseAPI {
    /**
     * 
     * @summary Extract calendar event information from message
     * @param {AutocompleteApiAutocompleteCalendarEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutocompleteApi
     */
    public autocompleteCalendarEvent(requestParameters: AutocompleteApiAutocompleteCalendarEventRequest = {}, options?: AxiosRequestConfig) {
        return AutocompleteApiFp(this.configuration).autocompleteCalendarEvent(requestParameters.autocompleteCalendarEventRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns autocomplete suggestions for a chat
     * @param {AutocompleteApiAutocompleteInboxRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutocompleteApi
     */
    public autocompleteInbox(requestParameters: AutocompleteApiAutocompleteInboxRequest, options?: AxiosRequestConfig) {
        return AutocompleteApiFp(this.configuration).autocompleteInbox(requestParameters.accountId, requestParameters.chatId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Apply some modification to the given text
     * @param {AutocompleteApiAutocompleteModifyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutocompleteApi
     */
    public autocompleteModify(requestParameters: AutocompleteApiAutocompleteModifyRequest, options?: AxiosRequestConfig) {
        return AutocompleteApiFp(this.configuration).autocompleteModify(requestParameters.modifier, requestParameters.autocompleteModifyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary OAuth callback
     * @param {AutocompleteApiOauthCallbackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutocompleteApi
     */
    public oauthCallback(requestParameters: AutocompleteApiOauthCallbackRequest, options?: AxiosRequestConfig) {
        return AutocompleteApiFp(this.configuration).oauthCallback(requestParameters.code, requestParameters.state, requestParameters.scope, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a suggested tag name
     * @param {AutocompleteApiTagSuggestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutocompleteApi
     */
    public tagSuggest(requestParameters: AutocompleteApiTagSuggestRequest, options?: AxiosRequestConfig) {
        return AutocompleteApiFp(this.configuration).tagSuggest(requestParameters.accountId, requestParameters.chatId, requestParameters.isCustomField, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ChatbotApi - axios parameter creator
 * @export
 */
export const ChatbotApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Refresh Chatbot data
         * @param {string} id ID of the chatbot
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatbotRefresh: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('chatbotRefresh', 'id', id)
            const localVarPath = `/chatbot/{id}/refresh`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["AUTOCOMPLETE_GET"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a chatbot
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBot: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/chatbots`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["AUTOCOMPLETE_GET"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete a chatbot
         * @param {string} id ID of the chatbot
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBot: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteBot', 'id', id)
            const localVarPath = `/chatbots/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["AUTOCOMPLETE_GET"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user\'s chatbots
         * @param {Array<string>} [id] Find the chatbots with the given ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBots: async (id?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/chatbots`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["AUTOCOMPLETE_GET"], configuration)

            if (id) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Start an extraction or crawling job
         * @param {string} id ID of the chatbot
         * @param {JobType} type Type of data to be added
         * @param {StartJobRequest} [startJobRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobStart: async (id: string, type: JobType, startJobRequest?: StartJobRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('jobStart', 'id', id)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('jobStart', 'type', type)
            const localVarPath = `/chatbot/{id}/jobs/{type}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["AUTOCOMPLETE_GET"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(startJobRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send message to the chatbot
         * @param {string} id ID of the chatbot
         * @param {ChatbotMessageRequest} [chatbotMessageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messageBot: async (id: string, chatbotMessageRequest?: ChatbotMessageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('messageBot', 'id', id)
            const localVarPath = `/chatbot/{id}/message`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["AUTOCOMPLETE_GET"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(chatbotMessageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Start training the chatbot
         * @param {string} id ID of the chatbot
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trainChatbot: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('trainChatbot', 'id', id)
            const localVarPath = `/chatbot/{id}/train`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["AUTOCOMPLETE_GET"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update chatbot
         * @param {string} id ID of the chatbot
         * @param {UpdateChatbotRequest} [updateChatbotRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBot: async (id: string, updateChatbotRequest?: UpdateChatbotRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateBot', 'id', id)
            const localVarPath = `/chatbots/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["AUTOCOMPLETE_GET"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateChatbotRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChatbotApi - functional programming interface
 * @export
 */
export const ChatbotApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChatbotApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Refresh Chatbot data
         * @param {string} id ID of the chatbot
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatbotRefresh(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Chatbot>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.chatbotRefresh(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a chatbot
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBot(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateChatbotResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBot(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary delete a chatbot
         * @param {string} id ID of the chatbot
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBot(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBot(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get user\'s chatbots
         * @param {Array<string>} [id] Find the chatbots with the given ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBots(id?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetChatbotsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBots(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Start an extraction or crawling job
         * @param {string} id ID of the chatbot
         * @param {JobType} type Type of data to be added
         * @param {StartJobRequest} [startJobRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobStart(id: string, type: JobType, startJobRequest?: StartJobRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StartJobResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobStart(id, type, startJobRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Send message to the chatbot
         * @param {string} id ID of the chatbot
         * @param {ChatbotMessageRequest} [chatbotMessageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async messageBot(id: string, chatbotMessageRequest?: ChatbotMessageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatbotMessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.messageBot(id, chatbotMessageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Start training the chatbot
         * @param {string} id ID of the chatbot
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trainChatbot(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trainChatbot(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update chatbot
         * @param {string} id ID of the chatbot
         * @param {UpdateChatbotRequest} [updateChatbotRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBot(id: string, updateChatbotRequest?: UpdateChatbotRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBot(id, updateChatbotRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ChatbotApi - factory interface
 * @export
 */
export const ChatbotApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChatbotApiFp(configuration)
    return {
        /**
         * 
         * @summary Refresh Chatbot data
         * @param {ChatbotApiChatbotRefreshRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatbotRefresh(requestParameters: ChatbotApiChatbotRefreshRequest, options?: AxiosRequestConfig): AxiosPromise<Chatbot> {
            return localVarFp.chatbotRefresh(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a chatbot
         * @param {ChatbotApiCreateBotRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBot(requestParameters: ChatbotApiCreateBotRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CreateChatbotResponse> {
            return localVarFp.createBot(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete a chatbot
         * @param {ChatbotApiDeleteBotRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBot(requestParameters: ChatbotApiDeleteBotRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteBot(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user\'s chatbots
         * @param {ChatbotApiGetBotsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBots(requestParameters: ChatbotApiGetBotsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetChatbotsResponse> {
            return localVarFp.getBots(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Start an extraction or crawling job
         * @param {ChatbotApiJobStartRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobStart(requestParameters: ChatbotApiJobStartRequest, options?: AxiosRequestConfig): AxiosPromise<StartJobResponse> {
            return localVarFp.jobStart(requestParameters.id, requestParameters.type, requestParameters.startJobRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send message to the chatbot
         * @param {ChatbotApiMessageBotRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messageBot(requestParameters: ChatbotApiMessageBotRequest, options?: AxiosRequestConfig): AxiosPromise<ChatbotMessageResponse> {
            return localVarFp.messageBot(requestParameters.id, requestParameters.chatbotMessageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Start training the chatbot
         * @param {ChatbotApiTrainChatbotRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trainChatbot(requestParameters: ChatbotApiTrainChatbotRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.trainChatbot(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update chatbot
         * @param {ChatbotApiUpdateBotRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBot(requestParameters: ChatbotApiUpdateBotRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateBot(requestParameters.id, requestParameters.updateChatbotRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for chatbotRefresh operation in ChatbotApi.
 * @export
 * @interface ChatbotApiChatbotRefreshRequest
 */
export interface ChatbotApiChatbotRefreshRequest {
    /**
     * ID of the chatbot
     * @type {string}
     * @memberof ChatbotApiChatbotRefresh
     */
    readonly id: string
}

/**
 * Request parameters for createBot operation in ChatbotApi.
 * @export
 * @interface ChatbotApiCreateBotRequest
 */
export interface ChatbotApiCreateBotRequest {
    /**
     * 
     * @type {object}
     * @memberof ChatbotApiCreateBot
     */
    readonly body?: object
}

/**
 * Request parameters for deleteBot operation in ChatbotApi.
 * @export
 * @interface ChatbotApiDeleteBotRequest
 */
export interface ChatbotApiDeleteBotRequest {
    /**
     * ID of the chatbot
     * @type {string}
     * @memberof ChatbotApiDeleteBot
     */
    readonly id: string
}

/**
 * Request parameters for getBots operation in ChatbotApi.
 * @export
 * @interface ChatbotApiGetBotsRequest
 */
export interface ChatbotApiGetBotsRequest {
    /**
     * Find the chatbots with the given ids
     * @type {Array<string>}
     * @memberof ChatbotApiGetBots
     */
    readonly id?: Array<string>
}

/**
 * Request parameters for jobStart operation in ChatbotApi.
 * @export
 * @interface ChatbotApiJobStartRequest
 */
export interface ChatbotApiJobStartRequest {
    /**
     * ID of the chatbot
     * @type {string}
     * @memberof ChatbotApiJobStart
     */
    readonly id: string

    /**
     * Type of data to be added
     * @type {JobType}
     * @memberof ChatbotApiJobStart
     */
    readonly type: JobType

    /**
     * 
     * @type {StartJobRequest}
     * @memberof ChatbotApiJobStart
     */
    readonly startJobRequest?: StartJobRequest
}

/**
 * Request parameters for messageBot operation in ChatbotApi.
 * @export
 * @interface ChatbotApiMessageBotRequest
 */
export interface ChatbotApiMessageBotRequest {
    /**
     * ID of the chatbot
     * @type {string}
     * @memberof ChatbotApiMessageBot
     */
    readonly id: string

    /**
     * 
     * @type {ChatbotMessageRequest}
     * @memberof ChatbotApiMessageBot
     */
    readonly chatbotMessageRequest?: ChatbotMessageRequest
}

/**
 * Request parameters for trainChatbot operation in ChatbotApi.
 * @export
 * @interface ChatbotApiTrainChatbotRequest
 */
export interface ChatbotApiTrainChatbotRequest {
    /**
     * ID of the chatbot
     * @type {string}
     * @memberof ChatbotApiTrainChatbot
     */
    readonly id: string
}

/**
 * Request parameters for updateBot operation in ChatbotApi.
 * @export
 * @interface ChatbotApiUpdateBotRequest
 */
export interface ChatbotApiUpdateBotRequest {
    /**
     * ID of the chatbot
     * @type {string}
     * @memberof ChatbotApiUpdateBot
     */
    readonly id: string

    /**
     * 
     * @type {UpdateChatbotRequest}
     * @memberof ChatbotApiUpdateBot
     */
    readonly updateChatbotRequest?: UpdateChatbotRequest
}

/**
 * ChatbotApi - object-oriented interface
 * @export
 * @class ChatbotApi
 * @extends {BaseAPI}
 */
export class ChatbotApi extends BaseAPI {
    /**
     * 
     * @summary Refresh Chatbot data
     * @param {ChatbotApiChatbotRefreshRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatbotApi
     */
    public chatbotRefresh(requestParameters: ChatbotApiChatbotRefreshRequest, options?: AxiosRequestConfig) {
        return ChatbotApiFp(this.configuration).chatbotRefresh(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a chatbot
     * @param {ChatbotApiCreateBotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatbotApi
     */
    public createBot(requestParameters: ChatbotApiCreateBotRequest = {}, options?: AxiosRequestConfig) {
        return ChatbotApiFp(this.configuration).createBot(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete a chatbot
     * @param {ChatbotApiDeleteBotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatbotApi
     */
    public deleteBot(requestParameters: ChatbotApiDeleteBotRequest, options?: AxiosRequestConfig) {
        return ChatbotApiFp(this.configuration).deleteBot(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user\'s chatbots
     * @param {ChatbotApiGetBotsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatbotApi
     */
    public getBots(requestParameters: ChatbotApiGetBotsRequest = {}, options?: AxiosRequestConfig) {
        return ChatbotApiFp(this.configuration).getBots(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Start an extraction or crawling job
     * @param {ChatbotApiJobStartRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatbotApi
     */
    public jobStart(requestParameters: ChatbotApiJobStartRequest, options?: AxiosRequestConfig) {
        return ChatbotApiFp(this.configuration).jobStart(requestParameters.id, requestParameters.type, requestParameters.startJobRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send message to the chatbot
     * @param {ChatbotApiMessageBotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatbotApi
     */
    public messageBot(requestParameters: ChatbotApiMessageBotRequest, options?: AxiosRequestConfig) {
        return ChatbotApiFp(this.configuration).messageBot(requestParameters.id, requestParameters.chatbotMessageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Start training the chatbot
     * @param {ChatbotApiTrainChatbotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatbotApi
     */
    public trainChatbot(requestParameters: ChatbotApiTrainChatbotRequest, options?: AxiosRequestConfig) {
        return ChatbotApiFp(this.configuration).trainChatbot(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update chatbot
     * @param {ChatbotApiUpdateBotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatbotApi
     */
    public updateBot(requestParameters: ChatbotApiUpdateBotRequest, options?: AxiosRequestConfig) {
        return ChatbotApiFp(this.configuration).updateBot(requestParameters.id, requestParameters.updateChatbotRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * KeywordsApi - axios parameter creator
 * @export
 */
export const KeywordsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create new Keyword Based Action
         * @param {Array<KeywordActionCreateRequestObj>} keywordActionCreateRequestObj 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTrigger: async (keywordActionCreateRequestObj: Array<KeywordActionCreateRequestObj>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keywordActionCreateRequestObj' is not null or undefined
            assertParamExists('createTrigger', 'keywordActionCreateRequestObj', keywordActionCreateRequestObj)
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["KEYWORD_CREATE"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(keywordActionCreateRequestObj, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Keyword Based Action
         * @param {Array<string>} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTriggers: async (ids: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('deleteTriggers', 'ids', ids)
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["KEYWORD_DELETE"], configuration)

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit Keyword Based Action
         * @param {Array<KeywordActionEditRequestObj>} keywordActionEditRequestObj 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editTrigger: async (keywordActionEditRequestObj: Array<KeywordActionEditRequestObj>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keywordActionEditRequestObj' is not null or undefined
            assertParamExists('editTrigger', 'keywordActionEditRequestObj', keywordActionEditRequestObj)
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["KEYWORD_UPDATE"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(keywordActionEditRequestObj, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the trigger log of the keyword reply.
         * @param {string} id 
         * @param {number} [count] 
         * @param {string} [cursor] 
         * @param {boolean} [returnTotalTriggered] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExecutionRecord: async (id: string, count?: number, cursor?: string, returnTotalTriggered?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getExecutionRecord', 'id', id)
            const localVarPath = `/log/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["KEYWORD_READ"], configuration)

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (returnTotalTriggered !== undefined) {
                localVarQueryParameter['returnTotalTriggered'] = returnTotalTriggered;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Query for user\'s Keyword Actions
         * @param {string} [q] 
         * @param {number} [count] 
         * @param {Array<string>} [id] 
         * @param {TriggerType} [triggerType] Query keywords with the specific trigger type
         * @param {string} [cursor] 
         * @param {boolean} [returnTotalCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTriggers: async (q?: string, count?: number, id?: Array<string>, triggerType?: TriggerType, cursor?: string, returnTotalCount?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["KEYWORD_READ"], configuration)

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (triggerType !== undefined) {
                localVarQueryParameter['triggerType'] = triggerType;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (returnTotalCount !== undefined) {
                localVarQueryParameter['returnTotalCount'] = returnTotalCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * KeywordsApi - functional programming interface
 * @export
 */
export const KeywordsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = KeywordsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create new Keyword Based Action
         * @param {Array<KeywordActionCreateRequestObj>} keywordActionCreateRequestObj 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTrigger(keywordActionCreateRequestObj: Array<KeywordActionCreateRequestObj>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<KeywordBasedAction>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTrigger(keywordActionCreateRequestObj, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Keyword Based Action
         * @param {Array<string>} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTriggers(ids: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteTriggers200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTriggers(ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Edit Keyword Based Action
         * @param {Array<KeywordActionEditRequestObj>} keywordActionEditRequestObj 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editTrigger(keywordActionEditRequestObj: Array<KeywordActionEditRequestObj>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<KeywordBasedAction>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editTrigger(keywordActionEditRequestObj, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns the trigger log of the keyword reply.
         * @param {string} id 
         * @param {number} [count] 
         * @param {string} [cursor] 
         * @param {boolean} [returnTotalTriggered] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExecutionRecord(id: string, count?: number, cursor?: string, returnTotalTriggered?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetExecutionRecord200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExecutionRecord(id, count, cursor, returnTotalTriggered, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Query for user\'s Keyword Actions
         * @param {string} [q] 
         * @param {number} [count] 
         * @param {Array<string>} [id] 
         * @param {TriggerType} [triggerType] Query keywords with the specific trigger type
         * @param {string} [cursor] 
         * @param {boolean} [returnTotalCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTriggers(q?: string, count?: number, id?: Array<string>, triggerType?: TriggerType, cursor?: string, returnTotalCount?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTriggers200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTriggers(q, count, id, triggerType, cursor, returnTotalCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * KeywordsApi - factory interface
 * @export
 */
export const KeywordsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = KeywordsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create new Keyword Based Action
         * @param {KeywordsApiCreateTriggerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTrigger(requestParameters: KeywordsApiCreateTriggerRequest, options?: AxiosRequestConfig): AxiosPromise<Array<KeywordBasedAction>> {
            return localVarFp.createTrigger(requestParameters.keywordActionCreateRequestObj, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Keyword Based Action
         * @param {KeywordsApiDeleteTriggersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTriggers(requestParameters: KeywordsApiDeleteTriggersRequest, options?: AxiosRequestConfig): AxiosPromise<DeleteTriggers200Response> {
            return localVarFp.deleteTriggers(requestParameters.ids, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit Keyword Based Action
         * @param {KeywordsApiEditTriggerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editTrigger(requestParameters: KeywordsApiEditTriggerRequest, options?: AxiosRequestConfig): AxiosPromise<Array<KeywordBasedAction>> {
            return localVarFp.editTrigger(requestParameters.keywordActionEditRequestObj, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns the trigger log of the keyword reply.
         * @param {KeywordsApiGetExecutionRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExecutionRecord(requestParameters: KeywordsApiGetExecutionRecordRequest, options?: AxiosRequestConfig): AxiosPromise<GetExecutionRecord200Response> {
            return localVarFp.getExecutionRecord(requestParameters.id, requestParameters.count, requestParameters.cursor, requestParameters.returnTotalTriggered, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Query for user\'s Keyword Actions
         * @param {KeywordsApiGetTriggersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTriggers(requestParameters: KeywordsApiGetTriggersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetTriggers200Response> {
            return localVarFp.getTriggers(requestParameters.q, requestParameters.count, requestParameters.id, requestParameters.triggerType, requestParameters.cursor, requestParameters.returnTotalCount, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createTrigger operation in KeywordsApi.
 * @export
 * @interface KeywordsApiCreateTriggerRequest
 */
export interface KeywordsApiCreateTriggerRequest {
    /**
     * 
     * @type {Array<KeywordActionCreateRequestObj>}
     * @memberof KeywordsApiCreateTrigger
     */
    readonly keywordActionCreateRequestObj: Array<KeywordActionCreateRequestObj>
}

/**
 * Request parameters for deleteTriggers operation in KeywordsApi.
 * @export
 * @interface KeywordsApiDeleteTriggersRequest
 */
export interface KeywordsApiDeleteTriggersRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof KeywordsApiDeleteTriggers
     */
    readonly ids: Array<string>
}

/**
 * Request parameters for editTrigger operation in KeywordsApi.
 * @export
 * @interface KeywordsApiEditTriggerRequest
 */
export interface KeywordsApiEditTriggerRequest {
    /**
     * 
     * @type {Array<KeywordActionEditRequestObj>}
     * @memberof KeywordsApiEditTrigger
     */
    readonly keywordActionEditRequestObj: Array<KeywordActionEditRequestObj>
}

/**
 * Request parameters for getExecutionRecord operation in KeywordsApi.
 * @export
 * @interface KeywordsApiGetExecutionRecordRequest
 */
export interface KeywordsApiGetExecutionRecordRequest {
    /**
     * 
     * @type {string}
     * @memberof KeywordsApiGetExecutionRecord
     */
    readonly id: string

    /**
     * 
     * @type {number}
     * @memberof KeywordsApiGetExecutionRecord
     */
    readonly count?: number

    /**
     * 
     * @type {string}
     * @memberof KeywordsApiGetExecutionRecord
     */
    readonly cursor?: string

    /**
     * 
     * @type {boolean}
     * @memberof KeywordsApiGetExecutionRecord
     */
    readonly returnTotalTriggered?: boolean
}

/**
 * Request parameters for getTriggers operation in KeywordsApi.
 * @export
 * @interface KeywordsApiGetTriggersRequest
 */
export interface KeywordsApiGetTriggersRequest {
    /**
     * 
     * @type {string}
     * @memberof KeywordsApiGetTriggers
     */
    readonly q?: string

    /**
     * 
     * @type {number}
     * @memberof KeywordsApiGetTriggers
     */
    readonly count?: number

    /**
     * 
     * @type {Array<string>}
     * @memberof KeywordsApiGetTriggers
     */
    readonly id?: Array<string>

    /**
     * Query keywords with the specific trigger type
     * @type {TriggerType}
     * @memberof KeywordsApiGetTriggers
     */
    readonly triggerType?: TriggerType

    /**
     * 
     * @type {string}
     * @memberof KeywordsApiGetTriggers
     */
    readonly cursor?: string

    /**
     * 
     * @type {boolean}
     * @memberof KeywordsApiGetTriggers
     */
    readonly returnTotalCount?: boolean
}

/**
 * KeywordsApi - object-oriented interface
 * @export
 * @class KeywordsApi
 * @extends {BaseAPI}
 */
export class KeywordsApi extends BaseAPI {
    /**
     * 
     * @summary Create new Keyword Based Action
     * @param {KeywordsApiCreateTriggerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeywordsApi
     */
    public createTrigger(requestParameters: KeywordsApiCreateTriggerRequest, options?: AxiosRequestConfig) {
        return KeywordsApiFp(this.configuration).createTrigger(requestParameters.keywordActionCreateRequestObj, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Keyword Based Action
     * @param {KeywordsApiDeleteTriggersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeywordsApi
     */
    public deleteTriggers(requestParameters: KeywordsApiDeleteTriggersRequest, options?: AxiosRequestConfig) {
        return KeywordsApiFp(this.configuration).deleteTriggers(requestParameters.ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit Keyword Based Action
     * @param {KeywordsApiEditTriggerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeywordsApi
     */
    public editTrigger(requestParameters: KeywordsApiEditTriggerRequest, options?: AxiosRequestConfig) {
        return KeywordsApiFp(this.configuration).editTrigger(requestParameters.keywordActionEditRequestObj, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns the trigger log of the keyword reply.
     * @param {KeywordsApiGetExecutionRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeywordsApi
     */
    public getExecutionRecord(requestParameters: KeywordsApiGetExecutionRecordRequest, options?: AxiosRequestConfig) {
        return KeywordsApiFp(this.configuration).getExecutionRecord(requestParameters.id, requestParameters.count, requestParameters.cursor, requestParameters.returnTotalTriggered, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Query for user\'s Keyword Actions
     * @param {KeywordsApiGetTriggersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeywordsApi
     */
    public getTriggers(requestParameters: KeywordsApiGetTriggersRequest = {}, options?: AxiosRequestConfig) {
        return KeywordsApiFp(this.configuration).getTriggers(requestParameters.q, requestParameters.count, requestParameters.id, requestParameters.triggerType, requestParameters.cursor, requestParameters.returnTotalCount, options).then((request) => request(this.axios, this.basePath));
    }
}


