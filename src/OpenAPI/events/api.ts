const BASE_PATH = "https://api.chatdaddy.tech/events".replace(/\/+$/, "");

/* tslint:disable */
/* eslint-disable */
/**
 * ChatDaddy Events Service
 * Receive live events from ChatDaddy via a WebSocket or register a web hook 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
import type { RequestArgs } from '../base';
// @ts-ignore
import { COLLECTION_FORMATS, BaseAPI, RequiredError } from '../base';

/**
 * 
 * @export
 * @interface AccountDelete
 */
export interface AccountDelete {
    /**
     * 
     * @type {string}
     * @memberof AccountDelete
     */
    'event': AccountDeleteEventEnum;
    /**
     * 
     * @type {Array<AccountDeleteData>}
     * @memberof AccountDelete
     */
    'data': Array<AccountDeleteData>;
}

export const AccountDeleteEventEnum = {
    AccountDelete: 'account-delete'
} as const;

export type AccountDeleteEventEnum = typeof AccountDeleteEventEnum[keyof typeof AccountDeleteEventEnum];

/**
 * 
 * @export
 * @interface AccountDeleteData
 */
export interface AccountDeleteData {
    /**
     * 
     * @type {string}
     * @memberof AccountDeleteData
     */
    'accountId': string;
}
/**
 * 
 * @export
 * @interface AccountInsert
 */
export interface AccountInsert {
    /**
     * 
     * @type {string}
     * @memberof AccountInsert
     */
    'event': AccountInsertEventEnum;
    /**
     * 
     * @type {Array<AccountInsertData>}
     * @memberof AccountInsert
     */
    'data': Array<AccountInsertData>;
}

export const AccountInsertEventEnum = {
    AccountInsert: 'account-insert'
} as const;

export type AccountInsertEventEnum = typeof AccountInsertEventEnum[keyof typeof AccountInsertEventEnum];

/**
 * 
 * @export
 * @interface AccountInsertData
 */
export interface AccountInsertData {
    /**
     * 
     * @type {string}
     * @memberof AccountInsertData
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof AccountInsertData
     */
    'ownerId': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AccountInsertData
     */
    'assignees'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof AccountInsertData
     */
    'nickname': string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof AccountInsertData
     */
    'credentials'?: { [key: string]: any; } | null;
    /**
     * 
     * @type {string}
     * @memberof AccountInsertData
     */
    'tier'?: AccountInsertDataTierEnum;
    /**
     * 
     * @type {string}
     * @memberof AccountInsertData
     */
    'type': AccountInsertDataTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof AccountInsertData
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof AccountInsertData
     */
    'createdBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountInsertData
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof AccountInsertData
     */
    'deletedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountInsertData
     */
    'lastLoginAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountInsertData
     */
    'lastLogoutAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountInsertData
     */
    'lastClosedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountInsertData
     */
    'state': AccountInsertDataStateEnum;
    /**
     * 
     * @type {AccountInsertDataError}
     * @memberof AccountInsertData
     */
    'error'?: AccountInsertDataError | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof AccountInsertData
     */
    'stateInfo': { [key: string]: any; };
    /**
     * 
     * @type {boolean}
     * @memberof AccountInsertData
     */
    'canLogin': boolean;
    /**
     * 
     * @type {string}
     * @memberof AccountInsertData
     */
    'userId'?: string | null;
    /**
     * 
     * @type {AccountInsertDataSettings}
     * @memberof AccountInsertData
     */
    'settings': AccountInsertDataSettings;
}

export const AccountInsertDataTierEnum = {
    LimitedMsgNoChatHistory: 'limited_msg_no_chat_history',
    UnlimitedMsgChatHistory: 'unlimited_msg_chat_history'
} as const;

export type AccountInsertDataTierEnum = typeof AccountInsertDataTierEnum[keyof typeof AccountInsertDataTierEnum];
export const AccountInsertDataTypeEnum = {
    Wa: 'wa',
    WaBusinessApi: 'wa-business-api',
    Mock: 'mock',
    Tiktok: 'tiktok',
    Messenger: 'messenger',
    Mail: 'mail',
    Sms: 'sms',
    Instagram: 'instagram'
} as const;

export type AccountInsertDataTypeEnum = typeof AccountInsertDataTypeEnum[keyof typeof AccountInsertDataTypeEnum];
export const AccountInsertDataStateEnum = {
    Open: 'open',
    Connecting: 'connecting',
    Close: 'close'
} as const;

export type AccountInsertDataStateEnum = typeof AccountInsertDataStateEnum[keyof typeof AccountInsertDataStateEnum];

/**
 * 
 * @export
 * @interface AccountInsertDataError
 */
export interface AccountInsertDataError {
    /**
     * 
     * @type {number}
     * @memberof AccountInsertDataError
     */
    'statusCode': number;
    /**
     * 
     * @type {string}
     * @memberof AccountInsertDataError
     */
    'message': string;
    /**
     * 
     * @type {AccountInsertDataErrorAllOfData}
     * @memberof AccountInsertDataError
     */
    'data'?: AccountInsertDataErrorAllOfData;
}
/**
 * 
 * @export
 * @interface AccountInsertDataErrorAllOf
 */
export interface AccountInsertDataErrorAllOf {
    /**
     * 
     * @type {number}
     * @memberof AccountInsertDataErrorAllOf
     */
    'statusCode': number;
    /**
     * 
     * @type {string}
     * @memberof AccountInsertDataErrorAllOf
     */
    'message': string;
    /**
     * 
     * @type {AccountInsertDataErrorAllOfData}
     * @memberof AccountInsertDataErrorAllOf
     */
    'data'?: AccountInsertDataErrorAllOfData;
}
/**
 * 
 * @export
 * @interface AccountInsertDataErrorAllOfData
 */
export interface AccountInsertDataErrorAllOfData {
    [key: string]: any;

    /**
     * 
     * @type {AccountInsertDataErrorAllOfDataHelpLink}
     * @memberof AccountInsertDataErrorAllOfData
     */
    'helpLink'?: AccountInsertDataErrorAllOfDataHelpLink;
}
/**
 * @type AccountInsertDataErrorAllOfDataHelpLink
 * @export
 */
export type AccountInsertDataErrorAllOfDataHelpLink = AccountInsertDataErrorAllOfDataHelpLinkOneOf | AccountInsertDataErrorAllOfDataHelpLinkOneOf1;

/**
 * 
 * @export
 * @interface AccountInsertDataErrorAllOfDataHelpLinkOneOf
 */
export interface AccountInsertDataErrorAllOfDataHelpLinkOneOf {
    /**
     * 
     * @type {string}
     * @memberof AccountInsertDataErrorAllOfDataHelpLinkOneOf
     */
    'docId': string;
}
/**
 * 
 * @export
 * @interface AccountInsertDataErrorAllOfDataHelpLinkOneOf1
 */
export interface AccountInsertDataErrorAllOfDataHelpLinkOneOf1 {
    /**
     * 
     * @type {string}
     * @memberof AccountInsertDataErrorAllOfDataHelpLinkOneOf1
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface AccountInsertDataSettings
 */
export interface AccountInsertDataSettings {
    /**
     * 
     * @type {Array<string>}
     * @memberof AccountInsertDataSettings
     */
    'notifyUsers'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof AccountInsertDataSettings
     */
    'enableHistorySync'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof AccountInsertDataSettings
     */
    'maxMessageSync'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof AccountInsertDataSettings
     */
    'nativeChatActionSync'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AccountInsertDataSettings
     */
    'unArchiveOnNewMessage'?: boolean;
    /**
     * 
     * @type {AccountInsertDataSettingsNewChatsAssignee}
     * @memberof AccountInsertDataSettings
     */
    'newChatsAssignee'?: AccountInsertDataSettingsNewChatsAssignee;
    /**
     * 
     * @type {boolean}
     * @memberof AccountInsertDataSettings
     */
    'sendButtonsAsPoll'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AccountInsertDataSettings
     */
    'enableStories'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AccountInsertDataSettings
     */
    'autoSyncProductsToPlatform'?: boolean;
    /**
     * 
     * @type {AccountInsertDataSettingsKeepDeletedMessages}
     * @memberof AccountInsertDataSettings
     */
    'keepDeletedMessages'?: AccountInsertDataSettingsKeepDeletedMessages;
    /**
     * 
     * @type {string}
     * @memberof AccountInsertDataSettings
     */
    'geoLocation'?: string;
}
/**
 * 
 * @export
 * @interface AccountInsertDataSettingsKeepDeletedMessages
 */
export interface AccountInsertDataSettingsKeepDeletedMessages {
    /**
     * 
     * @type {boolean}
     * @memberof AccountInsertDataSettingsKeepDeletedMessages
     */
    'fromMe': boolean;
}
/**
 * 
 * @export
 * @interface AccountInsertDataSettingsNewChatsAssignee
 */
export interface AccountInsertDataSettingsNewChatsAssignee {
    /**
     * 
     * @type {AccountInsertDataSettingsNewChatsAssigneeIncoming}
     * @memberof AccountInsertDataSettingsNewChatsAssignee
     */
    'incoming'?: AccountInsertDataSettingsNewChatsAssigneeIncoming;
    /**
     * 
     * @type {AccountInsertDataSettingsNewChatsAssigneeIncoming}
     * @memberof AccountInsertDataSettingsNewChatsAssignee
     */
    'outgoing'?: AccountInsertDataSettingsNewChatsAssigneeIncoming;
}
/**
 * 
 * @export
 * @interface AccountInsertDataSettingsNewChatsAssigneeIncoming
 */
export interface AccountInsertDataSettingsNewChatsAssigneeIncoming {
    /**
     * 
     * @type {boolean}
     * @memberof AccountInsertDataSettingsNewChatsAssigneeIncoming
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AccountInsertDataSettingsNewChatsAssigneeIncoming
     */
    'assignType'?: AccountInsertDataSettingsNewChatsAssigneeIncomingAssignTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof AccountInsertDataSettingsNewChatsAssigneeIncoming
     */
    'nextAssignee'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AccountInsertDataSettingsNewChatsAssigneeIncoming
     */
    'assignees'?: Array<string>;
}

export const AccountInsertDataSettingsNewChatsAssigneeIncomingAssignTypeEnum = {
    SmartAssign: 'smart-assign',
    RoundRobin: 'round-robin'
} as const;

export type AccountInsertDataSettingsNewChatsAssigneeIncomingAssignTypeEnum = typeof AccountInsertDataSettingsNewChatsAssigneeIncomingAssignTypeEnum[keyof typeof AccountInsertDataSettingsNewChatsAssigneeIncomingAssignTypeEnum];

/**
 * 
 * @export
 * @interface AccountUpdate
 */
export interface AccountUpdate {
    /**
     * 
     * @type {string}
     * @memberof AccountUpdate
     */
    'event': AccountUpdateEventEnum;
    /**
     * 
     * @type {Array<AccountUpdateData>}
     * @memberof AccountUpdate
     */
    'data': Array<AccountUpdateData>;
}

export const AccountUpdateEventEnum = {
    AccountUpdate: 'account-update'
} as const;

export type AccountUpdateEventEnum = typeof AccountUpdateEventEnum[keyof typeof AccountUpdateEventEnum];

/**
 * 
 * @export
 * @interface AccountUpdateData
 */
export interface AccountUpdateData {
    /**
     * 
     * @type {string}
     * @memberof AccountUpdateData
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof AccountUpdateData
     */
    'ownerId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AccountUpdateData
     */
    'assignees'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof AccountUpdateData
     */
    'nickname'?: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof AccountUpdateData
     */
    'credentials'?: { [key: string]: any; } | null;
    /**
     * 
     * @type {string}
     * @memberof AccountUpdateData
     */
    'tier'?: AccountUpdateDataTierEnum;
    /**
     * 
     * @type {string}
     * @memberof AccountUpdateData
     */
    'type'?: AccountUpdateDataTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof AccountUpdateData
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountUpdateData
     */
    'createdBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountUpdateData
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountUpdateData
     */
    'deletedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountUpdateData
     */
    'lastLoginAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountUpdateData
     */
    'lastLogoutAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountUpdateData
     */
    'lastClosedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountUpdateData
     */
    'state'?: AccountUpdateDataStateEnum;
    /**
     * 
     * @type {AccountInsertDataError}
     * @memberof AccountUpdateData
     */
    'error'?: AccountInsertDataError | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof AccountUpdateData
     */
    'stateInfo'?: { [key: string]: any; };
    /**
     * 
     * @type {boolean}
     * @memberof AccountUpdateData
     */
    'canLogin'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AccountUpdateData
     */
    'userId'?: string | null;
    /**
     * 
     * @type {AccountInsertDataSettings}
     * @memberof AccountUpdateData
     */
    'settings'?: AccountInsertDataSettings;
}

export const AccountUpdateDataTierEnum = {
    LimitedMsgNoChatHistory: 'limited_msg_no_chat_history',
    UnlimitedMsgChatHistory: 'unlimited_msg_chat_history'
} as const;

export type AccountUpdateDataTierEnum = typeof AccountUpdateDataTierEnum[keyof typeof AccountUpdateDataTierEnum];
export const AccountUpdateDataTypeEnum = {
    Wa: 'wa',
    WaBusinessApi: 'wa-business-api',
    Mock: 'mock',
    Tiktok: 'tiktok',
    Messenger: 'messenger',
    Mail: 'mail',
    Sms: 'sms',
    Instagram: 'instagram'
} as const;

export type AccountUpdateDataTypeEnum = typeof AccountUpdateDataTypeEnum[keyof typeof AccountUpdateDataTypeEnum];
export const AccountUpdateDataStateEnum = {
    Open: 'open',
    Connecting: 'connecting',
    Close: 'close'
} as const;

export type AccountUpdateDataStateEnum = typeof AccountUpdateDataStateEnum[keyof typeof AccountUpdateDataStateEnum];

/**
 * 
 * @export
 * @interface ActionExecute
 */
export interface ActionExecute {
    /**
     * 
     * @type {string}
     * @memberof ActionExecute
     */
    'event': ActionExecuteEventEnum;
    /**
     * 
     * @type {Array<ActionExecuteData>}
     * @memberof ActionExecute
     */
    'data': Array<ActionExecuteData>;
}

export const ActionExecuteEventEnum = {
    ActionExecute: 'action-execute'
} as const;

export type ActionExecuteEventEnum = typeof ActionExecuteEventEnum[keyof typeof ActionExecuteEventEnum];

/**
 * 
 * @export
 * @interface ActionExecuteData
 */
export interface ActionExecuteData {
    /**
     * 
     * @type {number}
     * @memberof ActionExecuteData
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ActionExecuteData
     */
    'actionId': string;
    /**
     * 
     * @type {string}
     * @memberof ActionExecuteData
     */
    'botId': string;
    /**
     * 
     * @type {string}
     * @memberof ActionExecuteData
     */
    'status'?: ActionExecuteDataStatusEnum;
    /**
     * ID of the contact
     * @type {string}
     * @memberof ActionExecuteData
     */
    'contactId'?: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ActionExecuteData
     */
    'inputParameters'?: { [key: string]: any; };
    /**
     * 
     * @type {string}
     * @memberof ActionExecuteData
     */
    'accountId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ActionExecuteData
     */
    'createdAt'?: string;
    /**
     * 
     * @type {Array<ActionExecuteDataMessagesInner>}
     * @memberof ActionExecuteData
     */
    'messages'?: Array<ActionExecuteDataMessagesInner>;
    /**
     * 
     * @type {Array<ActionExecuteDataMessagesInner>}
     * @memberof ActionExecuteData
     */
    'webhooks'?: Array<ActionExecuteDataMessagesInner>;
    /**
     * 
     * @type {ActionExecuteDataMessagesInner}
     * @memberof ActionExecuteData
     */
    'contact'?: ActionExecuteDataMessagesInner;
    /**
     * 
     * @type {ActionExecuteDataMessagesInner}
     * @memberof ActionExecuteData
     */
    'app'?: ActionExecuteDataMessagesInner;
    /**
     * 
     * @type {boolean}
     * @memberof ActionExecuteData
     */
    'isStart'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ActionExecuteData
     */
    'isFinal'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ActionExecuteData
     */
    'previousActionId'?: string;
}

export const ActionExecuteDataStatusEnum = {
    Pending: 'pending',
    Sent: 'sent',
    Failed: 'failed',
    Cancelled: 'cancelled'
} as const;

export type ActionExecuteDataStatusEnum = typeof ActionExecuteDataStatusEnum[keyof typeof ActionExecuteDataStatusEnum];

/**
 * 
 * @export
 * @interface ActionExecuteDataMessagesInner
 */
export interface ActionExecuteDataMessagesInner {
    /**
     * 
     * @type {number}
     * @memberof ActionExecuteDataMessagesInner
     */
    'statusCode': number;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ActionExecuteDataMessagesInner
     */
    'body'?: { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface AiCreditUse
 */
export interface AiCreditUse {
    /**
     * 
     * @type {string}
     * @memberof AiCreditUse
     */
    'event': AiCreditUseEventEnum;
    /**
     * 
     * @type {Array<AiCreditUseData>}
     * @memberof AiCreditUse
     */
    'data': Array<AiCreditUseData>;
}

export const AiCreditUseEventEnum = {
    AiCreditUse: 'ai-credit-use'
} as const;

export type AiCreditUseEventEnum = typeof AiCreditUseEventEnum[keyof typeof AiCreditUseEventEnum];

/**
 * 
 * @export
 * @interface AiCreditUseData
 */
export interface AiCreditUseData {
    /**
     * 
     * @type {string}
     * @memberof AiCreditUseData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof AiCreditUseData
     */
    'teamId': string;
    /**
     * 
     * @type {string}
     * @memberof AiCreditUseData
     */
    'doneBy': string;
    /**
     * An ISO formatted timestamp
     * @type {string}
     * @memberof AiCreditUseData
     */
    'doneAt': string;
    /**
     * 
     * @type {object}
     * @memberof AiCreditUseData
     */
    'metadata'?: object;
}
/**
 * 
 * @export
 * @interface AlarmPost200Response
 */
export interface AlarmPost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof AlarmPost200Response
     */
    'success': boolean;
}
/**
 * 
 * @export
 * @interface AlarmPostRequest
 */
export interface AlarmPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AlarmPostRequest
     */
    'title': string;
    /**
     * The message to send
     * @type {string}
     * @memberof AlarmPostRequest
     */
    'message': string;
    /**
     * If severe, will mention @all
     * @type {boolean}
     * @memberof AlarmPostRequest
     */
    'isSevere'?: boolean;
    /**
     * Any additional parameters to send
     * @type {{ [key: string]: any; }}
     * @memberof AlarmPostRequest
     */
    'parameters'?: { [key: string]: any; };
    /**
     * 
     * @type {string}
     * @memberof AlarmPostRequest
     */
    'channel'?: AlarmPostRequestChannelEnum;
}

export const AlarmPostRequestChannelEnum = {
    TechAlarm: 'tech_alarm',
    CustomerAlert: 'customer_alert'
} as const;

export type AlarmPostRequestChannelEnum = typeof AlarmPostRequestChannelEnum[keyof typeof AlarmPostRequestChannelEnum];

/**
 * 
 * @export
 * @interface BotDelete
 */
export interface BotDelete {
    /**
     * 
     * @type {string}
     * @memberof BotDelete
     */
    'event': BotDeleteEventEnum;
    /**
     * 
     * @type {Array<BotDeleteData>}
     * @memberof BotDelete
     */
    'data': Array<BotDeleteData>;
}

export const BotDeleteEventEnum = {
    BotDelete: 'bot-delete'
} as const;

export type BotDeleteEventEnum = typeof BotDeleteEventEnum[keyof typeof BotDeleteEventEnum];

/**
 * 
 * @export
 * @interface BotDeleteData
 */
export interface BotDeleteData {
    /**
     * 
     * @type {string}
     * @memberof BotDeleteData
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface BotInsert
 */
export interface BotInsert {
    /**
     * 
     * @type {string}
     * @memberof BotInsert
     */
    'event': BotInsertEventEnum;
    /**
     * 
     * @type {Array<BotInsertData>}
     * @memberof BotInsert
     */
    'data': Array<BotInsertData>;
}

export const BotInsertEventEnum = {
    BotInsert: 'bot-insert'
} as const;

export type BotInsertEventEnum = typeof BotInsertEventEnum[keyof typeof BotInsertEventEnum];

/**
 * 
 * @export
 * @interface BotInsertData
 */
export interface BotInsertData {
    /**
     * 
     * @type {string}
     * @memberof BotInsertData
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertData
     */
    'teamId': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertData
     */
    'defaultAccountId'?: string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertData
     */
    'startingActionId'?: string | null;
    /**
     * 
     * @type {Array<BotInsertDataActionsInner>}
     * @memberof BotInsertData
     */
    'actions'?: Array<BotInsertDataActionsInner>;
    /**
     * 
     * @type {string}
     * @memberof BotInsertData
     */
    'folderId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BotInsertData
     */
    'templateId'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof BotInsertData
     */
    'isForm'?: boolean;
    /**
     * 
     * @type {BotInsertDataExternalTemplateStatus}
     * @memberof BotInsertData
     */
    'externalTemplateStatus'?: BotInsertDataExternalTemplateStatus;
    /**
     * 
     * @type {any}
     * @memberof BotInsertData
     */
    'externalTemplate'?: any;
    /**
     * 
     * @type {string}
     * @memberof BotInsertData
     */
    'imageUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertData
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertData
     */
    'industry'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof BotInsertData
     */
    'industries'?: Array<string>;
    /**
     * 
     * @type {Array<BotInsertDataTriggersInner>}
     * @memberof BotInsertData
     */
    'triggers'?: Array<BotInsertDataTriggersInner>;
    /**
     * 
     * @type {string}
     * @memberof BotInsertData
     */
    'language'?: string;
    /**
     * 
     * @type {Array<BotInsertDataNotesInner>}
     * @memberof BotInsertData
     */
    'notes'?: Array<BotInsertDataNotesInner>;
    /**
     * 
     * @type {string}
     * @memberof BotInsertData
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertData
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertData
     */
    'createdBy': string;
    /**
     * 
     * @type {Array<BotInsertDataSharedSlugsInner>}
     * @memberof BotInsertData
     */
    'sharedSlugs'?: Array<BotInsertDataSharedSlugsInner>;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof BotInsertData
     */
    'propertyValues'?: { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface BotInsertDataActionsInner
 */
export interface BotInsertDataActionsInner {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInner
     */
    'botId': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInner
     */
    'updatedAt': string;
    /**
     * Map from channel to external template provider status. Channel is the key and the value is the status of the template on the provider.
     * @type {{ [key: string]: BotInsertDataActionsInnerAllOfExternalTemplateValue; }}
     * @memberof BotInsertDataActionsInner
     */
    'externalTemplate'?: { [key: string]: BotInsertDataActionsInnerAllOfExternalTemplateValue; };
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInner
     */
    'id': string;
    /**
     * Name of the template
     * @type {string}
     * @memberof BotInsertDataActionsInner
     */
    'name': string;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1Message}
     * @memberof BotInsertDataActionsInner
     */
    'message'?: BotInsertDataActionsInnerAllOf1Message | null;
    /**
     * set the assignee on the contact
     * @type {string}
     * @memberof BotInsertDataActionsInner
     */
    'assignee'?: string | null;
    /**
     * Tags to set on this contact.
     * @type {Array<BotInsertDataActionsInnerAllOf1TagsInner>}
     * @memberof BotInsertDataActionsInner
     */
    'tags'?: Array<BotInsertDataActionsInnerAllOf1TagsInner> | null;
    /**
     * Array of UserId
     * @type {Array<string>}
     * @memberof BotInsertDataActionsInner
     */
    'notifyUsers'?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof BotInsertDataActionsInner
     * @deprecated
     */
    'webhooks'?: Array<string> | null;
    /**
     * 
     * @type {Array<BotInsertDataActionsInnerAllOf1HttpRequestInner>}
     * @memberof BotInsertDataActionsInner
     */
    'httpRequest'?: Array<BotInsertDataActionsInnerAllOf1HttpRequestInner> | null;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition}
     * @memberof BotInsertDataActionsInner
     */
    'position'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition | null;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition}
     * @memberof BotInsertDataActionsInner
     */
    'actionPosition'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition | null;
    /**
     * send in to remove the action
     * @type {boolean}
     * @memberof BotInsertDataActionsInner
     */
    'remove'?: boolean;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1FormRef}
     * @memberof BotInsertDataActionsInner
     */
    'formRef'?: BotInsertDataActionsInnerAllOf1FormRef | null;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1FormActionMetadata}
     * @memberof BotInsertDataActionsInner
     */
    'formActionMetadata'?: BotInsertDataActionsInnerAllOf1FormActionMetadata | null;
    /**
     * Type of the message being sent
     * @type {string}
     * @memberof BotInsertDataActionsInner
     */
    'messageType'?: BotInsertDataActionsInnerMessageTypeEnum;
    /**
     * Account ID of the sender
     * @type {string}
     * @memberof BotInsertDataActionsInner
     */
    'accountId'?: string;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1ZapierAction}
     * @memberof BotInsertDataActionsInner
     */
    'zapierAction'?: BotInsertDataActionsInnerAllOf1ZapierAction | null;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1App}
     * @memberof BotInsertDataActionsInner
     */
    'app'?: BotInsertDataActionsInnerAllOf1App;
}

export const BotInsertDataActionsInnerMessageTypeEnum = {
    Message: 'message',
    Email: 'email'
} as const;

export type BotInsertDataActionsInnerMessageTypeEnum = typeof BotInsertDataActionsInnerMessageTypeEnum[keyof typeof BotInsertDataActionsInnerMessageTypeEnum];

/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf
 */
export interface BotInsertDataActionsInnerAllOf {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf
     */
    'botId': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf
     */
    'updatedAt': string;
    /**
     * Map from channel to external template provider status. Channel is the key and the value is the status of the template on the provider.
     * @type {{ [key: string]: BotInsertDataActionsInnerAllOfExternalTemplateValue; }}
     * @memberof BotInsertDataActionsInnerAllOf
     */
    'externalTemplate'?: { [key: string]: BotInsertDataActionsInnerAllOfExternalTemplateValue; };
}
/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1
 */
export interface BotInsertDataActionsInnerAllOf1 {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1
     */
    'id'?: string;
    /**
     * Name of the template
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1
     */
    'name'?: string;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1Message}
     * @memberof BotInsertDataActionsInnerAllOf1
     */
    'message'?: BotInsertDataActionsInnerAllOf1Message | null;
    /**
     * set the assignee on the contact
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1
     */
    'assignee'?: string | null;
    /**
     * Tags to set on this contact.
     * @type {Array<BotInsertDataActionsInnerAllOf1TagsInner>}
     * @memberof BotInsertDataActionsInnerAllOf1
     */
    'tags'?: Array<BotInsertDataActionsInnerAllOf1TagsInner> | null;
    /**
     * Array of UserId
     * @type {Array<string>}
     * @memberof BotInsertDataActionsInnerAllOf1
     */
    'notifyUsers'?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof BotInsertDataActionsInnerAllOf1
     * @deprecated
     */
    'webhooks'?: Array<string> | null;
    /**
     * 
     * @type {Array<BotInsertDataActionsInnerAllOf1HttpRequestInner>}
     * @memberof BotInsertDataActionsInnerAllOf1
     */
    'httpRequest'?: Array<BotInsertDataActionsInnerAllOf1HttpRequestInner> | null;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition}
     * @memberof BotInsertDataActionsInnerAllOf1
     */
    'position'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition | null;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition}
     * @memberof BotInsertDataActionsInnerAllOf1
     */
    'actionPosition'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition | null;
    /**
     * send in to remove the action
     * @type {boolean}
     * @memberof BotInsertDataActionsInnerAllOf1
     */
    'remove'?: boolean;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1FormRef}
     * @memberof BotInsertDataActionsInnerAllOf1
     */
    'formRef'?: BotInsertDataActionsInnerAllOf1FormRef | null;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1FormActionMetadata}
     * @memberof BotInsertDataActionsInnerAllOf1
     */
    'formActionMetadata'?: BotInsertDataActionsInnerAllOf1FormActionMetadata | null;
    /**
     * Type of the message being sent
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1
     */
    'messageType'?: BotInsertDataActionsInnerAllOf1MessageTypeEnum;
    /**
     * Account ID of the sender
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1
     */
    'accountId'?: string;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1ZapierAction}
     * @memberof BotInsertDataActionsInnerAllOf1
     */
    'zapierAction'?: BotInsertDataActionsInnerAllOf1ZapierAction | null;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1App}
     * @memberof BotInsertDataActionsInnerAllOf1
     */
    'app'?: BotInsertDataActionsInnerAllOf1App;
}

export const BotInsertDataActionsInnerAllOf1MessageTypeEnum = {
    Message: 'message',
    Email: 'email'
} as const;

export type BotInsertDataActionsInnerAllOf1MessageTypeEnum = typeof BotInsertDataActionsInnerAllOf1MessageTypeEnum[keyof typeof BotInsertDataActionsInnerAllOf1MessageTypeEnum];

/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1App
 */
export interface BotInsertDataActionsInnerAllOf1App {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1App
     */
    'appId': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1App
     */
    'integrationId'?: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof BotInsertDataActionsInnerAllOf1App
     */
    'input': { [key: string]: any; };
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction}
     * @memberof BotInsertDataActionsInnerAllOf1App
     */
    'nextAction'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction;
}
/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1FormActionMetadata
 */
export interface BotInsertDataActionsInnerAllOf1FormActionMetadata {
    /**
     * If true, the field is required
     * @type {boolean}
     * @memberof BotInsertDataActionsInnerAllOf1FormActionMetadata
     */
    'required'?: boolean;
    /**
     * Type of the field
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1FormActionMetadata
     */
    'type'?: BotInsertDataActionsInnerAllOf1FormActionMetadataTypeEnum;
    /**
     * Index of the field
     * @type {number}
     * @memberof BotInsertDataActionsInnerAllOf1FormActionMetadata
     */
    'index'?: number;
    /**
     * Custom field to save the value to
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1FormActionMetadata
     */
    'saveToCustomField'?: string;
}

export const BotInsertDataActionsInnerAllOf1FormActionMetadataTypeEnum = {
    Text: 'text',
    Number: 'number',
    Date: 'date',
    Select: 'select',
    Multiselect: 'multiselect',
    Rating: 'rating',
    Nps: 'nps',
    Time: 'time'
} as const;

export type BotInsertDataActionsInnerAllOf1FormActionMetadataTypeEnum = typeof BotInsertDataActionsInnerAllOf1FormActionMetadataTypeEnum[keyof typeof BotInsertDataActionsInnerAllOf1FormActionMetadataTypeEnum];

/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1FormRef
 */
export interface BotInsertDataActionsInnerAllOf1FormRef {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1FormRef
     */
    'id': string;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1FormRefActions}
     * @memberof BotInsertDataActionsInnerAllOf1FormRef
     */
    'actions'?: BotInsertDataActionsInnerAllOf1FormRefActions;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition}
     * @memberof BotInsertDataActionsInnerAllOf1FormRef
     */
    'position'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition | null;
}
/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1FormRefActions
 */
export interface BotInsertDataActionsInnerAllOf1FormRefActions {
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction}
     * @memberof BotInsertDataActionsInnerAllOf1FormRefActions
     */
    'onSubmit'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction}
     * @memberof BotInsertDataActionsInnerAllOf1FormRefActions
     */
    'onAbandon'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction;
}
/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1HttpRequestInner
 */
export interface BotInsertDataActionsInnerAllOf1HttpRequestInner {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1HttpRequestInner
     */
    'method': BotInsertDataActionsInnerAllOf1HttpRequestInnerMethodEnum;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1HttpRequestInner
     */
    'url': string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof BotInsertDataActionsInnerAllOf1HttpRequestInner
     */
    'headers': { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1HttpRequestInner
     */
    'body'?: string;
}

export const BotInsertDataActionsInnerAllOf1HttpRequestInnerMethodEnum = {
    Get: 'GET',
    Post: 'POST'
} as const;

export type BotInsertDataActionsInnerAllOf1HttpRequestInnerMethodEnum = typeof BotInsertDataActionsInnerAllOf1HttpRequestInnerMethodEnum[keyof typeof BotInsertDataActionsInnerAllOf1HttpRequestInnerMethodEnum];

/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1Message
 */
export interface BotInsertDataActionsInnerAllOf1Message {
    /**
     * the template message itself
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1Message
     */
    'text': string | null;
    /**
     * array of attachments for the template
     * @type {Array<BotInsertDataActionsInnerAllOf1MessageAttachmentsInner>}
     * @memberof BotInsertDataActionsInnerAllOf1Message
     */
    'attachments'?: Array<BotInsertDataActionsInnerAllOf1MessageAttachmentsInner>;
    /**
     * 
     * @type {Array<BotInsertDataActionsInnerAllOf1MessageButtonsInner>}
     * @memberof BotInsertDataActionsInnerAllOf1Message
     */
    'buttons'?: Array<BotInsertDataActionsInnerAllOf1MessageButtonsInner>;
    /**
     * 
     * @type {Array<BotInsertDataActionsInnerAllOf1MessageDelaysInner>}
     * @memberof BotInsertDataActionsInnerAllOf1Message
     */
    'delays'?: Array<BotInsertDataActionsInnerAllOf1MessageDelaysInner>;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageInput}
     * @memberof BotInsertDataActionsInnerAllOf1Message
     */
    'input'?: BotInsertDataActionsInnerAllOf1MessageInput;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageList}
     * @memberof BotInsertDataActionsInnerAllOf1Message
     */
    'list'?: BotInsertDataActionsInnerAllOf1MessageList;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1Message
     */
    'quoted'?: string;
    /**
     * 
     * @type {Array<BotInsertDataActionsInnerAllOf1MessageProductsInner>}
     * @memberof BotInsertDataActionsInnerAllOf1Message
     */
    'products'?: Array<BotInsertDataActionsInnerAllOf1MessageProductsInner>;
    /**
     * the subject of the message, if applicable
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1Message
     */
    'subject'?: string;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageDefaultSendOptions}
     * @memberof BotInsertDataActionsInnerAllOf1Message
     */
    'defaultSendOptions'?: BotInsertDataActionsInnerAllOf1MessageDefaultSendOptions;
}
/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageAttachmentsInner
 */
export interface BotInsertDataActionsInnerAllOf1MessageAttachmentsInner {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageAttachmentsInner
     */
    'type': BotInsertDataActionsInnerAllOf1MessageAttachmentsInnerTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageAttachmentsInner
     */
    'mimetype': string;
    /**
     * 
     * @type {boolean}
     * @memberof BotInsertDataActionsInnerAllOf1MessageAttachmentsInner
     */
    'isGif'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageAttachmentsInner
     */
    'url': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageAttachmentsInner
     */
    'jpegThumbnail'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof BotInsertDataActionsInnerAllOf1MessageAttachmentsInner
     */
    'seconds'?: number;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageAttachmentsInner
     */
    'filename'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BotInsertDataActionsInnerAllOf1MessageAttachmentsInner
     */
    'pttAudio'?: boolean;
}

export const BotInsertDataActionsInnerAllOf1MessageAttachmentsInnerTypeEnum = {
    Image: 'image',
    Video: 'video',
    Contact: 'contact',
    Sticker: 'sticker',
    Audio: 'audio',
    Document: 'document',
    Location: 'location'
} as const;

export type BotInsertDataActionsInnerAllOf1MessageAttachmentsInnerTypeEnum = typeof BotInsertDataActionsInnerAllOf1MessageAttachmentsInnerTypeEnum[keyof typeof BotInsertDataActionsInnerAllOf1MessageAttachmentsInnerTypeEnum];

/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageButtonsInner
 */
export interface BotInsertDataActionsInnerAllOf1MessageButtonsInner {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInner
     */
    'text': string;
    /**
     * Use \"nextAction\" instead
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInner
     * @deprecated
     */
    'triggerActionId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInner
     */
    'triggerBotId'?: string | null;
    /**
     * Make a button with a link
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInner
     */
    'url'?: string;
    /**
     * Make a button with a phone number
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInner
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInner
     */
    'position'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition | null;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInner
     */
    'nextAction'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction;
}
/**
 * Specify the next action to be fired
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction
 */
export interface BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction {
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionDefaultAction}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction
     */
    'defaultAction'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionDefaultAction;
    /**
     * List of conditions to validate
     * @type {Array<BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInner>}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction
     */
    'groups'?: Array<BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInner>;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction
     */
    'position'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition | null;
}
/**
 * Fired if all validations failed or no validations are provided
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionDefaultAction
 */
export interface BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionDefaultAction {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionDefaultAction
     */
    'triggerActionId': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionDefaultAction
     */
    'triggerBotId'?: string;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionDefaultAction
     */
    'position'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition | null;
}
/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionDefaultActionAllOf
 */
export interface BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionDefaultActionAllOf {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionDefaultActionAllOf
     */
    'triggerActionId': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionDefaultActionAllOf
     */
    'triggerBotId'?: string;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionDefaultActionAllOf
     */
    'position'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition | null;
}
/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInner
 */
export interface BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInner {
    /**
     * Operator for all validations
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInner
     */
    'operator': BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerOperatorEnum;
    /**
     * Fields to validate
     * @type {Array<BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInner>}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInner
     */
    'validation': Array<BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInner>;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerTarget}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInner
     */
    'target': BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerTarget;
}

export const BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerOperatorEnum = {
    And: 'and',
    Or: 'or'
} as const;

export type BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerOperatorEnum = typeof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerOperatorEnum[keyof typeof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerOperatorEnum];

/**
 * Action to fire if all validations pass
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerTarget
 */
export interface BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerTarget {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerTarget
     */
    'triggerActionId': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerTarget
     */
    'triggerBotId'?: string;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerTarget
     */
    'position'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition | null;
}
/**
 * @type BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInner
 * @export
 */
export type BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInner = BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf | BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf1 | BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf2 | BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf3 | BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf4 | BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf5 | BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf6;

/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf
 */
export interface BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf
     */
    'propertyPath': string;
    /**
     * 
     * @type {number}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf
     */
    'value': number;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf
     */
    'operator': BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOfOperatorEnum;
}

export const BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOfOperatorEnum = {
    GreaterThan: 'greaterThan',
    LessThan: 'lessThan',
    GreaterThanOrEquals: 'greaterThanOrEquals',
    LessThanOrEquals: 'lessThanOrEquals'
} as const;

export type BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOfOperatorEnum = typeof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOfOperatorEnum[keyof typeof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOfOperatorEnum];

/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf1
 */
export interface BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf1 {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf1
     */
    'propertyPath': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf1
     */
    'value': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf1
     */
    'operator': BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf1OperatorEnum;
}

export const BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf1OperatorEnum = {
    NotEmpty: 'notEmpty',
    Contains: 'contains',
    NotContains: 'notContains',
    StartsWith: 'startsWith',
    EndsWith: 'endsWith',
    ContainsPhrase: 'containsPhrase'
} as const;

export type BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf1OperatorEnum = typeof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf1OperatorEnum[keyof typeof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf1OperatorEnum];

/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf2
 */
export interface BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf2 {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf2
     */
    'propertyPath': string;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf2Value}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf2
     */
    'value': BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf2Value;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf2
     */
    'operator': BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf2OperatorEnum;
}

export const BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf2OperatorEnum = {
    Timestamp: 'timestamp'
} as const;

export type BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf2OperatorEnum = typeof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf2OperatorEnum[keyof typeof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf2OperatorEnum];

/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf2Value
 */
export interface BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf2Value {
    /**
     * 
     * @type {Array<string>}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf2Value
     */
    'days'?: Array<BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf2ValueDaysEnum>;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf2Value
     */
    'startTime': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf2Value
     */
    'endTime': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf2Value
     */
    'timezone': string;
}

export const BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf2ValueDaysEnum = {
    Monday: 'Monday',
    Tuesday: 'Tuesday',
    Wednesday: 'Wednesday',
    Thursday: 'Thursday',
    Friday: 'Friday',
    Saturday: 'Saturday',
    Sunday: 'Sunday'
} as const;

export type BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf2ValueDaysEnum = typeof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf2ValueDaysEnum[keyof typeof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf2ValueDaysEnum];

/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf3
 */
export interface BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf3 {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf3
     */
    'propertyPath': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf3
     */
    'operator': BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf3OperatorEnum;
}

export const BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf3OperatorEnum = {
    IsTrue: 'isTrue',
    IsFalse: 'isFalse'
} as const;

export type BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf3OperatorEnum = typeof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf3OperatorEnum[keyof typeof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf3OperatorEnum];

/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf4
 */
export interface BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf4 {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf4
     */
    'propertyPath': string;
    /**
     * 
     * @type {Array<BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf4ValuesInner>}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf4
     */
    'values': Array<BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf4ValuesInner>;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf4
     */
    'operator': BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf4OperatorEnum;
}

export const BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf4OperatorEnum = {
    NotEmpty: 'notEmpty',
    Equals: 'equals',
    NotEquals: 'notEquals',
    GreaterThan: 'greaterThan',
    LessThan: 'lessThan',
    GreaterThanOrEquals: 'greaterThanOrEquals',
    LessThanOrEquals: 'lessThanOrEquals',
    Contains: 'contains',
    NotContains: 'notContains',
    StartsWith: 'startsWith',
    EndsWith: 'endsWith'
} as const;

export type BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf4OperatorEnum = typeof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf4OperatorEnum[keyof typeof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf4OperatorEnum];

/**
 * @type BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf4ValuesInner
 * @export
 */
export type BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf4ValuesInner = number | string;

/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf5
 */
export interface BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf5 {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf5
     */
    'propertyPath': string;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf5Value}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf5
     */
    'value': BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf5Value;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf5
     */
    'operator': BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf5OperatorEnum;
}

export const BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf5OperatorEnum = {
    Equals: 'equals',
    NotEquals: 'notEquals'
} as const;

export type BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf5OperatorEnum = typeof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf5OperatorEnum[keyof typeof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf5OperatorEnum];

/**
 * @type BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf5Value
 * @export
 */
export type BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf5Value = Array<string> | number | string;

/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf6
 */
export interface BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf6 {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf6
     */
    'propertyPath': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf6
     */
    'value': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf6
     */
    'operator': BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf6OperatorEnum;
}

export const BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf6OperatorEnum = {
    TimestampGreaterThan: 'timestampGreaterThan',
    TimestampLessThan: 'timestampLessThan'
} as const;

export type BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf6OperatorEnum = typeof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf6OperatorEnum[keyof typeof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOneOf6OperatorEnum];

/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition
 */
export interface BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition {
    /**
     * 
     * @type {number}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition
     */
    'x': number;
    /**
     * 
     * @type {number}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition
     */
    'y': number;
}
/**
 * Minimal default send options for the message
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageDefaultSendOptions
 */
export interface BotInsertDataActionsInnerAllOf1MessageDefaultSendOptions {
    /**
     * 
     * @type {boolean}
     * @memberof BotInsertDataActionsInnerAllOf1MessageDefaultSendOptions
     */
    'simulateTyping'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BotInsertDataActionsInnerAllOf1MessageDefaultSendOptions
     */
    'cancelIfReplyReceived'?: boolean;
}
/**
 * @type BotInsertDataActionsInnerAllOf1MessageDelaysInner
 * @export
 */
export type BotInsertDataActionsInnerAllOf1MessageDelaysInner = BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf | BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf1 | BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf2 | BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf3;

/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf
 */
export interface BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf {
    /**
     * Time delays on second
     * @type {number}
     * @memberof BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf
     */
    'timeDelaySec': number;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition}
     * @memberof BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf
     */
    'position'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition | null;
    /**
     * Use \"nextAction\" instead
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf
     * @deprecated
     */
    'triggerActionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf
     */
    'triggerBotId'?: string | null;
    /**
     * Simulate typing
     * @type {boolean}
     * @memberof BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf
     */
    'simulateTyping'?: boolean;
    /**
     * If true, the message will be cancelled if a reply is received
     * @type {boolean}
     * @memberof BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf
     */
    'cancelIfReplyReceived'?: boolean;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction}
     * @memberof BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf
     */
    'nextAction'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction;
}
/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf1
 */
export interface BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf1 {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf1
     */
    'type': BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf1TypeEnum;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf1Value}
     * @memberof BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf1
     */
    'value': BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf1Value;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition}
     * @memberof BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf1
     */
    'position'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition | null;
    /**
     * Simulate typing
     * @type {boolean}
     * @memberof BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf1
     */
    'simulateTyping'?: boolean;
    /**
     * If true, the message will be cancelled if a reply is received
     * @type {boolean}
     * @memberof BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf1
     */
    'cancelIfReplyReceived'?: boolean;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction}
     * @memberof BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf1
     */
    'nextAction'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction;
}

export const BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf1TypeEnum = {
    Timestamp: 'timestamp'
} as const;

export type BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf1TypeEnum = typeof BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf1TypeEnum[keyof typeof BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf1TypeEnum];

/**
 * Provide either a property path to extract from the payload /payload data or an exact value
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf1Value
 */
export interface BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf1Value {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf1Value
     */
    'type': BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf1ValueTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf1Value
     */
    'value': string;
}

export const BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf1ValueTypeEnum = {
    PropertyPath: 'propertyPath',
    Exact: 'exact'
} as const;

export type BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf1ValueTypeEnum = typeof BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf1ValueTypeEnum[keyof typeof BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf1ValueTypeEnum];

/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf2
 */
export interface BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf2 {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf2
     */
    'type': BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf2TypeEnum;
    /**
     * Delay in seconds
     * @type {number}
     * @memberof BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf2
     */
    'value': number;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition}
     * @memberof BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf2
     */
    'position'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition | null;
    /**
     * Simulate typing
     * @type {boolean}
     * @memberof BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf2
     */
    'simulateTyping'?: boolean;
    /**
     * If true, the message will be cancelled if a reply is received
     * @type {boolean}
     * @memberof BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf2
     */
    'cancelIfReplyReceived'?: boolean;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction}
     * @memberof BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf2
     */
    'nextAction'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction;
}

export const BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf2TypeEnum = {
    DelaySeconds: 'delay_seconds'
} as const;

export type BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf2TypeEnum = typeof BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf2TypeEnum[keyof typeof BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf2TypeEnum];

/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf3
 */
export interface BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf3 {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf3
     */
    'type': BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf3TypeEnum;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf3Value}
     * @memberof BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf3
     */
    'value': BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf3Value;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition}
     * @memberof BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf3
     */
    'position'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition | null;
    /**
     * Simulate typing
     * @type {boolean}
     * @memberof BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf3
     */
    'simulateTyping'?: boolean;
    /**
     * If true, the message will be cancelled if a reply is received
     * @type {boolean}
     * @memberof BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf3
     */
    'cancelIfReplyReceived'?: boolean;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction}
     * @memberof BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf3
     */
    'nextAction'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction;
}

export const BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf3TypeEnum = {
    Weekday: 'weekday'
} as const;

export type BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf3TypeEnum = typeof BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf3TypeEnum[keyof typeof BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf3TypeEnum];

/**
 * Provide a weekday value with time to set the delay
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf3Value
 */
export interface BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf3Value {
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf3ValueDay}
     * @memberof BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf3Value
     */
    'day': BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf3ValueDay;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf3Value
     */
    'time': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf3Value
     */
    'timezone': string;
}
/**
 * @type BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf3ValueDay
 * @export
 */
export type BotInsertDataActionsInnerAllOf1MessageDelaysInnerOneOf3ValueDay = string;

/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageInput
 */
export interface BotInsertDataActionsInnerAllOf1MessageInput {
    /**
     * Name of the input. If not specified, the input received will be forwarded as the key \"value\" in the next action
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageInput
     */
    'name'?: string;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageInputValidation}
     * @memberof BotInsertDataActionsInnerAllOf1MessageInput
     */
    'validation'?: BotInsertDataActionsInnerAllOf1MessageInputValidation;
    /**
     * Use \"nextAction\" instead
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageInput
     * @deprecated
     */
    'triggerActionId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageInput
     */
    'triggerBotId'?: string | null;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction}
     * @memberof BotInsertDataActionsInnerAllOf1MessageInput
     */
    'nextAction'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction}
     * @memberof BotInsertDataActionsInnerAllOf1MessageInput
     */
    'validationFailAction'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition}
     * @memberof BotInsertDataActionsInnerAllOf1MessageInput
     */
    'position'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition | null;
}
/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageInputValidation
 */
export interface BotInsertDataActionsInnerAllOf1MessageInputValidation {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageInputValidation
     */
    'type': BotInsertDataActionsInnerAllOf1MessageInputValidationTypeEnum;
}

export const BotInsertDataActionsInnerAllOf1MessageInputValidationTypeEnum = {
    String: 'string',
    Integer: 'integer',
    Boolean: 'boolean',
    ImageAttachment: 'image_attachment',
    Attachment: 'attachment'
} as const;

export type BotInsertDataActionsInnerAllOf1MessageInputValidationTypeEnum = typeof BotInsertDataActionsInnerAllOf1MessageInputValidationTypeEnum[keyof typeof BotInsertDataActionsInnerAllOf1MessageInputValidationTypeEnum];

/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageList
 */
export interface BotInsertDataActionsInnerAllOf1MessageList {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageList
     */
    'title'?: string;
    /**
     * 
     * @type {Array<BotInsertDataActionsInnerAllOf1MessageListSectionsInner>}
     * @memberof BotInsertDataActionsInnerAllOf1MessageList
     */
    'sections': Array<BotInsertDataActionsInnerAllOf1MessageListSectionsInner>;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition}
     * @memberof BotInsertDataActionsInnerAllOf1MessageList
     */
    'position'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition | null;
}
/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageListSectionsInner
 */
export interface BotInsertDataActionsInnerAllOf1MessageListSectionsInner {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageListSectionsInner
     */
    'title': string;
    /**
     * 
     * @type {Array<BotInsertDataActionsInnerAllOf1MessageListSectionsInnerOptionsInner>}
     * @memberof BotInsertDataActionsInnerAllOf1MessageListSectionsInner
     */
    'options': Array<BotInsertDataActionsInnerAllOf1MessageListSectionsInnerOptionsInner>;
}
/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageListSectionsInnerOptionsInner
 */
export interface BotInsertDataActionsInnerAllOf1MessageListSectionsInnerOptionsInner {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageListSectionsInnerOptionsInner
     */
    'text': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageListSectionsInnerOptionsInner
     */
    'description'?: string;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction}
     * @memberof BotInsertDataActionsInnerAllOf1MessageListSectionsInnerOptionsInner
     */
    'nextAction'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction;
}
/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageProductsInner
 */
export interface BotInsertDataActionsInnerAllOf1MessageProductsInner {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageProductsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageProductsInner
     */
    'accountId': string;
}
/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1TagsInner
 */
export interface BotInsertDataActionsInnerAllOf1TagsInner {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1TagsInner
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof BotInsertDataActionsInnerAllOf1TagsInner
     */
    'remove'?: boolean;
}
/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1ZapierAction
 */
export interface BotInsertDataActionsInnerAllOf1ZapierAction {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1ZapierAction
     */
    'editZapPopupURL'?: string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1ZapierAction
     */
    'zapId'?: string;
}
/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOfExternalTemplateValue
 */
export interface BotInsertDataActionsInnerAllOfExternalTemplateValue {
    /**
     * ID of the template on the provider
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOfExternalTemplateValue
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOfExternalTemplateValue
     */
    'category': string;
    /**
     * Language of the template
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOfExternalTemplateValue
     */
    'language'?: string;
    /**
     * Status of the template on the provider
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOfExternalTemplateValue
     */
    'status': BotInsertDataActionsInnerAllOfExternalTemplateValueStatusEnum;
    /**
     * Details of the rejection, if rejected
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOfExternalTemplateValue
     */
    'rejectionDetails'?: string;
    /**
     * ID of the user who submitted the template
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOfExternalTemplateValue
     */
    'submittedBy': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOfExternalTemplateValue
     */
    'submittedAt': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOfExternalTemplateValue
     */
    'updatedAt': string;
    /**
     * If true, the template status is stale due to the message having been updated
     * @type {boolean}
     * @memberof BotInsertDataActionsInnerAllOfExternalTemplateValue
     */
    'isStale'?: boolean;
}

export const BotInsertDataActionsInnerAllOfExternalTemplateValueStatusEnum = {
    Pending: 'pending',
    Approved: 'approved',
    Rejected: 'rejected'
} as const;

export type BotInsertDataActionsInnerAllOfExternalTemplateValueStatusEnum = typeof BotInsertDataActionsInnerAllOfExternalTemplateValueStatusEnum[keyof typeof BotInsertDataActionsInnerAllOfExternalTemplateValueStatusEnum];

/**
 * @type BotInsertDataExternalTemplateStatus
 * @export
 */
export type BotInsertDataExternalTemplateStatus = string;

/**
 * 
 * @export
 * @interface BotInsertDataNotesInner
 */
export interface BotInsertDataNotesInner {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataNotesInner
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataNotesInner
     */
    'noteType'?: BotInsertDataNotesInnerNoteTypeEnum;
    /**
     * 
     * @type {Array<BotInsertDataActionsInnerAllOf1MessageAttachmentsInner>}
     * @memberof BotInsertDataNotesInner
     */
    'attachments'?: Array<BotInsertDataActionsInnerAllOf1MessageAttachmentsInner>;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataNotesInner
     */
    'text'?: string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataNotesInner
     */
    'title': string;
    /**
     * 
     * @type {number}
     * @memberof BotInsertDataNotesInner
     */
    'height'?: number;
    /**
     * 
     * @type {number}
     * @memberof BotInsertDataNotesInner
     */
    'width'?: number;
    /**
     * 
     * @type {Array<BotInsertDataNotesInnerTargetsInner>}
     * @memberof BotInsertDataNotesInner
     */
    'targets'?: Array<BotInsertDataNotesInnerTargetsInner> | null;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataNotesInner
     */
    'color'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof BotInsertDataNotesInner
     */
    'zIndex'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataNotesInner
     */
    'fillColor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataNotesInner
     */
    'shapeType'?: string | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof BotInsertDataNotesInner
     */
    'textStyles'?: { [key: string]: any; } | null;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition}
     * @memberof BotInsertDataNotesInner
     */
    'position': BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition | null;
    /**
     * 
     * @type {boolean}
     * @memberof BotInsertDataNotesInner
     */
    'remove'?: boolean;
}

export const BotInsertDataNotesInnerNoteTypeEnum = {
    Text: 'text',
    Image: 'image',
    Shape: 'shape'
} as const;

export type BotInsertDataNotesInnerNoteTypeEnum = typeof BotInsertDataNotesInnerNoteTypeEnum[keyof typeof BotInsertDataNotesInnerNoteTypeEnum];

/**
 * 
 * @export
 * @interface BotInsertDataNotesInnerTargetsInner
 */
export interface BotInsertDataNotesInnerTargetsInner {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataNotesInnerTargetsInner
     */
    'target': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataNotesInnerTargetsInner
     */
    'sourceHandle': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataNotesInnerTargetsInner
     */
    'targetHandle': string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof BotInsertDataNotesInnerTargetsInner
     */
    'edgeStyles'?: { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface BotInsertDataSharedSlugsInner
 */
export interface BotInsertDataSharedSlugsInner {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataSharedSlugsInner
     */
    'slug': string;
    /**
     * 
     * @type {boolean}
     * @memberof BotInsertDataSharedSlugsInner
     */
    'editable': boolean;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataSharedSlugsInner
     */
    'sharedBy': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataSharedSlugsInner
     */
    'userIdentity'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataSharedSlugsInner
     */
    'userIdentityType'?: BotInsertDataSharedSlugsInnerUserIdentityTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataSharedSlugsInner
     */
    'createdAt': string;
}

export const BotInsertDataSharedSlugsInnerUserIdentityTypeEnum = {
    Email: 'email',
    Phone: 'phone'
} as const;

export type BotInsertDataSharedSlugsInnerUserIdentityTypeEnum = typeof BotInsertDataSharedSlugsInnerUserIdentityTypeEnum[keyof typeof BotInsertDataSharedSlugsInnerUserIdentityTypeEnum];

/**
 * 
 * @export
 * @interface BotInsertDataTriggersInner
 */
export interface BotInsertDataTriggersInner {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataTriggersInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataTriggersInner
     */
    'name': string;
    /**
     * 
     * @type {BotInsertDataTriggersInnerMethod}
     * @memberof BotInsertDataTriggersInner
     */
    'method': BotInsertDataTriggersInnerMethod;
}
/**
 * @type BotInsertDataTriggersInnerMethod
 * @export
 */
export type BotInsertDataTriggersInnerMethod = BotInsertDataTriggersInnerMethodOneOf | BotInsertDataTriggersInnerMethodOneOf1 | BotInsertDataTriggersInnerMethodOneOf2;

/**
 * 
 * @export
 * @interface BotInsertDataTriggersInnerMethodOneOf
 */
export interface BotInsertDataTriggersInnerMethodOneOf {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataTriggersInnerMethodOneOf
     */
    'type': BotInsertDataTriggersInnerMethodOneOfTypeEnum;
    /**
     * 
     * @type {BotInsertDataTriggersInnerMethodOneOfData}
     * @memberof BotInsertDataTriggersInnerMethodOneOf
     */
    'data': BotInsertDataTriggersInnerMethodOneOfData;
}

export const BotInsertDataTriggersInnerMethodOneOfTypeEnum = {
    InternalEvent: 'internal_event'
} as const;

export type BotInsertDataTriggersInnerMethodOneOfTypeEnum = typeof BotInsertDataTriggersInnerMethodOneOfTypeEnum[keyof typeof BotInsertDataTriggersInnerMethodOneOfTypeEnum];

/**
 * 
 * @export
 * @interface BotInsertDataTriggersInnerMethodOneOf1
 */
export interface BotInsertDataTriggersInnerMethodOneOf1 {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataTriggersInnerMethodOneOf1
     */
    'type': BotInsertDataTriggersInnerMethodOneOf1TypeEnum;
    /**
     * 
     * @type {BotInsertDataTriggersInnerMethodOneOf1Data}
     * @memberof BotInsertDataTriggersInnerMethodOneOf1
     */
    'data': BotInsertDataTriggersInnerMethodOneOf1Data;
}

export const BotInsertDataTriggersInnerMethodOneOf1TypeEnum = {
    Timestamp: 'timestamp'
} as const;

export type BotInsertDataTriggersInnerMethodOneOf1TypeEnum = typeof BotInsertDataTriggersInnerMethodOneOf1TypeEnum[keyof typeof BotInsertDataTriggersInnerMethodOneOf1TypeEnum];

/**
 * 
 * @export
 * @interface BotInsertDataTriggersInnerMethodOneOf1Data
 */
export interface BotInsertDataTriggersInnerMethodOneOf1Data {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataTriggersInnerMethodOneOf1Data
     */
    'startDate': string;
    /**
     * 
     * @type {BotInsertDataTriggersInnerMethodOneOf1DataRecurring}
     * @memberof BotInsertDataTriggersInnerMethodOneOf1Data
     */
    'recurring'?: BotInsertDataTriggersInnerMethodOneOf1DataRecurring;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataTriggersInnerMethodOneOf1Data
     */
    'nextExecutionDate'?: string;
}
/**
 * 
 * @export
 * @interface BotInsertDataTriggersInnerMethodOneOf1DataRecurring
 */
export interface BotInsertDataTriggersInnerMethodOneOf1DataRecurring {
    /**
     * 
     * @type {number}
     * @memberof BotInsertDataTriggersInnerMethodOneOf1DataRecurring
     */
    'intervalMinutes': number;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataTriggersInnerMethodOneOf1DataRecurring
     */
    'endDate'?: string;
}
/**
 * 
 * @export
 * @interface BotInsertDataTriggersInnerMethodOneOf2
 */
export interface BotInsertDataTriggersInnerMethodOneOf2 {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataTriggersInnerMethodOneOf2
     */
    'type': BotInsertDataTriggersInnerMethodOneOf2TypeEnum;
    /**
     * 
     * @type {BotInsertDataTriggersInnerMethodOneOf2Data}
     * @memberof BotInsertDataTriggersInnerMethodOneOf2
     */
    'data': BotInsertDataTriggersInnerMethodOneOf2Data;
}

export const BotInsertDataTriggersInnerMethodOneOf2TypeEnum = {
    App: 'app'
} as const;

export type BotInsertDataTriggersInnerMethodOneOf2TypeEnum = typeof BotInsertDataTriggersInnerMethodOneOf2TypeEnum[keyof typeof BotInsertDataTriggersInnerMethodOneOf2TypeEnum];

/**
 * 
 * @export
 * @interface BotInsertDataTriggersInnerMethodOneOf2Data
 */
export interface BotInsertDataTriggersInnerMethodOneOf2Data {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataTriggersInnerMethodOneOf2Data
     */
    'appId': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataTriggersInnerMethodOneOf2Data
     */
    'integrationId'?: string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataTriggersInnerMethodOneOf2Data
     */
    'secretId'?: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof BotInsertDataTriggersInnerMethodOneOf2Data
     */
    'registrationOutput'?: { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface BotInsertDataTriggersInnerMethodOneOfData
 */
export interface BotInsertDataTriggersInnerMethodOneOfData {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataTriggersInnerMethodOneOfData
     */
    'event': string;
    /**
     * Useful for \'order-insert\' event, to specify the service type of the integration. This\'ll help distinguish which conditions to display in the UI
     * @type {string}
     * @memberof BotInsertDataTriggersInnerMethodOneOfData
     */
    'serviceType'?: string;
}
/**
 * @type BotNodeEventData
 * @export
 */
export type BotNodeEventData = BotNodeEventDataOneOf | BotNodeEventDataOneOf1 | BotNodeEventDataOneOf2 | BotNodeEventDataOneOf3 | BotNodeEventDataOneOf4 | BotNodeEventDataOneOf5 | BotNodeEventDataOneOf6 | BotNodeEventDataOneOf7 | BotNodeEventDataOneOf8 | BotNodeEventDataOneOf9;

/**
 * 
 * @export
 * @interface BotNodeEventDataOneOf
 */
export interface BotNodeEventDataOneOf {
    /**
     * 
     * @type {string}
     * @memberof BotNodeEventDataOneOf
     */
    'type': BotNodeEventDataOneOfTypeEnum;
    /**
     * 
     * @type {BotNodeEventDataOneOfData}
     * @memberof BotNodeEventDataOneOf
     */
    'data': BotNodeEventDataOneOfData;
    /**
     * 
     * @type {BotNodeEventDataOneOfHandle}
     * @memberof BotNodeEventDataOneOf
     */
    'handle': BotNodeEventDataOneOfHandle;
    /**
     * send in to remove the message
     * @type {boolean}
     * @memberof BotNodeEventDataOneOf
     */
    'remove'?: boolean;
}

export const BotNodeEventDataOneOfTypeEnum = {
    Message: 'message'
} as const;

export type BotNodeEventDataOneOfTypeEnum = typeof BotNodeEventDataOneOfTypeEnum[keyof typeof BotNodeEventDataOneOfTypeEnum];

/**
 * 
 * @export
 * @interface BotNodeEventDataOneOf1
 */
export interface BotNodeEventDataOneOf1 {
    /**
     * 
     * @type {string}
     * @memberof BotNodeEventDataOneOf1
     */
    'type': BotNodeEventDataOneOf1TypeEnum;
    /**
     * 
     * @type {BotNodeEventDataOneOfData}
     * @memberof BotNodeEventDataOneOf1
     */
    'data': BotNodeEventDataOneOfData;
    /**
     * 
     * @type {BotNodeEventDataOneOf1Handle}
     * @memberof BotNodeEventDataOneOf1
     */
    'handle': BotNodeEventDataOneOf1Handle;
    /**
     * send in to remove the email
     * @type {boolean}
     * @memberof BotNodeEventDataOneOf1
     */
    'remove'?: boolean;
}

export const BotNodeEventDataOneOf1TypeEnum = {
    Email: 'email'
} as const;

export type BotNodeEventDataOneOf1TypeEnum = typeof BotNodeEventDataOneOf1TypeEnum[keyof typeof BotNodeEventDataOneOf1TypeEnum];

/**
 * 
 * @export
 * @interface BotNodeEventDataOneOf1Handle
 */
export interface BotNodeEventDataOneOf1Handle {
    /**
     * 
     * @type {Array<string>}
     * @memberof BotNodeEventDataOneOf1Handle
     */
    'delay'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof BotNodeEventDataOneOf1Handle
     */
    'action'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof BotNodeEventDataOneOf1Handle
     */
    'userInput'?: Array<string>;
}
/**
 * 
 * @export
 * @interface BotNodeEventDataOneOf2
 */
export interface BotNodeEventDataOneOf2 {
    /**
     * 
     * @type {string}
     * @memberof BotNodeEventDataOneOf2
     */
    'type': BotNodeEventDataOneOf2TypeEnum;
    /**
     * 
     * @type {BotNodeEventDataOneOfData}
     * @memberof BotNodeEventDataOneOf2
     */
    'data': BotNodeEventDataOneOfData;
    /**
     * 
     * @type {BotNodeEventDataOneOf2Handle}
     * @memberof BotNodeEventDataOneOf2
     */
    'handle': BotNodeEventDataOneOf2Handle;
    /**
     * send in to remove the action
     * @type {boolean}
     * @memberof BotNodeEventDataOneOf2
     */
    'remove'?: boolean;
}

export const BotNodeEventDataOneOf2TypeEnum = {
    Action: 'action'
} as const;

export type BotNodeEventDataOneOf2TypeEnum = typeof BotNodeEventDataOneOf2TypeEnum[keyof typeof BotNodeEventDataOneOf2TypeEnum];

/**
 * 
 * @export
 * @interface BotNodeEventDataOneOf2Handle
 */
export interface BotNodeEventDataOneOf2Handle {
    /**
     * 
     * @type {Array<string>}
     * @memberof BotNodeEventDataOneOf2Handle
     */
    'delay'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof BotNodeEventDataOneOf2Handle
     */
    'userInput'?: Array<string>;
}
/**
 * 
 * @export
 * @interface BotNodeEventDataOneOf3
 */
export interface BotNodeEventDataOneOf3 {
    /**
     * 
     * @type {string}
     * @memberof BotNodeEventDataOneOf3
     */
    'type': BotNodeEventDataOneOf3TypeEnum;
    /**
     * 
     * @type {BotNodeEventDataOneOfDataAllOf1MessageInput}
     * @memberof BotNodeEventDataOneOf3
     */
    'data': BotNodeEventDataOneOfDataAllOf1MessageInput;
    /**
     * 
     * @type {string}
     * @memberof BotNodeEventDataOneOf3
     */
    'handle': string;
    /**
     * 
     * @type {BotNodeEventDataOneOfData}
     * @memberof BotNodeEventDataOneOf3
     */
    'sourceAction': BotNodeEventDataOneOfData;
    /**
     * 
     * @type {number}
     * @memberof BotNodeEventDataOneOf3
     */
    'sourceIndex': number;
    /**
     * send in to remove the user input
     * @type {boolean}
     * @memberof BotNodeEventDataOneOf3
     */
    'remove'?: boolean;
}

export const BotNodeEventDataOneOf3TypeEnum = {
    UserInput: 'userInput'
} as const;

export type BotNodeEventDataOneOf3TypeEnum = typeof BotNodeEventDataOneOf3TypeEnum[keyof typeof BotNodeEventDataOneOf3TypeEnum];

/**
 * 
 * @export
 * @interface BotNodeEventDataOneOf4
 */
export interface BotNodeEventDataOneOf4 {
    /**
     * 
     * @type {string}
     * @memberof BotNodeEventDataOneOf4
     */
    'type': BotNodeEventDataOneOf4TypeEnum;
    /**
     * 
     * @type {BotNodeEventDataOneOfDataAllOf1MessageDelaysInner}
     * @memberof BotNodeEventDataOneOf4
     */
    'data': BotNodeEventDataOneOfDataAllOf1MessageDelaysInner;
    /**
     * 
     * @type {string}
     * @memberof BotNodeEventDataOneOf4
     */
    'handle': string;
    /**
     * 
     * @type {BotNodeEventDataOneOfData}
     * @memberof BotNodeEventDataOneOf4
     */
    'sourceAction': BotNodeEventDataOneOfData;
    /**
     * 
     * @type {number}
     * @memberof BotNodeEventDataOneOf4
     */
    'sourceIndex': number;
    /**
     * send in to remove the delay
     * @type {boolean}
     * @memberof BotNodeEventDataOneOf4
     */
    'remove'?: boolean;
}

export const BotNodeEventDataOneOf4TypeEnum = {
    Delay: 'delay'
} as const;

export type BotNodeEventDataOneOf4TypeEnum = typeof BotNodeEventDataOneOf4TypeEnum[keyof typeof BotNodeEventDataOneOf4TypeEnum];

/**
 * 
 * @export
 * @interface BotNodeEventDataOneOf5
 */
export interface BotNodeEventDataOneOf5 {
    /**
     * 
     * @type {string}
     * @memberof BotNodeEventDataOneOf5
     */
    'type': BotNodeEventDataOneOf5TypeEnum;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction}
     * @memberof BotNodeEventDataOneOf5
     */
    'data': BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction;
    /**
     * 
     * @type {BotNodeEventDataOneOf5Handle}
     * @memberof BotNodeEventDataOneOf5
     */
    'handle': BotNodeEventDataOneOf5Handle;
    /**
     * 
     * @type {string}
     * @memberof BotNodeEventDataOneOf5
     */
    'sourceType': BotNodeEventDataOneOf5SourceTypeEnum;
    /**
     * 
     * @type {BotNodeEventDataOneOfData}
     * @memberof BotNodeEventDataOneOf5
     */
    'sourceAction': BotNodeEventDataOneOfData;
    /**
     * 
     * @type {number}
     * @memberof BotNodeEventDataOneOf5
     */
    'sourceIndex': number;
    /**
     * send in to remove the condition
     * @type {boolean}
     * @memberof BotNodeEventDataOneOf5
     */
    'remove'?: boolean;
}

export const BotNodeEventDataOneOf5TypeEnum = {
    Condition: 'condition'
} as const;

export type BotNodeEventDataOneOf5TypeEnum = typeof BotNodeEventDataOneOf5TypeEnum[keyof typeof BotNodeEventDataOneOf5TypeEnum];
export const BotNodeEventDataOneOf5SourceTypeEnum = {
    Button: 'button',
    Input: 'input',
    Delay: 'delay',
    List: 'list'
} as const;

export type BotNodeEventDataOneOf5SourceTypeEnum = typeof BotNodeEventDataOneOf5SourceTypeEnum[keyof typeof BotNodeEventDataOneOf5SourceTypeEnum];

/**
 * 
 * @export
 * @interface BotNodeEventDataOneOf5Handle
 */
export interface BotNodeEventDataOneOf5Handle {
    /**
     * 
     * @type {Array<string>}
     * @memberof BotNodeEventDataOneOf5Handle
     */
    'default'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof BotNodeEventDataOneOf5Handle
     */
    'group'?: Array<string>;
}
/**
 * 
 * @export
 * @interface BotNodeEventDataOneOf6
 */
export interface BotNodeEventDataOneOf6 {
    /**
     * 
     * @type {string}
     * @memberof BotNodeEventDataOneOf6
     */
    'type': BotNodeEventDataOneOf6TypeEnum;
    /**
     * 
     * @type {BotNodeEventDataOneOf6Data}
     * @memberof BotNodeEventDataOneOf6
     */
    'data': BotNodeEventDataOneOf6Data;
    /**
     * 
     * @type {BotNodeEventDataOneOfData}
     * @memberof BotNodeEventDataOneOf6
     */
    'sourceAction': BotNodeEventDataOneOfData;
    /**
     * 
     * @type {number}
     * @memberof BotNodeEventDataOneOf6
     */
    'sourceIndex': number;
    /**
     * send in to remove the url
     * @type {boolean}
     * @memberof BotNodeEventDataOneOf6
     */
    'remove'?: boolean;
}

export const BotNodeEventDataOneOf6TypeEnum = {
    Url: 'url'
} as const;

export type BotNodeEventDataOneOf6TypeEnum = typeof BotNodeEventDataOneOf6TypeEnum[keyof typeof BotNodeEventDataOneOf6TypeEnum];

/**
 * 
 * @export
 * @interface BotNodeEventDataOneOf6Data
 */
export interface BotNodeEventDataOneOf6Data {
    /**
     * 
     * @type {string}
     * @memberof BotNodeEventDataOneOf6Data
     */
    'url': string;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition}
     * @memberof BotNodeEventDataOneOf6Data
     */
    'position'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition | null;
}
/**
 * 
 * @export
 * @interface BotNodeEventDataOneOf7
 */
export interface BotNodeEventDataOneOf7 {
    /**
     * 
     * @type {string}
     * @memberof BotNodeEventDataOneOf7
     */
    'type': BotNodeEventDataOneOf7TypeEnum;
    /**
     * 
     * @type {BotNodeEventDataOneOf7Data}
     * @memberof BotNodeEventDataOneOf7
     */
    'data': BotNodeEventDataOneOf7Data;
    /**
     * 
     * @type {BotNodeEventDataOneOfData}
     * @memberof BotNodeEventDataOneOf7
     */
    'sourceAction': BotNodeEventDataOneOfData;
    /**
     * 
     * @type {number}
     * @memberof BotNodeEventDataOneOf7
     */
    'sourceIndex': number;
    /**
     * send in to remove the phone number
     * @type {boolean}
     * @memberof BotNodeEventDataOneOf7
     */
    'remove'?: boolean;
}

export const BotNodeEventDataOneOf7TypeEnum = {
    PhoneNumber: 'phoneNumber'
} as const;

export type BotNodeEventDataOneOf7TypeEnum = typeof BotNodeEventDataOneOf7TypeEnum[keyof typeof BotNodeEventDataOneOf7TypeEnum];

/**
 * 
 * @export
 * @interface BotNodeEventDataOneOf7Data
 */
export interface BotNodeEventDataOneOf7Data {
    /**
     * Phone number to call
     * @type {string}
     * @memberof BotNodeEventDataOneOf7Data
     */
    'phoneNumber': string;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition}
     * @memberof BotNodeEventDataOneOf7Data
     */
    'position'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition | null;
}
/**
 * 
 * @export
 * @interface BotNodeEventDataOneOf8
 */
export interface BotNodeEventDataOneOf8 {
    /**
     * 
     * @type {string}
     * @memberof BotNodeEventDataOneOf8
     */
    'type': BotNodeEventDataOneOf8TypeEnum;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionDefaultActionAllOf}
     * @memberof BotNodeEventDataOneOf8
     */
    'data': BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionDefaultActionAllOf;
    /**
     * 
     * @type {BotNodeEventDataOneOfData}
     * @memberof BotNodeEventDataOneOf8
     */
    'sourceAction': BotNodeEventDataOneOfData;
    /**
     * 
     * @type {number}
     * @memberof BotNodeEventDataOneOf8
     */
    'sourceIndex': number;
    /**
     * 
     * @type {string}
     * @memberof BotNodeEventDataOneOf8
     */
    'sourceType'?: BotNodeEventDataOneOf8SourceTypeEnum;
    /**
     * 
     * @type {BotNodeEventDataOneOf8ConditionSource}
     * @memberof BotNodeEventDataOneOf8
     */
    'conditionSource'?: BotNodeEventDataOneOf8ConditionSource;
    /**
     * send in to remove the bot target
     * @type {boolean}
     * @memberof BotNodeEventDataOneOf8
     */
    'remove'?: boolean;
}

export const BotNodeEventDataOneOf8TypeEnum = {
    BotTarget: 'botTarget'
} as const;

export type BotNodeEventDataOneOf8TypeEnum = typeof BotNodeEventDataOneOf8TypeEnum[keyof typeof BotNodeEventDataOneOf8TypeEnum];
export const BotNodeEventDataOneOf8SourceTypeEnum = {
    Button: 'button',
    Input: 'input',
    Delay: 'delay',
    List: 'list'
} as const;

export type BotNodeEventDataOneOf8SourceTypeEnum = typeof BotNodeEventDataOneOf8SourceTypeEnum[keyof typeof BotNodeEventDataOneOf8SourceTypeEnum];

/**
 * 
 * @export
 * @interface BotNodeEventDataOneOf8ConditionSource
 */
export interface BotNodeEventDataOneOf8ConditionSource {
    /**
     * 
     * @type {string}
     * @memberof BotNodeEventDataOneOf8ConditionSource
     */
    'target': BotNodeEventDataOneOf8ConditionSourceTargetEnum;
    /**
     * 
     * @type {number}
     * @memberof BotNodeEventDataOneOf8ConditionSource
     */
    'index': number;
}

export const BotNodeEventDataOneOf8ConditionSourceTargetEnum = {
    Default: 'default',
    Group: 'group'
} as const;

export type BotNodeEventDataOneOf8ConditionSourceTargetEnum = typeof BotNodeEventDataOneOf8ConditionSourceTargetEnum[keyof typeof BotNodeEventDataOneOf8ConditionSourceTargetEnum];

/**
 * 
 * @export
 * @interface BotNodeEventDataOneOf9
 */
export interface BotNodeEventDataOneOf9 {
    /**
     * 
     * @type {string}
     * @memberof BotNodeEventDataOneOf9
     */
    'type': BotNodeEventDataOneOf9TypeEnum;
    /**
     * 
     * @type {BotNodeEventDataOneOf9Data}
     * @memberof BotNodeEventDataOneOf9
     */
    'data': BotNodeEventDataOneOf9Data;
    /**
     * send in to remove the note
     * @type {boolean}
     * @memberof BotNodeEventDataOneOf9
     */
    'remove'?: boolean;
}

export const BotNodeEventDataOneOf9TypeEnum = {
    Note: 'note'
} as const;

export type BotNodeEventDataOneOf9TypeEnum = typeof BotNodeEventDataOneOf9TypeEnum[keyof typeof BotNodeEventDataOneOf9TypeEnum];

/**
 * 
 * @export
 * @interface BotNodeEventDataOneOf9Data
 */
export interface BotNodeEventDataOneOf9Data {
    /**
     * 
     * @type {string}
     * @memberof BotNodeEventDataOneOf9Data
     */
    'id'?: string;
    /**
     * 
     * @type {Array<BotNodeEventDataOneOfDataAllOf1MessageAttachmentsInner>}
     * @memberof BotNodeEventDataOneOf9Data
     */
    'attachments'?: Array<BotNodeEventDataOneOfDataAllOf1MessageAttachmentsInner>;
    /**
     * 
     * @type {string}
     * @memberof BotNodeEventDataOneOf9Data
     */
    'text'?: string;
    /**
     * 
     * @type {string}
     * @memberof BotNodeEventDataOneOf9Data
     */
    'title': string;
    /**
     * 
     * @type {number}
     * @memberof BotNodeEventDataOneOf9Data
     */
    'height'?: number;
    /**
     * 
     * @type {number}
     * @memberof BotNodeEventDataOneOf9Data
     */
    'width'?: number;
    /**
     * 
     * @type {Array<BotInsertDataNotesInnerTargetsInner>}
     * @memberof BotNodeEventDataOneOf9Data
     */
    'targets'?: Array<BotInsertDataNotesInnerTargetsInner> | null;
    /**
     * 
     * @type {string}
     * @memberof BotNodeEventDataOneOf9Data
     */
    'color'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof BotNodeEventDataOneOf9Data
     */
    'zIndex'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof BotNodeEventDataOneOf9Data
     */
    'fillColor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BotNodeEventDataOneOf9Data
     */
    'shapeType'?: string | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof BotNodeEventDataOneOf9Data
     */
    'textStyles'?: { [key: string]: any; } | null;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition}
     * @memberof BotNodeEventDataOneOf9Data
     */
    'position': BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition | null;
    /**
     * 
     * @type {boolean}
     * @memberof BotNodeEventDataOneOf9Data
     */
    'remove'?: boolean;
}
/**
 * 
 * @export
 * @interface BotNodeEventDataOneOfData
 */
export interface BotNodeEventDataOneOfData {
    /**
     * 
     * @type {string}
     * @memberof BotNodeEventDataOneOfData
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof BotNodeEventDataOneOfData
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof BotNodeEventDataOneOfData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof BotNodeEventDataOneOfData
     */
    'botId'?: string;
    /**
     * Name of the template
     * @type {string}
     * @memberof BotNodeEventDataOneOfData
     */
    'name': string;
    /**
     * 
     * @type {BotNodeEventDataOneOfDataAllOf1Message}
     * @memberof BotNodeEventDataOneOfData
     */
    'message'?: BotNodeEventDataOneOfDataAllOf1Message | null;
    /**
     * set the assignee on the contact
     * @type {string}
     * @memberof BotNodeEventDataOneOfData
     */
    'assignee'?: string | null;
    /**
     * Tags to set on this contact.
     * @type {Array<BotInsertDataActionsInnerAllOf1TagsInner>}
     * @memberof BotNodeEventDataOneOfData
     */
    'tags'?: Array<BotInsertDataActionsInnerAllOf1TagsInner> | null;
    /**
     * Array of UserId
     * @type {Array<string>}
     * @memberof BotNodeEventDataOneOfData
     */
    'notifyUsers'?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof BotNodeEventDataOneOfData
     * @deprecated
     */
    'webhooks'?: Array<string> | null;
    /**
     * 
     * @type {Array<BotInsertDataActionsInnerAllOf1HttpRequestInner>}
     * @memberof BotNodeEventDataOneOfData
     */
    'httpRequest'?: Array<BotInsertDataActionsInnerAllOf1HttpRequestInner> | null;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition}
     * @memberof BotNodeEventDataOneOfData
     */
    'position'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition | null;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition}
     * @memberof BotNodeEventDataOneOfData
     */
    'actionPosition'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition | null;
    /**
     * send in to remove the action
     * @type {boolean}
     * @memberof BotNodeEventDataOneOfData
     */
    'remove'?: boolean;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1FormRef}
     * @memberof BotNodeEventDataOneOfData
     */
    'formRef'?: BotInsertDataActionsInnerAllOf1FormRef | null;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1FormActionMetadata}
     * @memberof BotNodeEventDataOneOfData
     */
    'formActionMetadata'?: BotInsertDataActionsInnerAllOf1FormActionMetadata | null;
    /**
     * Type of the message being sent
     * @type {string}
     * @memberof BotNodeEventDataOneOfData
     */
    'messageType'?: BotNodeEventDataOneOfDataMessageTypeEnum;
    /**
     * Account ID of the sender
     * @type {string}
     * @memberof BotNodeEventDataOneOfData
     */
    'accountId'?: string;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1ZapierAction}
     * @memberof BotNodeEventDataOneOfData
     */
    'zapierAction'?: BotInsertDataActionsInnerAllOf1ZapierAction | null;
}

export const BotNodeEventDataOneOfDataMessageTypeEnum = {
    Message: 'message',
    Email: 'email'
} as const;

export type BotNodeEventDataOneOfDataMessageTypeEnum = typeof BotNodeEventDataOneOfDataMessageTypeEnum[keyof typeof BotNodeEventDataOneOfDataMessageTypeEnum];

/**
 * 
 * @export
 * @interface BotNodeEventDataOneOfDataAllOf
 */
export interface BotNodeEventDataOneOfDataAllOf {
    /**
     * 
     * @type {string}
     * @memberof BotNodeEventDataOneOfDataAllOf
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof BotNodeEventDataOneOfDataAllOf
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface BotNodeEventDataOneOfDataAllOf1
 */
export interface BotNodeEventDataOneOfDataAllOf1 {
    /**
     * 
     * @type {string}
     * @memberof BotNodeEventDataOneOfDataAllOf1
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof BotNodeEventDataOneOfDataAllOf1
     */
    'botId'?: string;
    /**
     * Name of the template
     * @type {string}
     * @memberof BotNodeEventDataOneOfDataAllOf1
     */
    'name'?: string;
    /**
     * 
     * @type {BotNodeEventDataOneOfDataAllOf1Message}
     * @memberof BotNodeEventDataOneOfDataAllOf1
     */
    'message'?: BotNodeEventDataOneOfDataAllOf1Message | null;
    /**
     * set the assignee on the contact
     * @type {string}
     * @memberof BotNodeEventDataOneOfDataAllOf1
     */
    'assignee'?: string | null;
    /**
     * Tags to set on this contact.
     * @type {Array<BotInsertDataActionsInnerAllOf1TagsInner>}
     * @memberof BotNodeEventDataOneOfDataAllOf1
     */
    'tags'?: Array<BotInsertDataActionsInnerAllOf1TagsInner> | null;
    /**
     * Array of UserId
     * @type {Array<string>}
     * @memberof BotNodeEventDataOneOfDataAllOf1
     */
    'notifyUsers'?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof BotNodeEventDataOneOfDataAllOf1
     * @deprecated
     */
    'webhooks'?: Array<string> | null;
    /**
     * 
     * @type {Array<BotInsertDataActionsInnerAllOf1HttpRequestInner>}
     * @memberof BotNodeEventDataOneOfDataAllOf1
     */
    'httpRequest'?: Array<BotInsertDataActionsInnerAllOf1HttpRequestInner> | null;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition}
     * @memberof BotNodeEventDataOneOfDataAllOf1
     */
    'position'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition | null;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition}
     * @memberof BotNodeEventDataOneOfDataAllOf1
     */
    'actionPosition'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition | null;
    /**
     * send in to remove the action
     * @type {boolean}
     * @memberof BotNodeEventDataOneOfDataAllOf1
     */
    'remove'?: boolean;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1FormRef}
     * @memberof BotNodeEventDataOneOfDataAllOf1
     */
    'formRef'?: BotInsertDataActionsInnerAllOf1FormRef | null;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1FormActionMetadata}
     * @memberof BotNodeEventDataOneOfDataAllOf1
     */
    'formActionMetadata'?: BotInsertDataActionsInnerAllOf1FormActionMetadata | null;
    /**
     * Type of the message being sent
     * @type {string}
     * @memberof BotNodeEventDataOneOfDataAllOf1
     */
    'messageType'?: BotNodeEventDataOneOfDataAllOf1MessageTypeEnum;
    /**
     * Account ID of the sender
     * @type {string}
     * @memberof BotNodeEventDataOneOfDataAllOf1
     */
    'accountId'?: string;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1ZapierAction}
     * @memberof BotNodeEventDataOneOfDataAllOf1
     */
    'zapierAction'?: BotInsertDataActionsInnerAllOf1ZapierAction | null;
}

export const BotNodeEventDataOneOfDataAllOf1MessageTypeEnum = {
    Message: 'message',
    Email: 'email'
} as const;

export type BotNodeEventDataOneOfDataAllOf1MessageTypeEnum = typeof BotNodeEventDataOneOfDataAllOf1MessageTypeEnum[keyof typeof BotNodeEventDataOneOfDataAllOf1MessageTypeEnum];

/**
 * 
 * @export
 * @interface BotNodeEventDataOneOfDataAllOf1Message
 */
export interface BotNodeEventDataOneOfDataAllOf1Message {
    /**
     * the template message itself
     * @type {string}
     * @memberof BotNodeEventDataOneOfDataAllOf1Message
     */
    'text': string | null;
    /**
     * array of attachments for the template
     * @type {Array<BotNodeEventDataOneOfDataAllOf1MessageAttachmentsInner>}
     * @memberof BotNodeEventDataOneOfDataAllOf1Message
     */
    'attachments'?: Array<BotNodeEventDataOneOfDataAllOf1MessageAttachmentsInner>;
    /**
     * 
     * @type {Array<BotInsertDataActionsInnerAllOf1MessageButtonsInner>}
     * @memberof BotNodeEventDataOneOfDataAllOf1Message
     */
    'buttons'?: Array<BotInsertDataActionsInnerAllOf1MessageButtonsInner>;
    /**
     * 
     * @type {Array<BotNodeEventDataOneOfDataAllOf1MessageDelaysInner>}
     * @memberof BotNodeEventDataOneOfDataAllOf1Message
     */
    'delays'?: Array<BotNodeEventDataOneOfDataAllOf1MessageDelaysInner>;
    /**
     * 
     * @type {BotNodeEventDataOneOfDataAllOf1MessageInput}
     * @memberof BotNodeEventDataOneOfDataAllOf1Message
     */
    'input'?: BotNodeEventDataOneOfDataAllOf1MessageInput;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageList}
     * @memberof BotNodeEventDataOneOfDataAllOf1Message
     */
    'list'?: BotInsertDataActionsInnerAllOf1MessageList;
    /**
     * 
     * @type {string}
     * @memberof BotNodeEventDataOneOfDataAllOf1Message
     */
    'quoted'?: string;
    /**
     * 
     * @type {Array<BotInsertDataActionsInnerAllOf1MessageProductsInner>}
     * @memberof BotNodeEventDataOneOfDataAllOf1Message
     */
    'products'?: Array<BotInsertDataActionsInnerAllOf1MessageProductsInner>;
    /**
     * the subject of the message, if applicable
     * @type {string}
     * @memberof BotNodeEventDataOneOfDataAllOf1Message
     */
    'subject'?: string;
}
/**
 * 
 * @export
 * @interface BotNodeEventDataOneOfDataAllOf1MessageAttachmentsInner
 */
export interface BotNodeEventDataOneOfDataAllOf1MessageAttachmentsInner {
    /**
     * 
     * @type {string}
     * @memberof BotNodeEventDataOneOfDataAllOf1MessageAttachmentsInner
     */
    'type': BotNodeEventDataOneOfDataAllOf1MessageAttachmentsInnerTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof BotNodeEventDataOneOfDataAllOf1MessageAttachmentsInner
     */
    'mimetype': string;
    /**
     * 
     * @type {string}
     * @memberof BotNodeEventDataOneOfDataAllOf1MessageAttachmentsInner
     */
    'url': string;
    /**
     * 
     * @type {string}
     * @memberof BotNodeEventDataOneOfDataAllOf1MessageAttachmentsInner
     */
    'jpegThumbnail'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof BotNodeEventDataOneOfDataAllOf1MessageAttachmentsInner
     */
    'seconds'?: number;
    /**
     * 
     * @type {string}
     * @memberof BotNodeEventDataOneOfDataAllOf1MessageAttachmentsInner
     */
    'filename'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BotNodeEventDataOneOfDataAllOf1MessageAttachmentsInner
     */
    'pttAudio'?: boolean;
}

export const BotNodeEventDataOneOfDataAllOf1MessageAttachmentsInnerTypeEnum = {
    Image: 'image',
    Video: 'video',
    Contact: 'contact',
    Sticker: 'sticker',
    Audio: 'audio',
    Document: 'document',
    Location: 'location'
} as const;

export type BotNodeEventDataOneOfDataAllOf1MessageAttachmentsInnerTypeEnum = typeof BotNodeEventDataOneOfDataAllOf1MessageAttachmentsInnerTypeEnum[keyof typeof BotNodeEventDataOneOfDataAllOf1MessageAttachmentsInnerTypeEnum];

/**
 * 
 * @export
 * @interface BotNodeEventDataOneOfDataAllOf1MessageDelaysInner
 */
export interface BotNodeEventDataOneOfDataAllOf1MessageDelaysInner {
    /**
     * Time delays on second
     * @type {number}
     * @memberof BotNodeEventDataOneOfDataAllOf1MessageDelaysInner
     */
    'timeDelaySec': number;
    /**
     * Use \"nextAction\" instead
     * @type {string}
     * @memberof BotNodeEventDataOneOfDataAllOf1MessageDelaysInner
     * @deprecated
     */
    'triggerActionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof BotNodeEventDataOneOfDataAllOf1MessageDelaysInner
     */
    'triggerBotId'?: string | null;
    /**
     * Simulate typing
     * @type {boolean}
     * @memberof BotNodeEventDataOneOfDataAllOf1MessageDelaysInner
     */
    'simulateTyping'?: boolean;
    /**
     * If true, the message will be cancelled if a reply is received
     * @type {boolean}
     * @memberof BotNodeEventDataOneOfDataAllOf1MessageDelaysInner
     */
    'cancelIfReplyReceived'?: boolean;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition}
     * @memberof BotNodeEventDataOneOfDataAllOf1MessageDelaysInner
     */
    'position'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition | null;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction}
     * @memberof BotNodeEventDataOneOfDataAllOf1MessageDelaysInner
     */
    'nextAction'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction;
}
/**
 * 
 * @export
 * @interface BotNodeEventDataOneOfDataAllOf1MessageInput
 */
export interface BotNodeEventDataOneOfDataAllOf1MessageInput {
    /**
     * Name of the input
     * @type {string}
     * @memberof BotNodeEventDataOneOfDataAllOf1MessageInput
     */
    'name': string;
    /**
     * 
     * @type {BotNodeEventDataOneOfDataAllOf1MessageInputValidation}
     * @memberof BotNodeEventDataOneOfDataAllOf1MessageInput
     */
    'validation'?: BotNodeEventDataOneOfDataAllOf1MessageInputValidation;
    /**
     * Use \"nextAction\" instead
     * @type {string}
     * @memberof BotNodeEventDataOneOfDataAllOf1MessageInput
     * @deprecated
     */
    'triggerActionId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BotNodeEventDataOneOfDataAllOf1MessageInput
     */
    'triggerBotId'?: string | null;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction}
     * @memberof BotNodeEventDataOneOfDataAllOf1MessageInput
     */
    'nextAction'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition}
     * @memberof BotNodeEventDataOneOfDataAllOf1MessageInput
     */
    'position'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition | null;
}
/**
 * 
 * @export
 * @interface BotNodeEventDataOneOfDataAllOf1MessageInputValidation
 */
export interface BotNodeEventDataOneOfDataAllOf1MessageInputValidation {
    /**
     * 
     * @type {string}
     * @memberof BotNodeEventDataOneOfDataAllOf1MessageInputValidation
     */
    'type': BotNodeEventDataOneOfDataAllOf1MessageInputValidationTypeEnum;
}

export const BotNodeEventDataOneOfDataAllOf1MessageInputValidationTypeEnum = {
    String: 'string',
    Integer: 'integer'
} as const;

export type BotNodeEventDataOneOfDataAllOf1MessageInputValidationTypeEnum = typeof BotNodeEventDataOneOfDataAllOf1MessageInputValidationTypeEnum[keyof typeof BotNodeEventDataOneOfDataAllOf1MessageInputValidationTypeEnum];

/**
 * 
 * @export
 * @interface BotNodeEventDataOneOfHandle
 */
export interface BotNodeEventDataOneOfHandle {
    /**
     * 
     * @type {Array<string>}
     * @memberof BotNodeEventDataOneOfHandle
     */
    'button'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof BotNodeEventDataOneOfHandle
     */
    'delay'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof BotNodeEventDataOneOfHandle
     */
    'list'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof BotNodeEventDataOneOfHandle
     */
    'action'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof BotNodeEventDataOneOfHandle
     */
    'userInput'?: Array<string>;
}
/**
 * 
 * @export
 * @interface BotUpdate
 */
export interface BotUpdate {
    /**
     * 
     * @type {string}
     * @memberof BotUpdate
     */
    'event': BotUpdateEventEnum;
    /**
     * 
     * @type {Array<BotUpdateData>}
     * @memberof BotUpdate
     */
    'data': Array<BotUpdateData>;
}

export const BotUpdateEventEnum = {
    BotUpdate: 'bot-update'
} as const;

export type BotUpdateEventEnum = typeof BotUpdateEventEnum[keyof typeof BotUpdateEventEnum];

/**
 * 
 * @export
 * @interface BotUpdateData
 */
export interface BotUpdateData {
    /**
     * 
     * @type {string}
     * @memberof BotUpdateData
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof BotUpdateData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof BotUpdateData
     */
    'teamId'?: string;
    /**
     * 
     * @type {string}
     * @memberof BotUpdateData
     */
    'defaultAccountId'?: string;
    /**
     * 
     * @type {string}
     * @memberof BotUpdateData
     */
    'startingActionId'?: string | null;
    /**
     * 
     * @type {Array<BotInsertDataActionsInner>}
     * @memberof BotUpdateData
     */
    'actions'?: Array<BotInsertDataActionsInner>;
    /**
     * 
     * @type {string}
     * @memberof BotUpdateData
     */
    'folderId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BotUpdateData
     */
    'templateId'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof BotUpdateData
     */
    'isForm'?: boolean;
    /**
     * 
     * @type {BotInsertDataExternalTemplateStatus}
     * @memberof BotUpdateData
     */
    'externalTemplateStatus'?: BotInsertDataExternalTemplateStatus;
    /**
     * 
     * @type {any}
     * @memberof BotUpdateData
     */
    'externalTemplate'?: any;
    /**
     * 
     * @type {string}
     * @memberof BotUpdateData
     */
    'imageUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof BotUpdateData
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof BotUpdateData
     */
    'industry'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof BotUpdateData
     */
    'industries'?: Array<string>;
    /**
     * 
     * @type {Array<BotInsertDataTriggersInner>}
     * @memberof BotUpdateData
     */
    'triggers'?: Array<BotInsertDataTriggersInner>;
    /**
     * 
     * @type {string}
     * @memberof BotUpdateData
     */
    'language'?: string;
    /**
     * 
     * @type {Array<BotInsertDataNotesInner>}
     * @memberof BotUpdateData
     */
    'notes'?: Array<BotInsertDataNotesInner>;
    /**
     * 
     * @type {string}
     * @memberof BotUpdateData
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof BotUpdateData
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof BotUpdateData
     */
    'createdBy'?: string;
    /**
     * 
     * @type {Array<BotInsertDataSharedSlugsInner>}
     * @memberof BotUpdateData
     */
    'sharedSlugs'?: Array<BotInsertDataSharedSlugsInner>;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof BotUpdateData
     */
    'propertyValues'?: { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface CallDelete
 */
export interface CallDelete {
    /**
     * 
     * @type {string}
     * @memberof CallDelete
     */
    'event': CallDeleteEventEnum;
    /**
     * 
     * @type {Array<CallDeleteData>}
     * @memberof CallDelete
     */
    'data': Array<CallDeleteData>;
}

export const CallDeleteEventEnum = {
    CallDelete: 'call-delete'
} as const;

export type CallDeleteEventEnum = typeof CallDeleteEventEnum[keyof typeof CallDeleteEventEnum];

/**
 * 
 * @export
 * @interface CallDeleteData
 */
export interface CallDeleteData {
    /**
     * 
     * @type {string}
     * @memberof CallDeleteData
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof CallDeleteData
     */
    'phoneNumber': string;
}
/**
 * 
 * @export
 * @interface CallInsert
 */
export interface CallInsert {
    /**
     * 
     * @type {string}
     * @memberof CallInsert
     */
    'event': CallInsertEventEnum;
    /**
     * 
     * @type {Array<CallInsertData>}
     * @memberof CallInsert
     */
    'data': Array<CallInsertData>;
}

export const CallInsertEventEnum = {
    CallInsert: 'call-insert'
} as const;

export type CallInsertEventEnum = typeof CallInsertEventEnum[keyof typeof CallInsertEventEnum];

/**
 * 
 * @export
 * @interface CallInsertData
 */
export interface CallInsertData {
    /**
     * 
     * @type {string}
     * @memberof CallInsertData
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof CallInsertData
     */
    'teamId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CallInsertData
     */
    'phoneNumber': string;
    /**
     * 
     * @type {string}
     * @memberof CallInsertData
     */
    'to'?: string;
    /**
     * 
     * @type {string}
     * @memberof CallInsertData
     */
    'contactName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CallInsertData
     */
    'callDuration'?: string;
    /**
     * 
     * @type {string}
     * @memberof CallInsertData
     */
    'callId': string;
    /**
     * 
     * @type {string}
     * @memberof CallInsertData
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof CallInsertData
     */
    'callRecording'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CallInsertData
     */
    'callNotes'?: string | null;
}
/**
 * 
 * @export
 * @interface CallUpdate
 */
export interface CallUpdate {
    /**
     * 
     * @type {string}
     * @memberof CallUpdate
     */
    'event': CallUpdateEventEnum;
    /**
     * 
     * @type {Array<CallUpdateData>}
     * @memberof CallUpdate
     */
    'data': Array<CallUpdateData>;
}

export const CallUpdateEventEnum = {
    CallUpdate: 'call-update'
} as const;

export type CallUpdateEventEnum = typeof CallUpdateEventEnum[keyof typeof CallUpdateEventEnum];

/**
 * 
 * @export
 * @interface CallUpdateData
 */
export interface CallUpdateData {
    /**
     * 
     * @type {string}
     * @memberof CallUpdateData
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof CallUpdateData
     */
    'teamId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CallUpdateData
     */
    'phoneNumber': string;
    /**
     * 
     * @type {string}
     * @memberof CallUpdateData
     */
    'to'?: string;
    /**
     * 
     * @type {string}
     * @memberof CallUpdateData
     */
    'contactName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CallUpdateData
     */
    'callDuration'?: string;
    /**
     * 
     * @type {string}
     * @memberof CallUpdateData
     */
    'callId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CallUpdateData
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CallUpdateData
     */
    'callRecording'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CallUpdateData
     */
    'callNotes'?: string | null;
}
/**
 * 
 * @export
 * @interface CallchannelDelete
 */
export interface CallchannelDelete {
    /**
     * 
     * @type {string}
     * @memberof CallchannelDelete
     */
    'event': CallchannelDeleteEventEnum;
    /**
     * 
     * @type {Array<CallchannelDeleteData>}
     * @memberof CallchannelDelete
     */
    'data': Array<CallchannelDeleteData>;
}

export const CallchannelDeleteEventEnum = {
    CallchannelDelete: 'callchannel-delete'
} as const;

export type CallchannelDeleteEventEnum = typeof CallchannelDeleteEventEnum[keyof typeof CallchannelDeleteEventEnum];

/**
 * 
 * @export
 * @interface CallchannelDeleteData
 */
export interface CallchannelDeleteData {
    /**
     * 
     * @type {string}
     * @memberof CallchannelDeleteData
     */
    'phoneNumber': string;
}
/**
 * 
 * @export
 * @interface CallchannelInsert
 */
export interface CallchannelInsert {
    /**
     * 
     * @type {string}
     * @memberof CallchannelInsert
     */
    'event': CallchannelInsertEventEnum;
    /**
     * 
     * @type {Array<CallchannelInsertData>}
     * @memberof CallchannelInsert
     */
    'data': Array<CallchannelInsertData>;
}

export const CallchannelInsertEventEnum = {
    CallchannelInsert: 'callchannel-insert'
} as const;

export type CallchannelInsertEventEnum = typeof CallchannelInsertEventEnum[keyof typeof CallchannelInsertEventEnum];

/**
 * 
 * @export
 * @interface CallchannelInsertData
 */
export interface CallchannelInsertData {
    /**
     * 
     * @type {string}
     * @memberof CallchannelInsertData
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CallchannelInsertData
     */
    'phoneNumber': string;
    /**
     * 
     * @type {string}
     * @memberof CallchannelInsertData
     */
    'teamId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CallchannelInsertData
     */
    'userId'?: string;
}
/**
 * 
 * @export
 * @interface CallchannelUpdate
 */
export interface CallchannelUpdate {
    /**
     * 
     * @type {string}
     * @memberof CallchannelUpdate
     */
    'event': CallchannelUpdateEventEnum;
    /**
     * 
     * @type {Array<CallchannelUpdateData>}
     * @memberof CallchannelUpdate
     */
    'data': Array<CallchannelUpdateData>;
}

export const CallchannelUpdateEventEnum = {
    CallchannelUpdate: 'callchannel-update'
} as const;

export type CallchannelUpdateEventEnum = typeof CallchannelUpdateEventEnum[keyof typeof CallchannelUpdateEventEnum];

/**
 * 
 * @export
 * @interface CallchannelUpdateData
 */
export interface CallchannelUpdateData {
    /**
     * 
     * @type {string}
     * @memberof CallchannelUpdateData
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CallchannelUpdateData
     */
    'phoneNumber': string;
    /**
     * 
     * @type {string}
     * @memberof CallchannelUpdateData
     */
    'teamId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CallchannelUpdateData
     */
    'userId'?: string;
}
/**
 * 
 * @export
 * @interface CampaignInsert
 */
export interface CampaignInsert {
    /**
     * 
     * @type {string}
     * @memberof CampaignInsert
     */
    'event': CampaignInsertEventEnum;
    /**
     * 
     * @type {Array<CampaignInsertData>}
     * @memberof CampaignInsert
     */
    'data': Array<CampaignInsertData>;
}

export const CampaignInsertEventEnum = {
    CampaignInsert: 'campaign-insert'
} as const;

export type CampaignInsertEventEnum = typeof CampaignInsertEventEnum[keyof typeof CampaignInsertEventEnum];

/**
 * 
 * @export
 * @interface CampaignInsertData
 */
export interface CampaignInsertData {
    /**
     * Name of the campaign
     * @type {string}
     * @memberof CampaignInsertData
     */
    'name': string;
    /**
     * Time interval between each message sent in seconds
     * @type {number}
     * @memberof CampaignInsertData
     */
    'sendInterval': number;
    /**
     * The template to send out
     * @type {string}
     * @memberof CampaignInsertData
     */
    'messageTemplate': string;
    /**
     * 
     * @type {string}
     * @memberof CampaignInsertData
     */
    'scheduledAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CampaignInsertData
     */
    'nextScheduledAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CampaignInsertData
     */
    'completedAt'?: string | null;
    /**
     * Should the message be randomized before sending
     * @type {boolean}
     * @memberof CampaignInsertData
     */
    'randomizeMessage'?: boolean;
    /**
     * Should typing indicator & read receipt be sent
     * @type {boolean}
     * @memberof CampaignInsertData
     */
    'sendTyping'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CampaignInsertData
     */
    'cancelIfReplyReceived'?: boolean;
    /**
     * ID of the campaign
     * @type {string}
     * @memberof CampaignInsertData
     */
    'id': string;
    /**
     * Current state of the campaign
     * @type {string}
     * @memberof CampaignInsertData
     */
    'state': CampaignInsertDataStateEnum;
    /**
     * 
     * @type {string}
     * @memberof CampaignInsertData
     */
    'createdAt': string;
    /**
     * User who created the campaign
     * @type {string}
     * @memberof CampaignInsertData
     */
    'createdBy': string;
    /**
     * Team ID of the campaign
     * @type {string}
     * @memberof CampaignInsertData
     */
    'teamId': string;
    /**
     * Specify IM account to use
     * @type {string}
     * @memberof CampaignInsertData
     * @deprecated
     */
    'accountId'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof CampaignInsertData
     */
    'accountIds'?: Array<string> | null;
    /**
     * Contact filter query
     * @type {{ [key: string]: any; }}
     * @memberof CampaignInsertData
     */
    'contactFilters'?: { [key: string]: any; };
    /**
     * 
     * @type {CampaignInsertDataCounts}
     * @memberof CampaignInsertData
     */
    'counts': CampaignInsertDataCounts;
    /**
     * 
     * @type {CampaignInsertDataActivationTimeRange}
     * @memberof CampaignInsertData
     */
    'activationTimeRange'?: CampaignInsertDataActivationTimeRange;
}

export const CampaignInsertDataStateEnum = {
    Inactive: 'inactive',
    Scheduled: 'scheduled',
    Progress: 'progress',
    Completed: 'completed'
} as const;

export type CampaignInsertDataStateEnum = typeof CampaignInsertDataStateEnum[keyof typeof CampaignInsertDataStateEnum];

/**
 * 
 * @export
 * @interface CampaignInsertDataActivationTimeRange
 */
export interface CampaignInsertDataActivationTimeRange {
    /**
     * 
     * @type {string}
     * @memberof CampaignInsertDataActivationTimeRange
     */
    'startTime': string;
    /**
     * 
     * @type {string}
     * @memberof CampaignInsertDataActivationTimeRange
     */
    'endTime': string;
}
/**
 * 
 * @export
 * @interface CampaignInsertDataCounts
 */
export interface CampaignInsertDataCounts {
    /**
     * 
     * @type {number}
     * @memberof CampaignInsertDataCounts
     */
    'failed'?: number;
    /**
     * 
     * @type {number}
     * @memberof CampaignInsertDataCounts
     */
    'pending'?: number;
    /**
     * 
     * @type {number}
     * @memberof CampaignInsertDataCounts
     */
    'pendingWAAck'?: number;
    /**
     * 
     * @type {number}
     * @memberof CampaignInsertDataCounts
     */
    'sent'?: number;
    /**
     * 
     * @type {number}
     * @memberof CampaignInsertDataCounts
     */
    'delivered'?: number;
}
/**
 * 
 * @export
 * @interface ChatDelete
 */
export interface ChatDelete {
    /**
     * 
     * @type {string}
     * @memberof ChatDelete
     */
    'event': ChatDeleteEventEnum;
    /**
     * 
     * @type {Array<ChatDeleteData>}
     * @memberof ChatDelete
     */
    'data': Array<ChatDeleteData>;
}

export const ChatDeleteEventEnum = {
    ChatDelete: 'chat-delete'
} as const;

export type ChatDeleteEventEnum = typeof ChatDeleteEventEnum[keyof typeof ChatDeleteEventEnum];

/**
 * 
 * @export
 * @interface ChatDeleteData
 */
export interface ChatDeleteData {
    /**
     * 
     * @type {string}
     * @memberof ChatDeleteData
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof ChatDeleteData
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface ChatInsert
 */
export interface ChatInsert {
    /**
     * 
     * @type {string}
     * @memberof ChatInsert
     */
    'event': ChatInsertEventEnum;
    /**
     * 
     * @type {Array<ChatInsertData>}
     * @memberof ChatInsert
     */
    'data': Array<ChatInsertData>;
}

export const ChatInsertEventEnum = {
    ChatInsert: 'chat-insert'
} as const;

export type ChatInsertEventEnum = typeof ChatInsertEventEnum[keyof typeof ChatInsertEventEnum];

/**
 * 
 * @export
 * @interface ChatInsertData
 */
export interface ChatInsertData {
    /**
     * 
     * @type {string}
     * @memberof ChatInsertData
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof ChatInsertData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ChatInsertData
     */
    'lastMessage': string;
    /**
     * 
     * @type {number}
     * @memberof ChatInsertData
     */
    'unread': number;
    /**
     * 
     * @type {boolean}
     * @memberof ChatInsertData
     */
    'spam'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChatInsertData
     */
    'archive': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChatInsertData
     */
    'readOnly': boolean;
    /**
     * 
     * @type {number}
     * @memberof ChatInsertData
     */
    'mute'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ChatInsertData
     */
    'pin'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof ChatInsertData
     */
    'isUserGenerated': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChatInsertData
     */
    'hasPendingMessage'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChatInsertData
     */
    'hasUnsolvedNote'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChatInsertData
     */
    'hasFailedMessage'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ChatInsertData
     */
    'mentions'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ChatInsertData
     */
    'disappearingMessages'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof ChatInsertData
     */
    'hasEntireMessageHistory': boolean;
    /**
     * 
     * @type {string}
     * @memberof ChatInsertData
     */
    'cursor': string;
}
/**
 * 
 * @export
 * @interface ChatUpdate
 */
export interface ChatUpdate {
    /**
     * 
     * @type {string}
     * @memberof ChatUpdate
     */
    'event': ChatUpdateEventEnum;
    /**
     * 
     * @type {Array<ChatUpdateData>}
     * @memberof ChatUpdate
     */
    'data': Array<ChatUpdateData>;
}

export const ChatUpdateEventEnum = {
    ChatUpdate: 'chat-update'
} as const;

export type ChatUpdateEventEnum = typeof ChatUpdateEventEnum[keyof typeof ChatUpdateEventEnum];

/**
 * 
 * @export
 * @interface ChatUpdateData
 */
export interface ChatUpdateData {
    /**
     * 
     * @type {string}
     * @memberof ChatUpdateData
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof ChatUpdateData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ChatUpdateData
     */
    'lastMessage'?: string;
    /**
     * 
     * @type {number}
     * @memberof ChatUpdateData
     */
    'unread'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ChatUpdateData
     */
    'spam'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChatUpdateData
     */
    'archive'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChatUpdateData
     */
    'readOnly'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ChatUpdateData
     */
    'mute'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ChatUpdateData
     */
    'pin'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof ChatUpdateData
     */
    'isUserGenerated'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChatUpdateData
     */
    'hasPendingMessage'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChatUpdateData
     */
    'hasUnsolvedNote'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChatUpdateData
     */
    'hasFailedMessage'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ChatUpdateData
     */
    'mentions'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ChatUpdateData
     */
    'disappearingMessages'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof ChatUpdateData
     */
    'hasEntireMessageHistory'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ChatUpdateData
     */
    'cursor'?: string;
}
/**
 * 
 * @export
 * @interface ChatbotInsert
 */
export interface ChatbotInsert {
    /**
     * 
     * @type {string}
     * @memberof ChatbotInsert
     */
    'event': ChatbotInsertEventEnum;
    /**
     * 
     * @type {Array<ChatbotInsertData>}
     * @memberof ChatbotInsert
     */
    'data': Array<ChatbotInsertData>;
}

export const ChatbotInsertEventEnum = {
    ChatbotInsert: 'chatbot-insert'
} as const;

export type ChatbotInsertEventEnum = typeof ChatbotInsertEventEnum[keyof typeof ChatbotInsertEventEnum];

/**
 * 
 * @export
 * @interface ChatbotInsertData
 */
export interface ChatbotInsertData {
    /**
     * ID of the chatbot
     * @type {string}
     * @memberof ChatbotInsertData
     */
    'id': string;
    /**
     * 
     * @type {Array<ChatbotInsertDataAllOfDocuments>}
     * @memberof ChatbotInsertData
     */
    'documents'?: Array<ChatbotInsertDataAllOfDocuments>;
    /**
     * An ISO formatted timestamp
     * @type {string}
     * @memberof ChatbotInsertData
     */
    'createdAt': string;
    /**
     * An ISO formatted timestamp
     * @type {string}
     * @memberof ChatbotInsertData
     */
    'updatedAt': string;
    /**
     * Current training status of the chatbot
     * @type {string}
     * @memberof ChatbotInsertData
     */
    'trainingStatus': ChatbotInsertDataTrainingStatusEnum;
    /**
     * Progress of training, between 0 and 100
     * @type {number}
     * @memberof ChatbotInsertData
     */
    'trainingProgress'?: number;
    /**
     * 
     * @type {Array<ChatbotInsertDataAllOfJobs>}
     * @memberof ChatbotInsertData
     */
    'jobs'?: Array<ChatbotInsertDataAllOfJobs>;
    /**
     * Name of the chatbot
     * @type {string}
     * @memberof ChatbotInsertData
     */
    'name': string;
    /**
     * Fallback message of the chatbot
     * @type {string}
     * @memberof ChatbotInsertData
     */
    'fallbackMessage': string;
    /**
     * Prompt message of the chatbot
     * @type {string}
     * @memberof ChatbotInsertData
     */
    'prompt': string;
    /**
     * Name of the member to assign to the chatbot
     * @type {string}
     * @memberof ChatbotInsertData
     */
    'assignedMember': string | null;
    /**
     * Name of the channel to deploy to the chatbot
     * @type {string}
     * @memberof ChatbotInsertData
     */
    'deployedAccount': string | null;
    /**
     * Use this chatbot as an AI assistant. Only one chatbot can be used as an AI assistant per team
     * @type {boolean}
     * @memberof ChatbotInsertData
     */
    'useAsAiAssistant': boolean;
    /**
     * Whether the chatbot is enabled to send messages to the deployed account
     * @type {boolean}
     * @memberof ChatbotInsertData
     */
    'enableAccountDeployment': boolean;
    /**
     * Should generated responses include the source of the data
     * @type {boolean}
     * @memberof ChatbotInsertData
     */
    'includeSourceInResponse': boolean;
}

export const ChatbotInsertDataTrainingStatusEnum = {
    Pending: 'pending',
    Running: 'running',
    Finished: 'finished',
    Failed: 'failed',
    Aborted: 'aborted'
} as const;

export type ChatbotInsertDataTrainingStatusEnum = typeof ChatbotInsertDataTrainingStatusEnum[keyof typeof ChatbotInsertDataTrainingStatusEnum];

/**
 * 
 * @export
 * @interface ChatbotInsertDataAllOf
 */
export interface ChatbotInsertDataAllOf {
    /**
     * ID of the chatbot
     * @type {string}
     * @memberof ChatbotInsertDataAllOf
     */
    'id': string;
    /**
     * 
     * @type {Array<ChatbotInsertDataAllOfDocuments>}
     * @memberof ChatbotInsertDataAllOf
     */
    'documents'?: Array<ChatbotInsertDataAllOfDocuments>;
    /**
     * An ISO formatted timestamp
     * @type {string}
     * @memberof ChatbotInsertDataAllOf
     */
    'createdAt': string;
    /**
     * An ISO formatted timestamp
     * @type {string}
     * @memberof ChatbotInsertDataAllOf
     */
    'updatedAt': string;
    /**
     * Current training status of the chatbot
     * @type {string}
     * @memberof ChatbotInsertDataAllOf
     */
    'trainingStatus': ChatbotInsertDataAllOfTrainingStatusEnum;
    /**
     * Progress of training, between 0 and 100
     * @type {number}
     * @memberof ChatbotInsertDataAllOf
     */
    'trainingProgress'?: number;
    /**
     * 
     * @type {Array<ChatbotInsertDataAllOfJobs>}
     * @memberof ChatbotInsertDataAllOf
     */
    'jobs'?: Array<ChatbotInsertDataAllOfJobs>;
}

export const ChatbotInsertDataAllOfTrainingStatusEnum = {
    Pending: 'pending',
    Running: 'running',
    Finished: 'finished',
    Failed: 'failed',
    Aborted: 'aborted'
} as const;

export type ChatbotInsertDataAllOfTrainingStatusEnum = typeof ChatbotInsertDataAllOfTrainingStatusEnum[keyof typeof ChatbotInsertDataAllOfTrainingStatusEnum];

/**
 * 
 * @export
 * @interface ChatbotInsertDataAllOf1
 */
export interface ChatbotInsertDataAllOf1 {
    /**
     * Name of the chatbot
     * @type {string}
     * @memberof ChatbotInsertDataAllOf1
     */
    'name'?: string;
    /**
     * Fallback message of the chatbot
     * @type {string}
     * @memberof ChatbotInsertDataAllOf1
     */
    'fallbackMessage'?: string;
    /**
     * Prompt message of the chatbot
     * @type {string}
     * @memberof ChatbotInsertDataAllOf1
     */
    'prompt'?: string;
    /**
     * Name of the member to assign to the chatbot
     * @type {string}
     * @memberof ChatbotInsertDataAllOf1
     */
    'assignedMember'?: string | null;
    /**
     * Name of the channel to deploy to the chatbot
     * @type {string}
     * @memberof ChatbotInsertDataAllOf1
     */
    'deployedAccount'?: string | null;
    /**
     * Use this chatbot as an AI assistant. Only one chatbot can be used as an AI assistant per team
     * @type {boolean}
     * @memberof ChatbotInsertDataAllOf1
     */
    'useAsAiAssistant'?: boolean;
    /**
     * Whether the chatbot is enabled to send messages to the deployed account
     * @type {boolean}
     * @memberof ChatbotInsertDataAllOf1
     */
    'enableAccountDeployment'?: boolean;
    /**
     * Should generated responses include the source of the data
     * @type {boolean}
     * @memberof ChatbotInsertDataAllOf1
     */
    'includeSourceInResponse'?: boolean;
}
/**
 * 
 * @export
 * @interface ChatbotInsertDataAllOfDocuments
 */
export interface ChatbotInsertDataAllOfDocuments {
    /**
     * URL of the stored data
     * @type {string}
     * @memberof ChatbotInsertDataAllOfDocuments
     */
    'link': string;
    /**
     * ID of the document
     * @type {string}
     * @memberof ChatbotInsertDataAllOfDocuments
     */
    'id': string;
    /**
     * An ISO formatted timestamp
     * @type {string}
     * @memberof ChatbotInsertDataAllOfDocuments
     */
    'createdAt': string;
    /**
     * An ISO formatted timestamp
     * @type {string}
     * @memberof ChatbotInsertDataAllOfDocuments
     */
    'deletedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatbotInsertDataAllOfDocuments
     */
    'fileName'?: string | null;
    /**
     * Number of tokens in the document
     * @type {number}
     * @memberof ChatbotInsertDataAllOfDocuments
     */
    'tokenCount': number;
}
/**
 * 
 * @export
 * @interface ChatbotInsertDataAllOfJobs
 */
export interface ChatbotInsertDataAllOfJobs {
    /**
     * 
     * @type {string}
     * @memberof ChatbotInsertDataAllOfJobs
     */
    'id': string;
    /**
     * - crawl: crawl the URL and extract data - extract: extract data from the URL, expect pdf or docx
     * @type {string}
     * @memberof ChatbotInsertDataAllOfJobs
     */
    'type': ChatbotInsertDataAllOfJobsTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ChatbotInsertDataAllOfJobs
     */
    'link': string;
    /**
     * 
     * @type {string}
     * @memberof ChatbotInsertDataAllOfJobs
     */
    'fileName'?: string;
    /**
     * 
     * @type {number}
     * @memberof ChatbotInsertDataAllOfJobs
     */
    'progress': number;
    /**
     * An ISO formatted timestamp
     * @type {string}
     * @memberof ChatbotInsertDataAllOfJobs
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ChatbotInsertDataAllOfJobs
     */
    'status': ChatbotInsertDataAllOfJobsStatusEnum;
}

export const ChatbotInsertDataAllOfJobsTypeEnum = {
    Crawl: 'crawl',
    Extract: 'extract'
} as const;

export type ChatbotInsertDataAllOfJobsTypeEnum = typeof ChatbotInsertDataAllOfJobsTypeEnum[keyof typeof ChatbotInsertDataAllOfJobsTypeEnum];
export const ChatbotInsertDataAllOfJobsStatusEnum = {
    Pending: 'pending',
    Running: 'running',
    Finished: 'finished',
    Failed: 'failed',
    Aborted: 'aborted'
} as const;

export type ChatbotInsertDataAllOfJobsStatusEnum = typeof ChatbotInsertDataAllOfJobsStatusEnum[keyof typeof ChatbotInsertDataAllOfJobsStatusEnum];

/**
 * 
 * @export
 * @interface ContactDelete
 */
export interface ContactDelete {
    /**
     * 
     * @type {string}
     * @memberof ContactDelete
     */
    'event': ContactDeleteEventEnum;
    /**
     * 
     * @type {Array<ContactDeleteData>}
     * @memberof ContactDelete
     */
    'data': Array<ContactDeleteData>;
}

export const ContactDeleteEventEnum = {
    ContactDelete: 'contact-delete'
} as const;

export type ContactDeleteEventEnum = typeof ContactDeleteEventEnum[keyof typeof ContactDeleteEventEnum];

/**
 * 
 * @export
 * @interface ContactDeleteData
 */
export interface ContactDeleteData {
    /**
     * 
     * @type {string}
     * @memberof ContactDeleteData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ContactDeleteData
     */
    'accountId': string;
}
/**
 * 
 * @export
 * @interface ContactInsert
 */
export interface ContactInsert {
    /**
     * 
     * @type {string}
     * @memberof ContactInsert
     */
    'event': ContactInsertEventEnum;
    /**
     * 
     * @type {Array<ContactInsertData>}
     * @memberof ContactInsert
     */
    'data': Array<ContactInsertData>;
}

export const ContactInsertEventEnum = {
    ContactInsert: 'contact-insert'
} as const;

export type ContactInsertEventEnum = typeof ContactInsertEventEnum[keyof typeof ContactInsertEventEnum];

/**
 * 
 * @export
 * @interface ContactInsertData
 */
export interface ContactInsertData {
    /**
     * 
     * @type {string}
     * @memberof ContactInsertData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ContactInsertData
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof ContactInsertData
     */
    'cursor': string;
    /**
     * 
     * @type {string}
     * @memberof ContactInsertData
     */
    'type': ContactInsertDataTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ContactInsertData
     */
    'name': string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ContactInsertData
     */
    'platformNames': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ContactInsertData
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactInsertData
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactInsertData
     */
    'phoneNumber': string | null;
    /**
     * 
     * @type {string}
     * @memberof ContactInsertData
     */
    'email'?: string | null;
    /**
     * 
     * @type {GroupUpdateDataOwnerImg}
     * @memberof ContactInsertData
     */
    'img'?: GroupUpdateDataOwnerImg | null;
    /**
     * 
     * @type {Array<GroupUpdateDataOwnerTagsInner>}
     * @memberof ContactInsertData
     */
    'tags': Array<GroupUpdateDataOwnerTagsInner>;
    /**
     * 
     * @type {Array<GroupUpdateDataOwnerTicketsInner>}
     * @memberof ContactInsertData
     */
    'tickets'?: Array<GroupUpdateDataOwnerTicketsInner>;
    /**
     * 
     * @type {string}
     * @memberof ContactInsertData
     */
    'assignee'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ContactInsertData
     */
    'assigner'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ContactInsertData
     */
    'assignedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactInsertData
     */
    'firstAssignedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof ContactInsertData
     */
    'messagesSent': number;
    /**
     * 
     * @type {number}
     * @memberof ContactInsertData
     */
    'messagesReceived': number;
}

export const ContactInsertDataTypeEnum = {
    Individual: 'individual',
    Group: 'group',
    Channel: 'channel',
    Broadcast: 'broadcast',
    Post: 'post'
} as const;

export type ContactInsertDataTypeEnum = typeof ContactInsertDataTypeEnum[keyof typeof ContactInsertDataTypeEnum];

/**
 * 
 * @export
 * @interface ContactUpdate
 */
export interface ContactUpdate {
    /**
     * 
     * @type {string}
     * @memberof ContactUpdate
     */
    'event': ContactUpdateEventEnum;
    /**
     * 
     * @type {Array<ContactUpdateData>}
     * @memberof ContactUpdate
     */
    'data': Array<ContactUpdateData>;
}

export const ContactUpdateEventEnum = {
    ContactUpdate: 'contact-update'
} as const;

export type ContactUpdateEventEnum = typeof ContactUpdateEventEnum[keyof typeof ContactUpdateEventEnum];

/**
 * 
 * @export
 * @interface ContactUpdateData
 */
export interface ContactUpdateData {
    /**
     * 
     * @type {string}
     * @memberof ContactUpdateData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ContactUpdateData
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof ContactUpdateData
     */
    'cursor'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactUpdateData
     */
    'type'?: ContactUpdateDataTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ContactUpdateData
     */
    'name'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ContactUpdateData
     */
    'platformNames'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ContactUpdateData
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactUpdateData
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactUpdateData
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ContactUpdateData
     */
    'email'?: string | null;
    /**
     * 
     * @type {GroupUpdateDataOwnerImg}
     * @memberof ContactUpdateData
     */
    'img'?: GroupUpdateDataOwnerImg | null;
    /**
     * 
     * @type {Array<GroupUpdateDataOwnerTagsInner>}
     * @memberof ContactUpdateData
     */
    'tags'?: Array<GroupUpdateDataOwnerTagsInner>;
    /**
     * 
     * @type {Array<GroupUpdateDataOwnerTicketsInner>}
     * @memberof ContactUpdateData
     */
    'tickets'?: Array<GroupUpdateDataOwnerTicketsInner>;
    /**
     * 
     * @type {string}
     * @memberof ContactUpdateData
     */
    'assignee'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ContactUpdateData
     */
    'assigner'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ContactUpdateData
     */
    'assignedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactUpdateData
     */
    'firstAssignedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof ContactUpdateData
     */
    'messagesSent'?: number;
    /**
     * 
     * @type {number}
     * @memberof ContactUpdateData
     */
    'messagesReceived'?: number;
}

export const ContactUpdateDataTypeEnum = {
    Individual: 'individual',
    Group: 'group',
    Channel: 'channel',
    Broadcast: 'broadcast',
    Post: 'post'
} as const;

export type ContactUpdateDataTypeEnum = typeof ContactUpdateDataTypeEnum[keyof typeof ContactUpdateDataTypeEnum];

/**
 * 
 * @export
 * @interface CredittransactionrecordInsert
 */
export interface CredittransactionrecordInsert {
    /**
     * 
     * @type {string}
     * @memberof CredittransactionrecordInsert
     */
    'event': CredittransactionrecordInsertEventEnum;
    /**
     * 
     * @type {Array<CredittransactionrecordInsertData>}
     * @memberof CredittransactionrecordInsert
     */
    'data': Array<CredittransactionrecordInsertData>;
}

export const CredittransactionrecordInsertEventEnum = {
    CredittransactionrecordInsert: 'credittransactionrecord-insert'
} as const;

export type CredittransactionrecordInsertEventEnum = typeof CredittransactionrecordInsertEventEnum[keyof typeof CredittransactionrecordInsertEventEnum];

/**
 * A record of a credit transaction. This could be a gain or a consumption record & is immutable.
 * @export
 * @interface CredittransactionrecordInsertData
 */
export interface CredittransactionrecordInsertData {
    /**
     * ID of a credit consumption. IDs are chronological.
     * @type {string}
     * @memberof CredittransactionrecordInsertData
     */
    'id': string;
    /**
     * Number of units consumed/credited. Positive for credit, negative for consumption.
     * @type {number}
     * @memberof CredittransactionrecordInsertData
     */
    'units': number;
    /**
     * The ID of a user
     * @type {string}
     * @memberof CredittransactionrecordInsertData
     */
    'doneBy': string;
    /**
     * An ISO formatted timestamp
     * @type {string}
     * @memberof CredittransactionrecordInsertData
     */
    'createdAt': string;
    /**
     * The ID of the object that was consumed, or the ID of the gain that created this tx record. (createdAt, objectId) will be enforced to be unique.
     * @type {string}
     * @memberof CredittransactionrecordInsertData
     */
    'objectId': string;
    /**
     * 
     * @type {CredittransactionrecordInsertDataAllOfMetadata}
     * @memberof CredittransactionrecordInsertData
     */
    'metadata'?: CredittransactionrecordInsertDataAllOfMetadata | null;
    /**
     * 
     * @type {string}
     * @memberof CredittransactionrecordInsertData
     */
    'type': string;
    /**
     * 
     * @type {object}
     * @memberof CredittransactionrecordInsertData
     */
    'gain'?: object;
    /**
     * 
     * @type {string}
     * @memberof CredittransactionrecordInsertData
     */
    'teamId'?: string;
    /**
     * ID of a recurring credit consumption
     * @type {string}
     * @memberof CredittransactionrecordInsertData
     */
    'recurringConsumptionId'?: string;
}
/**
 * 
 * @export
 * @interface CredittransactionrecordInsertDataAllOf
 */
export interface CredittransactionrecordInsertDataAllOf {
    /**
     * ID of a credit consumption. IDs are chronological.
     * @type {string}
     * @memberof CredittransactionrecordInsertDataAllOf
     */
    'id': string;
    /**
     * Number of units consumed/credited. Positive for credit, negative for consumption.
     * @type {number}
     * @memberof CredittransactionrecordInsertDataAllOf
     */
    'units': number;
    /**
     * The ID of a user
     * @type {string}
     * @memberof CredittransactionrecordInsertDataAllOf
     */
    'doneBy': string;
    /**
     * An ISO formatted timestamp
     * @type {string}
     * @memberof CredittransactionrecordInsertDataAllOf
     */
    'createdAt': string;
    /**
     * The ID of the object that was consumed, or the ID of the gain that created this tx record. (createdAt, objectId) will be enforced to be unique.
     * @type {string}
     * @memberof CredittransactionrecordInsertDataAllOf
     */
    'objectId': string;
    /**
     * 
     * @type {CredittransactionrecordInsertDataAllOfMetadata}
     * @memberof CredittransactionrecordInsertDataAllOf
     */
    'metadata'?: CredittransactionrecordInsertDataAllOfMetadata | null;
}
/**
 * 
 * @export
 * @interface CredittransactionrecordInsertDataAllOfMetadata
 */
export interface CredittransactionrecordInsertDataAllOfMetadata {
    [key: string]: any;

    /**
     * The redeemed coupon ID
     * @type {string}
     * @memberof CredittransactionrecordInsertDataAllOfMetadata
     */
    'redeemedCouponId'?: string;
    /**
     * 
     * @type {number}
     * @memberof CredittransactionrecordInsertDataAllOfMetadata
     */
    'percentageOff'?: number;
    /**
     * The ID of the coupon
     * @type {string}
     * @memberof CredittransactionrecordInsertDataAllOfMetadata
     */
    'couponId'?: string;
}
/**
 * 
 * @export
 * @interface CrmTicketDelete
 */
export interface CrmTicketDelete {
    /**
     * 
     * @type {string}
     * @memberof CrmTicketDelete
     */
    'event': CrmTicketDeleteEventEnum;
    /**
     * 
     * @type {Array<CrmTicketDeleteData>}
     * @memberof CrmTicketDelete
     */
    'data': Array<CrmTicketDeleteData>;
}

export const CrmTicketDeleteEventEnum = {
    CrmTicketDelete: 'crm-ticket-delete'
} as const;

export type CrmTicketDeleteEventEnum = typeof CrmTicketDeleteEventEnum[keyof typeof CrmTicketDeleteEventEnum];

/**
 * 
 * @export
 * @interface CrmTicketDeleteData
 */
export interface CrmTicketDeleteData {
    /**
     * 
     * @type {string}
     * @memberof CrmTicketDeleteData
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface CrmTicketInsert
 */
export interface CrmTicketInsert {
    /**
     * 
     * @type {string}
     * @memberof CrmTicketInsert
     */
    'event': CrmTicketInsertEventEnum;
    /**
     * 
     * @type {Array<CrmTicketInsertData>}
     * @memberof CrmTicketInsert
     */
    'data': Array<CrmTicketInsertData>;
}

export const CrmTicketInsertEventEnum = {
    CrmTicketInsert: 'crm-ticket-insert'
} as const;

export type CrmTicketInsertEventEnum = typeof CrmTicketInsertEventEnum[keyof typeof CrmTicketInsertEventEnum];

/**
 * 
 * @export
 * @interface CrmTicketInsertData
 */
export interface CrmTicketInsertData {
    /**
     * 
     * @type {string}
     * @memberof CrmTicketInsertData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CrmTicketInsertData
     */
    'boardId': string;
    /**
     * 
     * @type {string}
     * @memberof CrmTicketInsertData
     */
    'stageId': string;
    /**
     * 
     * @type {string}
     * @memberof CrmTicketInsertData
     */
    'prevStageId'?: string;
    /**
     * 
     * @type {number}
     * @memberof CrmTicketInsertData
     */
    'order': number;
    /**
     * 
     * @type {string}
     * @memberof CrmTicketInsertData
     */
    'title': string;
    /**
     * 
     * @type {CrmTicketInsertDataContactId}
     * @memberof CrmTicketInsertData
     */
    'contactId': CrmTicketInsertDataContactId;
    /**
     * 
     * @type {GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadata}
     * @memberof CrmTicketInsertData
     */
    'createMetadata': GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadata;
    /**
     * 
     * @type {GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadata}
     * @memberof CrmTicketInsertData
     */
    'updateMetadata': GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadata;
    /**
     * 
     * @type {GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadata}
     * @memberof CrmTicketInsertData
     */
    'resolvedMetadata'?: GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadata;
    /**
     * 
     * @type {CrmTicketInsertDataTimer}
     * @memberof CrmTicketInsertData
     */
    'timer'?: CrmTicketInsertDataTimer;
}
/**
 * 
 * @export
 * @interface CrmTicketInsertDataContactId
 */
export interface CrmTicketInsertDataContactId {
    /**
     * 
     * @type {string}
     * @memberof CrmTicketInsertDataContactId
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CrmTicketInsertDataContactId
     */
    'accountId': string;
}
/**
 * 
 * @export
 * @interface CrmTicketInsertDataTimer
 */
export interface CrmTicketInsertDataTimer {
    /**
     * 
     * @type {GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadata}
     * @memberof CrmTicketInsertDataTimer
     */
    'startMetadata': GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadata;
    /**
     * 
     * @type {GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadata}
     * @memberof CrmTicketInsertDataTimer
     */
    'stopMetadata'?: GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadata;
    /**
     * 
     * @type {string}
     * @memberof CrmTicketInsertDataTimer
     */
    'endsAt': string;
    /**
     * 
     * @type {string}
     * @memberof CrmTicketInsertDataTimer
     */
    'status': CrmTicketInsertDataTimerStatusEnum;
}

export const CrmTicketInsertDataTimerStatusEnum = {
    Running: 'running',
    Stopped: 'stopped',
    Ended: 'ended'
} as const;

export type CrmTicketInsertDataTimerStatusEnum = typeof CrmTicketInsertDataTimerStatusEnum[keyof typeof CrmTicketInsertDataTimerStatusEnum];

/**
 * 
 * @export
 * @interface CrmTicketUpdate
 */
export interface CrmTicketUpdate {
    /**
     * 
     * @type {string}
     * @memberof CrmTicketUpdate
     */
    'event': CrmTicketUpdateEventEnum;
    /**
     * 
     * @type {Array<CrmTicketUpdateData>}
     * @memberof CrmTicketUpdate
     */
    'data': Array<CrmTicketUpdateData>;
}

export const CrmTicketUpdateEventEnum = {
    CrmTicketUpdate: 'crm-ticket-update'
} as const;

export type CrmTicketUpdateEventEnum = typeof CrmTicketUpdateEventEnum[keyof typeof CrmTicketUpdateEventEnum];

/**
 * 
 * @export
 * @interface CrmTicketUpdateData
 */
export interface CrmTicketUpdateData {
    /**
     * 
     * @type {string}
     * @memberof CrmTicketUpdateData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CrmTicketUpdateData
     */
    'boardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CrmTicketUpdateData
     */
    'stageId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CrmTicketUpdateData
     */
    'prevStageId'?: string;
    /**
     * 
     * @type {number}
     * @memberof CrmTicketUpdateData
     */
    'order'?: number;
    /**
     * 
     * @type {string}
     * @memberof CrmTicketUpdateData
     */
    'title'?: string;
    /**
     * 
     * @type {CrmTicketInsertDataContactId}
     * @memberof CrmTicketUpdateData
     */
    'contactId'?: CrmTicketInsertDataContactId;
    /**
     * 
     * @type {GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadata}
     * @memberof CrmTicketUpdateData
     */
    'createMetadata'?: GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadata;
    /**
     * 
     * @type {GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadata}
     * @memberof CrmTicketUpdateData
     */
    'updateMetadata'?: GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadata;
    /**
     * 
     * @type {GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadata}
     * @memberof CrmTicketUpdateData
     */
    'resolvedMetadata'?: GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadata;
    /**
     * 
     * @type {CrmTicketInsertDataTimer}
     * @memberof CrmTicketUpdateData
     */
    'timer'?: CrmTicketInsertDataTimer;
}
/**
 * 
 * @export
 * @interface CustomerCreditsLevelUpdate
 */
export interface CustomerCreditsLevelUpdate {
    /**
     * 
     * @type {string}
     * @memberof CustomerCreditsLevelUpdate
     */
    'event': CustomerCreditsLevelUpdateEventEnum;
    /**
     * 
     * @type {Array<CustomerCreditsLevelUpdateData>}
     * @memberof CustomerCreditsLevelUpdate
     */
    'data': Array<CustomerCreditsLevelUpdateData>;
}

export const CustomerCreditsLevelUpdateEventEnum = {
    CustomerCreditsLevelUpdate: 'customer-credits-level-update'
} as const;

export type CustomerCreditsLevelUpdateEventEnum = typeof CustomerCreditsLevelUpdateEventEnum[keyof typeof CustomerCreditsLevelUpdateEventEnum];

/**
 * 
 * @export
 * @interface CustomerCreditsLevelUpdateData
 */
export interface CustomerCreditsLevelUpdateData {
    /**
     * 
     * @type {string}
     * @memberof CustomerCreditsLevelUpdateData
     */
    'teamId': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerCreditsLevelUpdateData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerCreditsLevelUpdateData
     */
    'creditLevelStatus': CustomerCreditsLevelUpdateDataCreditLevelStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof CustomerCreditsLevelUpdateData
     */
    'unitsAvailable': number;
}

export const CustomerCreditsLevelUpdateDataCreditLevelStatusEnum = {
    Danger: 'danger',
    Warning: 'warning'
} as const;

export type CustomerCreditsLevelUpdateDataCreditLevelStatusEnum = typeof CustomerCreditsLevelUpdateDataCreditLevelStatusEnum[keyof typeof CustomerCreditsLevelUpdateDataCreditLevelStatusEnum];

/**
 * 
 * @export
 * @interface DashboardDelete
 */
export interface DashboardDelete {
    /**
     * 
     * @type {string}
     * @memberof DashboardDelete
     */
    'event': DashboardDeleteEventEnum;
    /**
     * 
     * @type {Array<DashboardDeleteData>}
     * @memberof DashboardDelete
     */
    'data': Array<DashboardDeleteData>;
}

export const DashboardDeleteEventEnum = {
    DashboardDelete: 'dashboard-delete'
} as const;

export type DashboardDeleteEventEnum = typeof DashboardDeleteEventEnum[keyof typeof DashboardDeleteEventEnum];

/**
 * 
 * @export
 * @interface DashboardDeleteData
 */
export interface DashboardDeleteData {
    /**
     * 
     * @type {string}
     * @memberof DashboardDeleteData
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface DashboardInsert
 */
export interface DashboardInsert {
    /**
     * 
     * @type {string}
     * @memberof DashboardInsert
     */
    'event': DashboardInsertEventEnum;
    /**
     * 
     * @type {Array<DashboardInsertData>}
     * @memberof DashboardInsert
     */
    'data': Array<DashboardInsertData>;
}

export const DashboardInsertEventEnum = {
    DashboardInsert: 'dashboard-insert'
} as const;

export type DashboardInsertEventEnum = typeof DashboardInsertEventEnum[keyof typeof DashboardInsertEventEnum];

/**
 * 
 * @export
 * @interface DashboardInsertData
 */
export interface DashboardInsertData {
    /**
     * 
     * @type {string}
     * @memberof DashboardInsertData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof DashboardInsertData
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof DashboardInsertData
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof DashboardInsertData
     */
    'teamId': string;
    /**
     * 
     * @type {string}
     * @memberof DashboardInsertData
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof DashboardInsertData
     */
    'updatedAt': string;
    /**
     * 
     * @type {DashboardInsertDataSchema}
     * @memberof DashboardInsertData
     */
    'schema': DashboardInsertDataSchema;
    /**
     * 
     * @type {DashboardInsertDataPermissions}
     * @memberof DashboardInsertData
     */
    'permissions'?: DashboardInsertDataPermissions;
}
/**
 * 
 * @export
 * @interface DashboardInsertDataPermissions
 */
export interface DashboardInsertDataPermissions {
    /**
     * 
     * @type {string}
     * @memberof DashboardInsertDataPermissions
     */
    'allMembers'?: DashboardInsertDataPermissionsAllMembersEnum;
    /**
     * 
     * @type {Array<DashboardInsertDataPermissionsUsersInner>}
     * @memberof DashboardInsertDataPermissions
     */
    'users'?: Array<DashboardInsertDataPermissionsUsersInner>;
}

export const DashboardInsertDataPermissionsAllMembersEnum = {
    Lvl1View: 'lvl1_view',
    Lvl2Edit: 'lvl2_edit',
    Null: null as null
} as const;

export type DashboardInsertDataPermissionsAllMembersEnum = typeof DashboardInsertDataPermissionsAllMembersEnum[keyof typeof DashboardInsertDataPermissionsAllMembersEnum];

/**
 * 
 * @export
 * @interface DashboardInsertDataPermissionsUsersInner
 */
export interface DashboardInsertDataPermissionsUsersInner {
    /**
     * 
     * @type {string}
     * @memberof DashboardInsertDataPermissionsUsersInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof DashboardInsertDataPermissionsUsersInner
     */
    'access': DashboardInsertDataPermissionsUsersInnerAccessEnum;
}

export const DashboardInsertDataPermissionsUsersInnerAccessEnum = {
    Lvl1View: 'lvl1_view',
    Lvl2Edit: 'lvl2_edit'
} as const;

export type DashboardInsertDataPermissionsUsersInnerAccessEnum = typeof DashboardInsertDataPermissionsUsersInnerAccessEnum[keyof typeof DashboardInsertDataPermissionsUsersInnerAccessEnum];

/**
 * 
 * @export
 * @interface DashboardInsertDataSchema
 */
export interface DashboardInsertDataSchema {
    /**
     * 
     * @type {string}
     * @memberof DashboardInsertDataSchema
     */
    'version': DashboardInsertDataSchemaVersionEnum;
    /**
     * 
     * @type {Array<DashboardInsertDataSchemaItemsInner>}
     * @memberof DashboardInsertDataSchema
     */
    'items': Array<DashboardInsertDataSchemaItemsInner>;
}

export const DashboardInsertDataSchemaVersionEnum = {
    2: '2'
} as const;

export type DashboardInsertDataSchemaVersionEnum = typeof DashboardInsertDataSchemaVersionEnum[keyof typeof DashboardInsertDataSchemaVersionEnum];

/**
 * @type DashboardInsertDataSchemaItemsInner
 * @export
 */
export type DashboardInsertDataSchemaItemsInner = DashboardInsertDataSchemaItemsInnerOneOf | DashboardInsertDataSchemaItemsInnerOneOf1;

/**
 * 
 * @export
 * @interface DashboardInsertDataSchemaItemsInnerOneOf
 */
export interface DashboardInsertDataSchemaItemsInnerOneOf {
    /**
     * 
     * @type {string}
     * @memberof DashboardInsertDataSchemaItemsInnerOneOf
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof DashboardInsertDataSchemaItemsInnerOneOf
     */
    'visualizationType': DashboardInsertDataSchemaItemsInnerOneOfVisualizationTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof DashboardInsertDataSchemaItemsInnerOneOf
     */
    'metricId': string;
    /**
     * 
     * @type {string}
     * @memberof DashboardInsertDataSchemaItemsInnerOneOf
     */
    'name': string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof DashboardInsertDataSchemaItemsInnerOneOf
     */
    'filter'?: { [key: string]: any; };
    /**
     * 
     * @type {string}
     * @memberof DashboardInsertDataSchemaItemsInnerOneOf
     */
    'breakdown'?: string;
    /**
     * Hide the default value in the breakdown.
     * @type {boolean}
     * @memberof DashboardInsertDataSchemaItemsInnerOneOf
     */
    'hideDefaultInBreakdown'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DashboardInsertDataSchemaItemsInnerOneOf
     */
    'includePreviousPeriod'?: boolean;
}

export const DashboardInsertDataSchemaItemsInnerOneOfVisualizationTypeEnum = {
    Histogram: 'histogram',
    PieChart: 'pie-chart',
    Table: 'table',
    Snapshot: 'snapshot',
    SimpleSnapshot: 'simple-snapshot'
} as const;

export type DashboardInsertDataSchemaItemsInnerOneOfVisualizationTypeEnum = typeof DashboardInsertDataSchemaItemsInnerOneOfVisualizationTypeEnum[keyof typeof DashboardInsertDataSchemaItemsInnerOneOfVisualizationTypeEnum];

/**
 * 
 * @export
 * @interface DashboardInsertDataSchemaItemsInnerOneOf1
 */
export interface DashboardInsertDataSchemaItemsInnerOneOf1 {
    /**
     * 
     * @type {string}
     * @memberof DashboardInsertDataSchemaItemsInnerOneOf1
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof DashboardInsertDataSchemaItemsInnerOneOf1
     */
    'title': string;
}
/**
 * 
 * @export
 * @interface DashboardUpdate
 */
export interface DashboardUpdate {
    /**
     * 
     * @type {string}
     * @memberof DashboardUpdate
     */
    'event': DashboardUpdateEventEnum;
    /**
     * 
     * @type {Array<DashboardUpdateData>}
     * @memberof DashboardUpdate
     */
    'data': Array<DashboardUpdateData>;
}

export const DashboardUpdateEventEnum = {
    DashboardUpdate: 'dashboard-update'
} as const;

export type DashboardUpdateEventEnum = typeof DashboardUpdateEventEnum[keyof typeof DashboardUpdateEventEnum];

/**
 * 
 * @export
 * @interface DashboardUpdateData
 */
export interface DashboardUpdateData {
    /**
     * 
     * @type {string}
     * @memberof DashboardUpdateData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof DashboardUpdateData
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DashboardUpdateData
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DashboardUpdateData
     */
    'teamId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DashboardUpdateData
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof DashboardUpdateData
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {DashboardInsertDataSchema}
     * @memberof DashboardUpdateData
     */
    'schema'?: DashboardInsertDataSchema;
    /**
     * 
     * @type {DashboardInsertDataPermissions}
     * @memberof DashboardUpdateData
     */
    'permissions'?: DashboardInsertDataPermissions;
}
/**
 * 
 * @export
 * @interface DashboardwithdataInsertData
 */
export interface DashboardwithdataInsertData {
    /**
     * 
     * @type {string}
     * @memberof DashboardwithdataInsertData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof DashboardwithdataInsertData
     */
    'name': string;
    /**
     * An ISO formatted timestamp
     * @type {string}
     * @memberof DashboardwithdataInsertData
     */
    'createdAt': string;
    /**
     * An ISO formatted timestamp
     * @type {string}
     * @memberof DashboardwithdataInsertData
     */
    'updatedAt': string;
    /**
     * 
     * @type {DashboardwithdataInsertDataAllOfSchema}
     * @memberof DashboardwithdataInsertData
     */
    'schema': DashboardwithdataInsertDataAllOfSchema;
    /**
     * 
     * @type {DashboardwithdataInsertDataAllOfPermissions}
     * @memberof DashboardwithdataInsertData
     */
    'permissions'?: DashboardwithdataInsertDataAllOfPermissions;
    /**
     * 
     * @type {Array<DashboardwithdataInsertDataAllOf1DataV2Inner>}
     * @memberof DashboardwithdataInsertData
     */
    'dataV2': Array<DashboardwithdataInsertDataAllOf1DataV2Inner>;
}
/**
 * 
 * @export
 * @interface DashboardwithdataInsertDataAllOf
 */
export interface DashboardwithdataInsertDataAllOf {
    /**
     * 
     * @type {string}
     * @memberof DashboardwithdataInsertDataAllOf
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof DashboardwithdataInsertDataAllOf
     */
    'name': string;
    /**
     * An ISO formatted timestamp
     * @type {string}
     * @memberof DashboardwithdataInsertDataAllOf
     */
    'createdAt': string;
    /**
     * An ISO formatted timestamp
     * @type {string}
     * @memberof DashboardwithdataInsertDataAllOf
     */
    'updatedAt': string;
    /**
     * 
     * @type {DashboardwithdataInsertDataAllOfSchema}
     * @memberof DashboardwithdataInsertDataAllOf
     */
    'schema': DashboardwithdataInsertDataAllOfSchema;
    /**
     * 
     * @type {DashboardwithdataInsertDataAllOfPermissions}
     * @memberof DashboardwithdataInsertDataAllOf
     */
    'permissions'?: DashboardwithdataInsertDataAllOfPermissions;
}
/**
 * 
 * @export
 * @interface DashboardwithdataInsertDataAllOf1
 */
export interface DashboardwithdataInsertDataAllOf1 {
    /**
     * 
     * @type {string}
     * @memberof DashboardwithdataInsertDataAllOf1
     */
    'id': string;
    /**
     * 
     * @type {Array<DashboardwithdataInsertDataAllOf1DataV2Inner>}
     * @memberof DashboardwithdataInsertDataAllOf1
     */
    'dataV2': Array<DashboardwithdataInsertDataAllOf1DataV2Inner>;
}
/**
 * @type DashboardwithdataInsertDataAllOf1DataV2Inner
 * @export
 */
export type DashboardwithdataInsertDataAllOf1DataV2Inner = DashboardwithdataInsertDataAllOf1DataV2InnerOneOf | DashboardwithdataInsertDataAllOf1DataV2InnerOneOf1;

/**
 * 
 * @export
 * @interface DashboardwithdataInsertDataAllOf1DataV2InnerOneOf
 */
export interface DashboardwithdataInsertDataAllOf1DataV2InnerOneOf {
    /**
     * 
     * @type {string}
     * @memberof DashboardwithdataInsertDataAllOf1DataV2InnerOneOf
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof DashboardwithdataInsertDataAllOf1DataV2InnerOneOf
     */
    'visualizationType': DashboardwithdataInsertDataAllOf1DataV2InnerOneOfVisualizationTypeEnum;
    /**
     * 
     * @type {{ [key: string]: Array<DashboardwithdataInsertDataAllOf1DataV2InnerOneOfLinesValueInner>; }}
     * @memberof DashboardwithdataInsertDataAllOf1DataV2InnerOneOf
     */
    'lines': { [key: string]: Array<DashboardwithdataInsertDataAllOf1DataV2InnerOneOfLinesValueInner>; };
    /**
     * 
     * @type {{ [key: string]: Array<DashboardwithdataInsertDataAllOf1DataV2InnerOneOfLinesValueInner>; }}
     * @memberof DashboardwithdataInsertDataAllOf1DataV2InnerOneOf
     */
    'previousPeriodLines'?: { [key: string]: Array<DashboardwithdataInsertDataAllOf1DataV2InnerOneOfLinesValueInner>; };
}

export const DashboardwithdataInsertDataAllOf1DataV2InnerOneOfVisualizationTypeEnum = {
    Histogram: 'histogram'
} as const;

export type DashboardwithdataInsertDataAllOf1DataV2InnerOneOfVisualizationTypeEnum = typeof DashboardwithdataInsertDataAllOf1DataV2InnerOneOfVisualizationTypeEnum[keyof typeof DashboardwithdataInsertDataAllOf1DataV2InnerOneOfVisualizationTypeEnum];

/**
 * 
 * @export
 * @interface DashboardwithdataInsertDataAllOf1DataV2InnerOneOf1
 */
export interface DashboardwithdataInsertDataAllOf1DataV2InnerOneOf1 {
    /**
     * 
     * @type {string}
     * @memberof DashboardwithdataInsertDataAllOf1DataV2InnerOneOf1
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof DashboardwithdataInsertDataAllOf1DataV2InnerOneOf1
     */
    'visualizationType': DashboardwithdataInsertDataAllOf1DataV2InnerOneOf1VisualizationTypeEnum;
    /**
     * 
     * @type {{ [key: string]: DashboardwithdataInsertDataAllOf1DataV2InnerOneOfLinesValueInnerAllOf1; }}
     * @memberof DashboardwithdataInsertDataAllOf1DataV2InnerOneOf1
     */
    'values': { [key: string]: DashboardwithdataInsertDataAllOf1DataV2InnerOneOfLinesValueInnerAllOf1; };
    /**
     * 
     * @type {{ [key: string]: DashboardwithdataInsertDataAllOf1DataV2InnerOneOfLinesValueInnerAllOf1; }}
     * @memberof DashboardwithdataInsertDataAllOf1DataV2InnerOneOf1
     */
    'previousPeriodValues'?: { [key: string]: DashboardwithdataInsertDataAllOf1DataV2InnerOneOfLinesValueInnerAllOf1; };
}

export const DashboardwithdataInsertDataAllOf1DataV2InnerOneOf1VisualizationTypeEnum = {
    Total: 'total'
} as const;

export type DashboardwithdataInsertDataAllOf1DataV2InnerOneOf1VisualizationTypeEnum = typeof DashboardwithdataInsertDataAllOf1DataV2InnerOneOf1VisualizationTypeEnum[keyof typeof DashboardwithdataInsertDataAllOf1DataV2InnerOneOf1VisualizationTypeEnum];

/**
 * 
 * @export
 * @interface DashboardwithdataInsertDataAllOf1DataV2InnerOneOfLinesValueInner
 */
export interface DashboardwithdataInsertDataAllOf1DataV2InnerOneOfLinesValueInner {
    /**
     * An ISO formatted timestamp
     * @type {string}
     * @memberof DashboardwithdataInsertDataAllOf1DataV2InnerOneOfLinesValueInner
     */
    'timestamp': string;
    /**
     * 
     * @type {number}
     * @memberof DashboardwithdataInsertDataAllOf1DataV2InnerOneOfLinesValueInner
     */
    'value': number;
    /**
     * Number of data points in this metric. Only present for when the value is not a count 
     * @type {number}
     * @memberof DashboardwithdataInsertDataAllOf1DataV2InnerOneOfLinesValueInner
     */
    'count'?: number;
}
/**
 * 
 * @export
 * @interface DashboardwithdataInsertDataAllOf1DataV2InnerOneOfLinesValueInnerAllOf
 */
export interface DashboardwithdataInsertDataAllOf1DataV2InnerOneOfLinesValueInnerAllOf {
    /**
     * An ISO formatted timestamp
     * @type {string}
     * @memberof DashboardwithdataInsertDataAllOf1DataV2InnerOneOfLinesValueInnerAllOf
     */
    'timestamp': string;
}
/**
 * 
 * @export
 * @interface DashboardwithdataInsertDataAllOf1DataV2InnerOneOfLinesValueInnerAllOf1
 */
export interface DashboardwithdataInsertDataAllOf1DataV2InnerOneOfLinesValueInnerAllOf1 {
    /**
     * 
     * @type {number}
     * @memberof DashboardwithdataInsertDataAllOf1DataV2InnerOneOfLinesValueInnerAllOf1
     */
    'value': number;
    /**
     * Number of data points in this metric. Only present for when the value is not a count 
     * @type {number}
     * @memberof DashboardwithdataInsertDataAllOf1DataV2InnerOneOfLinesValueInnerAllOf1
     */
    'count'?: number;
}
/**
 * 
 * @export
 * @interface DashboardwithdataInsertDataAllOfPermissions
 */
export interface DashboardwithdataInsertDataAllOfPermissions {
    /**
     * 
     * @type {Array<DashboardwithdataInsertDataAllOfPermissionsAllMembers>}
     * @memberof DashboardwithdataInsertDataAllOfPermissions
     */
    'allMembers'?: Array<DashboardwithdataInsertDataAllOfPermissionsAllMembers>;
    /**
     * 
     * @type {Array<DashboardwithdataInsertDataAllOfPermissionsAllMembers>}
     * @memberof DashboardwithdataInsertDataAllOfPermissions
     */
    'users'?: Array<DashboardwithdataInsertDataAllOfPermissionsAllMembers>;
}
/**
 * 
 * @export
 * @interface DashboardwithdataInsertDataAllOfPermissionsAllMembers
 */
export interface DashboardwithdataInsertDataAllOfPermissionsAllMembers {
    /**
     * 
     * @type {string}
     * @memberof DashboardwithdataInsertDataAllOfPermissionsAllMembers
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof DashboardwithdataInsertDataAllOfPermissionsAllMembers
     */
    'access': DashboardwithdataInsertDataAllOfPermissionsAllMembersAccessEnum;
}

export const DashboardwithdataInsertDataAllOfPermissionsAllMembersAccessEnum = {
    Lvl1View: 'lvl1_view',
    Lvl2Edit: 'lvl2_edit'
} as const;

export type DashboardwithdataInsertDataAllOfPermissionsAllMembersAccessEnum = typeof DashboardwithdataInsertDataAllOfPermissionsAllMembersAccessEnum[keyof typeof DashboardwithdataInsertDataAllOfPermissionsAllMembersAccessEnum];

/**
 * 
 * @export
 * @interface DashboardwithdataInsertDataAllOfSchema
 */
export interface DashboardwithdataInsertDataAllOfSchema {
    /**
     * 
     * @type {string}
     * @memberof DashboardwithdataInsertDataAllOfSchema
     */
    'version': DashboardwithdataInsertDataAllOfSchemaVersionEnum;
    /**
     * 
     * @type {Array<DashboardwithdataInsertDataAllOfSchemaItems>}
     * @memberof DashboardwithdataInsertDataAllOfSchema
     */
    'items': Array<DashboardwithdataInsertDataAllOfSchemaItems>;
}

export const DashboardwithdataInsertDataAllOfSchemaVersionEnum = {
    2: '2'
} as const;

export type DashboardwithdataInsertDataAllOfSchemaVersionEnum = typeof DashboardwithdataInsertDataAllOfSchemaVersionEnum[keyof typeof DashboardwithdataInsertDataAllOfSchemaVersionEnum];

/**
 * 
 * @export
 * @interface DashboardwithdataInsertDataAllOfSchemaItems
 */
export interface DashboardwithdataInsertDataAllOfSchemaItems {
    /**
     * 
     * @type {string}
     * @memberof DashboardwithdataInsertDataAllOfSchemaItems
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof DashboardwithdataInsertDataAllOfSchemaItems
     */
    'visualizationType': DashboardwithdataInsertDataAllOfSchemaItemsVisualizationTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof DashboardwithdataInsertDataAllOfSchemaItems
     */
    'metricId': string;
    /**
     * 
     * @type {string}
     * @memberof DashboardwithdataInsertDataAllOfSchemaItems
     */
    'name': string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof DashboardwithdataInsertDataAllOfSchemaItems
     */
    'filter'?: { [key: string]: any; };
    /**
     * 
     * @type {string}
     * @memberof DashboardwithdataInsertDataAllOfSchemaItems
     */
    'breakdown'?: string;
    /**
     * Hide the default value in the breakdown.
     * @type {boolean}
     * @memberof DashboardwithdataInsertDataAllOfSchemaItems
     */
    'hideDefaultInBreakdown'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DashboardwithdataInsertDataAllOfSchemaItems
     */
    'includePreviousPeriod'?: boolean;
}

export const DashboardwithdataInsertDataAllOfSchemaItemsVisualizationTypeEnum = {
    Histogram: 'histogram',
    PieChart: 'pie-chart',
    Table: 'table',
    Snapshot: 'snapshot'
} as const;

export type DashboardwithdataInsertDataAllOfSchemaItemsVisualizationTypeEnum = typeof DashboardwithdataInsertDataAllOfSchemaItemsVisualizationTypeEnum[keyof typeof DashboardwithdataInsertDataAllOfSchemaItemsVisualizationTypeEnum];

/**
 * 
 * @export
 * @enum {string}
 */

export const EventName = {
    GroupUpdate: 'group-update',
    PresenceUpdate: 'presence-update',
    OrderInsert: 'order-insert',
    ActionExecute: 'action-execute',
    FewMessagesLeft: 'few-messages-left',
    StaleAccountNotification: 'stale-account-notification',
    CustomerCreditsLevelUpdate: 'customer-credits-level-update',
    PushNotification: 'push-notification',
    CampaignInsert: 'campaign-insert',
    CredittransactionrecordInsert: 'credittransactionrecord-insert',
    KeywordbasedactionInsert: 'keywordbasedaction-insert',
    ChatbotInsert: 'chatbot-insert',
    PaymentintegrationInsert: 'paymentintegration-insert',
    ShopproductInsert: 'shopproduct-insert',
    TeammemberLogout: 'teammember-logout',
    AiCreditUse: 'ai-credit-use',
    DashboardInsert: 'dashboard-insert',
    DashboardUpdate: 'dashboard-update',
    DashboardDelete: 'dashboard-delete',
    ContactInsert: 'contact-insert',
    ContactUpdate: 'contact-update',
    ContactDelete: 'contact-delete',
    ChatInsert: 'chat-insert',
    ChatUpdate: 'chat-update',
    ChatDelete: 'chat-delete',
    TagInsert: 'tag-insert',
    TagUpdate: 'tag-update',
    TagDelete: 'tag-delete',
    AccountInsert: 'account-insert',
    AccountUpdate: 'account-update',
    AccountDelete: 'account-delete',
    MessageInsert: 'message-insert',
    MessageUpdate: 'message-update',
    MessageDelete: 'message-delete',
    UserInsert: 'user-insert',
    UserUpdate: 'user-update',
    UserDelete: 'user-delete',
    TeamInsert: 'team-insert',
    TeamUpdate: 'team-update',
    TeamDelete: 'team-delete',
    TeammemberInsert: 'teammember-insert',
    TeammemberUpdate: 'teammember-update',
    TeammemberDelete: 'teammember-delete',
    PlatformproductInsert: 'platformproduct-insert',
    PlatformproductUpdate: 'platformproduct-update',
    PlatformproductDelete: 'platformproduct-delete',
    TrackingInsert: 'tracking-insert',
    TrackingUpdate: 'tracking-update',
    TrackingDelete: 'tracking-delete',
    BotInsert: 'bot-insert',
    BotUpdate: 'bot-update',
    BotDelete: 'bot-delete',
    CrmTicketInsert: 'crm-ticket-insert',
    CrmTicketUpdate: 'crm-ticket-update',
    CrmTicketDelete: 'crm-ticket-delete',
    CallInsert: 'call-insert',
    CallUpdate: 'call-update',
    CallDelete: 'call-delete',
    CallchannelInsert: 'callchannel-insert',
    CallchannelUpdate: 'callchannel-update',
    CallchannelDelete: 'callchannel-delete'
} as const;

export type EventName = typeof EventName[keyof typeof EventName];


/**
 * 
 * @export
 * @interface EventSubscription
 */
export interface EventSubscription {
    /**
     * The subscription ID
     * @type {string}
     * @memberof EventSubscription
     */
    'id': string;
    /**
     * Whether the subscription is enabled
     * @type {boolean}
     * @memberof EventSubscription
     */
    'enabled': boolean;
    /**
     * The owner id the connection
     * @type {string}
     * @memberof EventSubscription
     */
    'ownerId'?: string;
    /**
     * The User ID that created the subscription
     * @type {string}
     * @memberof EventSubscription
     */
    'userId': string;
    /**
     * An ISO formatted timestamp
     * @type {string}
     * @memberof EventSubscription
     */
    'createdAt'?: string;
    /**
     * the events to subscribe to
     * @type {Array<EventName>}
     * @memberof EventSubscription
     */
    'events': Array<EventName>;
    /**
     * the IM accounts to receive events from
     * @type {Array<string>}
     * @memberof EventSubscription
     */
    'accounts'?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof EventSubscription
     */
    'schema'?: { [key: string]: any; } | null;
    /**
     * 
     * @type {EventSubscriptionType}
     * @memberof EventSubscription
     */
    'type': EventSubscriptionType;
    /**
     * Web hook url to fire to
     * @type {string}
     * @memberof EventSubscription
     */
    'url'?: string;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const EventSubscriptionType = {
    Webhook: 'webhook',
    Websocket: 'websocket'
} as const;

export type EventSubscriptionType = typeof EventSubscriptionType[keyof typeof EventSubscriptionType];


/**
 * @type EventWebhookData
 * The request body you\'ll receive in a webhook
 * @export
 */
export type EventWebhookData = AccountDelete | AccountInsert | AccountUpdate | ActionExecute | AiCreditUse | BotDelete | BotInsert | BotUpdate | CallDelete | CallInsert | CallUpdate | CallchannelDelete | CallchannelInsert | CallchannelUpdate | CampaignInsert | ChatDelete | ChatInsert | ChatUpdate | ChatbotInsert | ContactDelete | ContactInsert | ContactUpdate | CredittransactionrecordInsert | CrmTicketDelete | CrmTicketInsert | CrmTicketUpdate | CustomerCreditsLevelUpdate | DashboardDelete | DashboardInsert | DashboardUpdate | FewMessagesLeft | GroupUpdate | KeywordbasedactionInsert | MessageDelete | MessageInsert | MessageUpdate | OrderInsert | PaymentintegrationInsert | PlatformproductDelete | PlatformproductInsert | PlatformproductUpdate | PresenceUpdate | PushNotification | ShopproductInsert | StaleAccountNotification | TagDelete | TagInsert | TagUpdate | TeamDelete | TeamInsert | TeamUpdate | TeammemberDelete | TeammemberInsert | TeammemberLogout | TeammemberUpdate | TrackingDelete | TrackingInsert | TrackingUpdate | UserDelete | UserInsert | UserUpdate;

/**
 * 
 * @export
 * @interface FewMessagesLeft
 */
export interface FewMessagesLeft {
    /**
     * 
     * @type {string}
     * @memberof FewMessagesLeft
     */
    'event': FewMessagesLeftEventEnum;
    /**
     * 
     * @type {Array<FewMessagesLeftData>}
     * @memberof FewMessagesLeft
     */
    'data': Array<FewMessagesLeftData>;
}

export const FewMessagesLeftEventEnum = {
    FewMessagesLeft: 'few-messages-left'
} as const;

export type FewMessagesLeftEventEnum = typeof FewMessagesLeftEventEnum[keyof typeof FewMessagesLeftEventEnum];

/**
 * 
 * @export
 * @interface FewMessagesLeftData
 */
export interface FewMessagesLeftData {
    /**
     * 
     * @type {number}
     * @memberof FewMessagesLeftData
     */
    'messagesLeft': number;
}
/**
 * 
 * @export
 * @interface GroupUpdate
 */
export interface GroupUpdate {
    /**
     * 
     * @type {string}
     * @memberof GroupUpdate
     */
    'event': GroupUpdateEventEnum;
    /**
     * 
     * @type {Array<GroupUpdateData>}
     * @memberof GroupUpdate
     */
    'data': Array<GroupUpdateData>;
}

export const GroupUpdateEventEnum = {
    GroupUpdate: 'group-update'
} as const;

export type GroupUpdateEventEnum = typeof GroupUpdateEventEnum[keyof typeof GroupUpdateEventEnum];

/**
 * 
 * @export
 * @interface GroupUpdateData
 */
export interface GroupUpdateData {
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateData
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateData
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateData
     */
    'ownerId'?: string | null;
    /**
     * 
     * @type {GroupUpdateDataOwner}
     * @memberof GroupUpdateData
     */
    'owner'?: GroupUpdateDataOwner;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateData
     */
    'description'?: string | null;
    /**
     * is set when the group only allows admins to change group settings
     * @type {boolean}
     * @memberof GroupUpdateData
     */
    'restrict'?: boolean;
    /**
     * is set when the group only allows admins to write messages
     * @type {boolean}
     * @memberof GroupUpdateData
     */
    'announce'?: boolean;
    /**
     * 
     * @type {Array<GroupUpdateDataParticipantsInner>}
     * @memberof GroupUpdateData
     */
    'participants'?: Array<GroupUpdateDataParticipantsInner>;
}
/**
 * 
 * @export
 * @interface GroupUpdateDataOwner
 */
export interface GroupUpdateDataOwner {
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwner
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwner
     */
    'cursor': string;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwner
     */
    'type': GroupUpdateDataOwnerTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwner
     */
    'name': string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof GroupUpdateDataOwner
     */
    'platformNames': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwner
     */
    'phoneNumber': string | null;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwner
     */
    'email'?: string | null;
    /**
     * 
     * @type {GroupUpdateDataOwnerImg}
     * @memberof GroupUpdateDataOwner
     */
    'img'?: GroupUpdateDataOwnerImg | null;
    /**
     * 
     * @type {Array<GroupUpdateDataOwnerTagsInner>}
     * @memberof GroupUpdateDataOwner
     */
    'tags': Array<GroupUpdateDataOwnerTagsInner>;
    /**
     * 
     * @type {Array<GroupUpdateDataOwnerTicketsInner>}
     * @memberof GroupUpdateDataOwner
     */
    'tickets'?: Array<GroupUpdateDataOwnerTicketsInner>;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwner
     */
    'assignee'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwner
     */
    'assigner'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwner
     */
    'assignedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwner
     */
    'firstAssignedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof GroupUpdateDataOwner
     */
    'messagesSent': number;
    /**
     * 
     * @type {number}
     * @memberof GroupUpdateDataOwner
     */
    'messagesReceived': number;
}

export const GroupUpdateDataOwnerTypeEnum = {
    Individual: 'individual',
    Group: 'group',
    Channel: 'channel',
    Broadcast: 'broadcast',
    Post: 'post'
} as const;

export type GroupUpdateDataOwnerTypeEnum = typeof GroupUpdateDataOwnerTypeEnum[keyof typeof GroupUpdateDataOwnerTypeEnum];

/**
 * 
 * @export
 * @interface GroupUpdateDataOwnerImg
 */
export interface GroupUpdateDataOwnerImg {
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwnerImg
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwnerImg
     */
    'fullUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwnerImg
     */
    'fetchedAt'?: string;
}
/**
 * 
 * @export
 * @interface GroupUpdateDataOwnerTagsInner
 */
export interface GroupUpdateDataOwnerTagsInner {
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwnerTagsInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwnerTagsInner
     */
    'value'?: string | null;
    /**
     * used in events to denote that the tag has been removed
     * @type {boolean}
     * @memberof GroupUpdateDataOwnerTagsInner
     */
    'remove'?: boolean;
    /**
     * 
     * @type {GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadata}
     * @memberof GroupUpdateDataOwnerTagsInner
     */
    'addedMetadata': GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadata;
    /**
     * 
     * @type {GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadata}
     * @memberof GroupUpdateDataOwnerTagsInner
     */
    'updatedMetadata'?: GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadata;
}
/**
 * 
 * @export
 * @interface GroupUpdateDataOwnerTagsInnerAllOf
 */
export interface GroupUpdateDataOwnerTagsInnerAllOf {
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwnerTagsInnerAllOf
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwnerTagsInnerAllOf
     */
    'value'?: string | null;
    /**
     * used in events to denote that the tag has been removed
     * @type {boolean}
     * @memberof GroupUpdateDataOwnerTagsInnerAllOf
     */
    'remove'?: boolean;
}
/**
 * 
 * @export
 * @interface GroupUpdateDataOwnerTagsInnerAllOf1
 */
export interface GroupUpdateDataOwnerTagsInnerAllOf1 {
    /**
     * 
     * @type {GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadata}
     * @memberof GroupUpdateDataOwnerTagsInnerAllOf1
     */
    'addedMetadata': GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadata;
    /**
     * 
     * @type {GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadata}
     * @memberof GroupUpdateDataOwnerTagsInnerAllOf1
     */
    'updatedMetadata'?: GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadata;
}
/**
 * 
 * @export
 * @interface GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadata
 */
export interface GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadata {
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadata
     */
    'doneAt': string;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadata
     */
    'doneBy': string;
    /**
     * 
     * @type {GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadataActor}
     * @memberof GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadata
     */
    'actor'?: GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadataActor;
}
/**
 * 
 * @export
 * @interface GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadataActor
 */
export interface GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadataActor {
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadataActor
     */
    'type': GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadataActorTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadataActor
     */
    'objectId': string;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadataActor
     */
    'objectName'?: string;
}

export const GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadataActorTypeEnum = {
    KeywordReply: 'keyword-reply',
    DefaultReply: 'default-reply',
    Campaigns: 'campaigns',
    Notifications: 'notifications',
    Bot: 'bot',
    AiChatbot: 'ai-chatbot',
    Trigger: 'trigger'
} as const;

export type GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadataActorTypeEnum = typeof GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadataActorTypeEnum[keyof typeof GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadataActorTypeEnum];

/**
 * 
 * @export
 * @interface GroupUpdateDataOwnerTicketsInner
 */
export interface GroupUpdateDataOwnerTicketsInner {
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwnerTicketsInner
     */
    'boardId': string;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwnerTicketsInner
     */
    'stageId': string;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwnerTicketsInner
     */
    'id': string;
    /**
     * 
     * @type {GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadata}
     * @memberof GroupUpdateDataOwnerTicketsInner
     */
    'createMetadata'?: GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadata;
    /**
     * 
     * @type {GroupUpdateDataOwnerTicketsInnerTimer}
     * @memberof GroupUpdateDataOwnerTicketsInner
     */
    'timer'?: GroupUpdateDataOwnerTicketsInnerTimer;
}
/**
 * 
 * @export
 * @interface GroupUpdateDataOwnerTicketsInnerTimer
 */
export interface GroupUpdateDataOwnerTicketsInnerTimer {
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwnerTicketsInnerTimer
     */
    'endsAt': string;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwnerTicketsInnerTimer
     */
    'status': GroupUpdateDataOwnerTicketsInnerTimerStatusEnum;
}

export const GroupUpdateDataOwnerTicketsInnerTimerStatusEnum = {
    Running: 'running',
    Stopped: 'stopped',
    Ended: 'ended'
} as const;

export type GroupUpdateDataOwnerTicketsInnerTimerStatusEnum = typeof GroupUpdateDataOwnerTicketsInnerTimerStatusEnum[keyof typeof GroupUpdateDataOwnerTicketsInnerTimerStatusEnum];

/**
 * 
 * @export
 * @interface GroupUpdateDataParticipantsInner
 */
export interface GroupUpdateDataParticipantsInner {
    /**
     * 
     * @type {GroupUpdateDataOwner}
     * @memberof GroupUpdateDataParticipantsInner
     */
    'contact': GroupUpdateDataOwner;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataParticipantsInner
     */
    'contactId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataParticipantsInner
     */
    'admin'?: GroupUpdateDataParticipantsInnerAdminEnum;
}

export const GroupUpdateDataParticipantsInnerAdminEnum = {
    Admin: 'admin',
    SuperAdmin: 'super-admin'
} as const;

export type GroupUpdateDataParticipantsInnerAdminEnum = typeof GroupUpdateDataParticipantsInnerAdminEnum[keyof typeof GroupUpdateDataParticipantsInnerAdminEnum];

/**
 * 
 * @export
 * @interface KeywordbasedactionInsert
 */
export interface KeywordbasedactionInsert {
    /**
     * 
     * @type {string}
     * @memberof KeywordbasedactionInsert
     */
    'event': KeywordbasedactionInsertEventEnum;
    /**
     * 
     * @type {Array<KeywordbasedactionInsertData>}
     * @memberof KeywordbasedactionInsert
     */
    'data': Array<KeywordbasedactionInsertData>;
}

export const KeywordbasedactionInsertEventEnum = {
    KeywordbasedactionInsert: 'keywordbasedaction-insert'
} as const;

export type KeywordbasedactionInsertEventEnum = typeof KeywordbasedactionInsertEventEnum[keyof typeof KeywordbasedactionInsertEventEnum];

/**
 * 
 * @export
 * @interface KeywordbasedactionInsertData
 */
export interface KeywordbasedactionInsertData {
    /**
     * Keyword Id (auto incrementing)
     * @type {number}
     * @memberof KeywordbasedactionInsertData
     */
    'id': number;
    /**
     * Team the keyword belongs to
     * @type {string}
     * @memberof KeywordbasedactionInsertData
     */
    'teamId': string;
    /**
     * Accounts the keywords will trigger for
     * @type {Array<string>}
     * @memberof KeywordbasedactionInsertData
     */
    'accountIds'?: Array<string>;
    /**
     * Status of reply service
     * @type {boolean}
     * @memberof KeywordbasedactionInsertData
     */
    'enabled': boolean;
    /**
     * Should typing indicator & read receipt be sent
     * @type {boolean}
     * @memberof KeywordbasedactionInsertData
     */
    'sendTyping'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof KeywordbasedactionInsertData
     */
    'cancelIfReplyReceived'?: boolean;
    /**
     * Toggles whether the keyword reply will trigger for group chats
     * @type {boolean}
     * @memberof KeywordbasedactionInsertData
     */
    'enableOnGroupChats'?: boolean;
    /**
     * Only on the first message in a chat
     * @type {boolean}
     * @memberof KeywordbasedactionInsertData
     */
    'onlyOnFirstMessage'?: boolean;
    /**
     * Type of trigger
     * @type {string}
     * @memberof KeywordbasedactionInsertData
     */
    'triggerType': KeywordbasedactionInsertDataTriggerTypeEnum;
    /**
     * Unique triggering keywords
     * @type {Array<KeywordbasedactionInsertDataKeywordsInner>}
     * @memberof KeywordbasedactionInsertData
     */
    'keywords': Array<KeywordbasedactionInsertDataKeywordsInner>;
    /**
     * Flow ids to be triggered
     * @type {Array<string>}
     * @memberof KeywordbasedactionInsertData
     */
    'flowIds'?: Array<string>;
    /**
     * Timespan before the keyword can be triggered again, measured in seconds
     * @type {number}
     * @memberof KeywordbasedactionInsertData
     */
    'delay'?: number;
    /**
     * 
     * @type {Array<KeywordbasedactionInsertDataExecutionFramesInner>}
     * @memberof KeywordbasedactionInsertData
     */
    'executionFrames'?: Array<KeywordbasedactionInsertDataExecutionFramesInner>;
    /**
     * An ISO formatted timestamp
     * @type {string}
     * @memberof KeywordbasedactionInsertData
     */
    'createdAt': string;
    /**
     * An ISO formatted timestamp
     * @type {string}
     * @memberof KeywordbasedactionInsertData
     */
    'updatedAt'?: string;
    /**
     * User who created the keyword
     * @type {string}
     * @memberof KeywordbasedactionInsertData
     */
    'createdBy': string;
}

export const KeywordbasedactionInsertDataTriggerTypeEnum = {
    Contains: 'contains',
    ContainsPhrase: 'containsPhrase',
    StartsWith: 'startsWith',
    KeywordIs: 'keywordIs',
    DefaultReply: 'defaultReply'
} as const;

export type KeywordbasedactionInsertDataTriggerTypeEnum = typeof KeywordbasedactionInsertDataTriggerTypeEnum[keyof typeof KeywordbasedactionInsertDataTriggerTypeEnum];

/**
 * 
 * @export
 * @interface KeywordbasedactionInsertDataExecutionFramesInner
 */
export interface KeywordbasedactionInsertDataExecutionFramesInner {
    /**
     * 
     * @type {string}
     * @memberof KeywordbasedactionInsertDataExecutionFramesInner
     */
    'day'?: KeywordbasedactionInsertDataExecutionFramesInnerDayEnum;
    /**
     * 
     * @type {string}
     * @memberof KeywordbasedactionInsertDataExecutionFramesInner
     */
    'startTime': string;
    /**
     * 
     * @type {string}
     * @memberof KeywordbasedactionInsertDataExecutionFramesInner
     */
    'endTime': string;
}

export const KeywordbasedactionInsertDataExecutionFramesInnerDayEnum = {
    Monday: 'Monday',
    Tuesday: 'Tuesday',
    Wednesday: 'Wednesday',
    Thursday: 'Thursday',
    Friday: 'Friday',
    Saturday: 'Saturday',
    Sunday: 'Sunday'
} as const;

export type KeywordbasedactionInsertDataExecutionFramesInnerDayEnum = typeof KeywordbasedactionInsertDataExecutionFramesInnerDayEnum[keyof typeof KeywordbasedactionInsertDataExecutionFramesInnerDayEnum];

/**
 * 
 * @export
 * @interface KeywordbasedactionInsertDataKeywordsInner
 */
export interface KeywordbasedactionInsertDataKeywordsInner {
    /**
     * 
     * @type {string}
     * @memberof KeywordbasedactionInsertDataKeywordsInner
     */
    'text'?: string;
    /**
     * An ISO formatted timestamp
     * @type {string}
     * @memberof KeywordbasedactionInsertDataKeywordsInner
     */
    'createdAt'?: string;
}
/**
 * 
 * @export
 * @interface MembershipActionInsertData
 */
export interface MembershipActionInsertData {
    /**
     * The id of the pending membership action
     * @type {number}
     * @memberof MembershipActionInsertData
     */
    'id': number;
    /**
     * The id of the membership
     * @type {number}
     * @memberof MembershipActionInsertData
     */
    'membershipId': number;
    /**
     * 
     * @type {string}
     * @memberof MembershipActionInsertData
     */
    'actionType': MembershipActionInsertDataActionTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof MembershipActionInsertData
     */
    'approvalState': MembershipActionInsertDataApprovalStateEnum;
    /**
     * The number of points to add or remove
     * @type {number}
     * @memberof MembershipActionInsertData
     */
    'amount': number;
    /**
     * The date and time the pending membership action was created
     * @type {string}
     * @memberof MembershipActionInsertData
     */
    'timestamp': string;
}

export const MembershipActionInsertDataActionTypeEnum = {
    Add: 'add',
    Remove: 'remove'
} as const;

export type MembershipActionInsertDataActionTypeEnum = typeof MembershipActionInsertDataActionTypeEnum[keyof typeof MembershipActionInsertDataActionTypeEnum];
export const MembershipActionInsertDataApprovalStateEnum = {
    Approved: 'approved',
    Rejected: 'rejected',
    Pending: 'pending'
} as const;

export type MembershipActionInsertDataApprovalStateEnum = typeof MembershipActionInsertDataApprovalStateEnum[keyof typeof MembershipActionInsertDataApprovalStateEnum];

/**
 * 
 * @export
 * @interface MembershipactionInsertData
 */
export interface MembershipactionInsertData {
    /**
     * The id of the pending membership action
     * @type {number}
     * @memberof MembershipactionInsertData
     */
    'id': number;
    /**
     * The id of the membership
     * @type {number}
     * @memberof MembershipactionInsertData
     */
    'membershipId': number;
    /**
     * The contactId of the membership
     * @type {string}
     * @memberof MembershipactionInsertData
     */
    'contactId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MembershipactionInsertData
     */
    'actionType': MembershipactionInsertDataActionTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof MembershipactionInsertData
     */
    'approvalState': MembershipactionInsertDataApprovalStateEnum;
    /**
     * The number of points to add or remove
     * @type {number}
     * @memberof MembershipactionInsertData
     */
    'amount': number;
    /**
     * The date and time the pending membership action was created
     * @type {string}
     * @memberof MembershipactionInsertData
     */
    'timestamp': string;
}

export const MembershipactionInsertDataActionTypeEnum = {
    Add: 'add',
    Remove: 'remove'
} as const;

export type MembershipactionInsertDataActionTypeEnum = typeof MembershipactionInsertDataActionTypeEnum[keyof typeof MembershipactionInsertDataActionTypeEnum];
export const MembershipactionInsertDataApprovalStateEnum = {
    Approved: 'approved',
    Rejected: 'rejected',
    Pending: 'pending'
} as const;

export type MembershipactionInsertDataApprovalStateEnum = typeof MembershipactionInsertDataApprovalStateEnum[keyof typeof MembershipactionInsertDataApprovalStateEnum];

/**
 * 
 * @export
 * @interface MessageDelete
 */
export interface MessageDelete {
    /**
     * 
     * @type {string}
     * @memberof MessageDelete
     */
    'event': MessageDeleteEventEnum;
    /**
     * 
     * @type {Array<MessageDeleteData>}
     * @memberof MessageDelete
     */
    'data': Array<MessageDeleteData>;
}

export const MessageDeleteEventEnum = {
    MessageDelete: 'message-delete'
} as const;

export type MessageDeleteEventEnum = typeof MessageDeleteEventEnum[keyof typeof MessageDeleteEventEnum];

/**
 * 
 * @export
 * @interface MessageDeleteData
 */
export interface MessageDeleteData {
    /**
     * 
     * @type {string}
     * @memberof MessageDeleteData
     */
    'chatId': string;
    /**
     * 
     * @type {string}
     * @memberof MessageDeleteData
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof MessageDeleteData
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface MessageInsert
 */
export interface MessageInsert {
    /**
     * 
     * @type {string}
     * @memberof MessageInsert
     */
    'event': MessageInsertEventEnum;
    /**
     * 
     * @type {Array<MessageInsertData>}
     * @memberof MessageInsert
     */
    'data': Array<MessageInsertData>;
}

export const MessageInsertEventEnum = {
    MessageInsert: 'message-insert'
} as const;

export type MessageInsertEventEnum = typeof MessageInsertEventEnum[keyof typeof MessageInsertEventEnum];

/**
 * 
 * @export
 * @interface MessageInsertData
 */
export interface MessageInsertData {
    /**
     * 
     * @type {string}
     * @memberof MessageInsertData
     */
    'chatId': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertData
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertData
     */
    'id': string;
    /**
     * 
     * @type {boolean}
     * @memberof MessageInsertData
     */
    'fromMe': boolean;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertData
     */
    'senderContactId'?: string | null;
    /**
     * 
     * @type {MessageInsertDataSender}
     * @memberof MessageInsertData
     */
    'sender'?: MessageInsertDataSender | null;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertData
     */
    'timestamp': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertData
     */
    'status'?: MessageInsertDataStatusEnum;
    /**
     * 
     * @type {MessageInsertDataError}
     * @memberof MessageInsertData
     */
    'error'?: MessageInsertDataError | null;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertData
     */
    'resolvedBy'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertData
     */
    'resolvedAt'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof MessageInsertData
     */
    'hidden'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof MessageInsertData
     */
    'revision'?: number;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertData
     */
    'editedAt'?: string | null;
    /**
     * 
     * @type {MessageInsertDataMiscOptions}
     * @memberof MessageInsertData
     */
    'miscOptions'?: MessageInsertDataMiscOptions;
    /**
     * 
     * @type {MessageInsertDataConversationMetadata}
     * @memberof MessageInsertData
     */
    'conversationMetadata'?: MessageInsertDataConversationMetadata;
    /**
     * 
     * @type {MessageInsertDataReactionAction}
     * @memberof MessageInsertData
     */
    'reactionAction'?: MessageInsertDataReactionAction;
    /**
     * 
     * @type {Array<string>}
     * @memberof MessageInsertData
     */
    'mentions'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertData
     */
    'subject'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertData
     */
    'text'?: string | null;
    /**
     * 
     * @type {MessageInsertDataQuoted}
     * @memberof MessageInsertData
     */
    'quoted'?: MessageInsertDataQuoted | null;
    /**
     * 
     * @type {boolean}
     * @memberof MessageInsertData
     */
    'deleted'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MessageInsertData
     */
    'failDecryption'?: boolean;
    /**
     * 
     * @type {MessageInsertDataAction}
     * @memberof MessageInsertData
     */
    'action'?: MessageInsertDataAction | null;
    /**
     * 
     * @type {Array<MessageInsertDataAttachmentsInner>}
     * @memberof MessageInsertData
     */
    'attachments'?: Array<MessageInsertDataAttachmentsInner>;
    /**
     * 
     * @type {Array<MessageInsertDataButtonsInner>}
     * @memberof MessageInsertData
     */
    'buttons'?: Array<MessageInsertDataButtonsInner> | null;
    /**
     * 
     * @type {MessageInsertDataPoll}
     * @memberof MessageInsertData
     */
    'poll'?: MessageInsertDataPoll;
    /**
     * 
     * @type {MessageInsertDataList}
     * @memberof MessageInsertData
     */
    'list'?: MessageInsertDataList;
    /**
     * 
     * @type {Array<MessageInsertDataProductsInner>}
     * @memberof MessageInsertData
     */
    'products'?: Array<MessageInsertDataProductsInner> | null;
    /**
     * 
     * @type {MessageInsertDataOrder}
     * @memberof MessageInsertData
     */
    'order'?: MessageInsertDataOrder | null;
    /**
     * 
     * @type {MessageInsertDataLinkPreview}
     * @memberof MessageInsertData
     */
    'linkPreview'?: MessageInsertDataLinkPreview;
    /**
     * 
     * @type {Array<MessageInsertDataReactionsInner>}
     * @memberof MessageInsertData
     */
    'reactions'?: Array<MessageInsertDataReactionsInner> | null;
}

export const MessageInsertDataStatusEnum = {
    Error: 'error',
    Pending: 'pending',
    Note: 'note',
    Sent: 'sent',
    Delivered: 'delivered',
    Read: 'read',
    Cancelled: 'cancelled'
} as const;

export type MessageInsertDataStatusEnum = typeof MessageInsertDataStatusEnum[keyof typeof MessageInsertDataStatusEnum];

/**
 * 
 * @export
 * @interface MessageInsertDataAction
 */
export interface MessageInsertDataAction {
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataAction
     */
    'type': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof MessageInsertDataAction
     */
    'parameters'?: Array<string>;
}
/**
 * 
 * @export
 * @interface MessageInsertDataAttachmentsInner
 */
export interface MessageInsertDataAttachmentsInner {
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataAttachmentsInner
     */
    'type': MessageInsertDataAttachmentsInnerTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataAttachmentsInner
     */
    'mimetype': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataAttachmentsInner
     */
    'url': string;
    /**
     * 
     * @type {MessageInsertDataAttachmentsInnerLocation}
     * @memberof MessageInsertDataAttachmentsInner
     */
    'location'?: MessageInsertDataAttachmentsInnerLocation;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataAttachmentsInner
     */
    'jpegThumbnail'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MessageInsertDataAttachmentsInner
     */
    'seconds'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof MessageInsertDataAttachmentsInner
     */
    'pttAudio'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataAttachmentsInner
     */
    'filename'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MessageInsertDataAttachmentsInner
     */
    'isGif'?: boolean;
    /**
     * 
     * @type {MessageInsertDataAttachmentsInnerDecryption}
     * @memberof MessageInsertDataAttachmentsInner
     */
    'decryption'?: MessageInsertDataAttachmentsInnerDecryption;
}

export const MessageInsertDataAttachmentsInnerTypeEnum = {
    Image: 'image',
    Video: 'video',
    Contact: 'contact',
    Sticker: 'sticker',
    Audio: 'audio',
    Document: 'document',
    Location: 'location'
} as const;

export type MessageInsertDataAttachmentsInnerTypeEnum = typeof MessageInsertDataAttachmentsInnerTypeEnum[keyof typeof MessageInsertDataAttachmentsInnerTypeEnum];

/**
 * 
 * @export
 * @interface MessageInsertDataAttachmentsInnerDecryption
 */
export interface MessageInsertDataAttachmentsInnerDecryption {
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof MessageInsertDataAttachmentsInnerDecryption
     */
    'keys'?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataAttachmentsInnerDecryption
     */
    'algorithm': MessageInsertDataAttachmentsInnerDecryptionAlgorithmEnum;
}

export const MessageInsertDataAttachmentsInnerDecryptionAlgorithmEnum = {
    Aes256Cbc: 'aes-256-cbc'
} as const;

export type MessageInsertDataAttachmentsInnerDecryptionAlgorithmEnum = typeof MessageInsertDataAttachmentsInnerDecryptionAlgorithmEnum[keyof typeof MessageInsertDataAttachmentsInnerDecryptionAlgorithmEnum];

/**
 * 
 * @export
 * @interface MessageInsertDataAttachmentsInnerLocation
 */
export interface MessageInsertDataAttachmentsInnerLocation {
    /**
     * 
     * @type {number}
     * @memberof MessageInsertDataAttachmentsInnerLocation
     */
    'latitude': number;
    /**
     * 
     * @type {number}
     * @memberof MessageInsertDataAttachmentsInnerLocation
     */
    'longitude': number;
}
/**
 * 
 * @export
 * @interface MessageInsertDataButtonsInner
 */
export interface MessageInsertDataButtonsInner {
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataButtonsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataButtonsInner
     */
    'text': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataButtonsInner
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataButtonsInner
     */
    'phoneNumber'?: string;
}
/**
 * 
 * @export
 * @interface MessageInsertDataConversationMetadata
 */
export interface MessageInsertDataConversationMetadata {
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataConversationMetadata
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataConversationMetadata
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataConversationMetadata
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface MessageInsertDataError
 */
export interface MessageInsertDataError {
    /**
     * 
     * @type {number}
     * @memberof MessageInsertDataError
     */
    'statusCode': number;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataError
     */
    'message': string;
    /**
     * 
     * @type {AccountInsertDataErrorAllOfData}
     * @memberof MessageInsertDataError
     */
    'data'?: AccountInsertDataErrorAllOfData;
    /**
     * 
     * @type {number}
     * @memberof MessageInsertDataError
     */
    'retries': number;
}
/**
 * 
 * @export
 * @interface MessageInsertDataErrorAllOf
 */
export interface MessageInsertDataErrorAllOf {
    /**
     * 
     * @type {number}
     * @memberof MessageInsertDataErrorAllOf
     */
    'retries': number;
}
/**
 * 
 * @export
 * @interface MessageInsertDataLinkPreview
 */
export interface MessageInsertDataLinkPreview {
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataLinkPreview
     */
    'jpegThumbnail'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataLinkPreview
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataLinkPreview
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataLinkPreview
     */
    'url': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataLinkPreview
     */
    'matchedText'?: string;
}
/**
 * 
 * @export
 * @interface MessageInsertDataList
 */
export interface MessageInsertDataList {
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataList
     */
    'title'?: string;
    /**
     * 
     * @type {Array<MessageInsertDataListSectionsInner>}
     * @memberof MessageInsertDataList
     */
    'sections': Array<MessageInsertDataListSectionsInner>;
    /**
     * 
     * @type {number}
     * @memberof MessageInsertDataList
     */
    'maxSelections'?: number;
}
/**
 * 
 * @export
 * @interface MessageInsertDataListSectionsInner
 */
export interface MessageInsertDataListSectionsInner {
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataListSectionsInner
     */
    'title': string;
    /**
     * 
     * @type {Array<MessageInsertDataListSectionsInnerOptionsInner>}
     * @memberof MessageInsertDataListSectionsInner
     */
    'options': Array<MessageInsertDataListSectionsInnerOptionsInner>;
    /**
     * 
     * @type {number}
     * @memberof MessageInsertDataListSectionsInner
     */
    'maxSelections'?: number;
}
/**
 * 
 * @export
 * @interface MessageInsertDataListSectionsInnerOptionsInner
 */
export interface MessageInsertDataListSectionsInnerOptionsInner {
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataListSectionsInnerOptionsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataListSectionsInnerOptionsInner
     */
    'text'?: string;
}
/**
 * 
 * @export
 * @interface MessageInsertDataMiscOptions
 */
export interface MessageInsertDataMiscOptions {
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataMiscOptions
     */
    'originalId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataMiscOptions
     */
    'templateId'?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof MessageInsertDataMiscOptions
     */
    'templateParams'?: { [key: string]: string; };
    /**
     * 
     * @type {boolean}
     * @memberof MessageInsertDataMiscOptions
     */
    'withTyping'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof MessageInsertDataMiscOptions
     */
    'forwardCount'?: number;
    /**
     * 
     * @type {MessageInsertDataMiscOptionsForwarded}
     * @memberof MessageInsertDataMiscOptions
     */
    'forwarded'?: MessageInsertDataMiscOptionsForwarded;
    /**
     * 
     * @type {boolean}
     * @memberof MessageInsertDataMiscOptions
     */
    'randomizeMessage'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataMiscOptions
     */
    'buttonReplyId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataMiscOptions
     */
    'listReplyId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof MessageInsertDataMiscOptions
     */
    'pollReplyOptions'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof MessageInsertDataMiscOptions
     */
    'cancelIfReplyReceived'?: boolean;
}
/**
 * 
 * @export
 * @interface MessageInsertDataMiscOptionsForwarded
 */
export interface MessageInsertDataMiscOptionsForwarded {
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataMiscOptionsForwarded
     */
    'accountId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataMiscOptionsForwarded
     */
    'chatId': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataMiscOptionsForwarded
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface MessageInsertDataOrder
 */
export interface MessageInsertDataOrder {
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataOrder
     */
    'orderId': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataOrder
     */
    'jpegThumbnail'?: string;
    /**
     * 
     * @type {number}
     * @memberof MessageInsertDataOrder
     */
    'itemCount'?: number;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataOrder
     */
    'sellerId': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataOrder
     */
    'token': string;
    /**
     * 
     * @type {MessageInsertDataOrderTotal}
     * @memberof MessageInsertDataOrder
     */
    'total': MessageInsertDataOrderTotal;
}
/**
 * 
 * @export
 * @interface MessageInsertDataOrderTotal
 */
export interface MessageInsertDataOrderTotal {
    /**
     * 
     * @type {number}
     * @memberof MessageInsertDataOrderTotal
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataOrderTotal
     */
    'currency': string;
}
/**
 * 
 * @export
 * @interface MessageInsertDataPoll
 */
export interface MessageInsertDataPoll {
    /**
     * 
     * @type {Array<MessageInsertDataPollOptionsInner>}
     * @memberof MessageInsertDataPoll
     */
    'options': Array<MessageInsertDataPollOptionsInner>;
    /**
     * 
     * @type {number}
     * @memberof MessageInsertDataPoll
     */
    'maxSelections'?: number;
}
/**
 * 
 * @export
 * @interface MessageInsertDataPollOptionsInner
 */
export interface MessageInsertDataPollOptionsInner {
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataPollOptionsInner
     */
    'text': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof MessageInsertDataPollOptionsInner
     */
    'voters'?: Array<string>;
}
/**
 * 
 * @export
 * @interface MessageInsertDataProductsInner
 */
export interface MessageInsertDataProductsInner {
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataProductsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataProductsInner
     */
    'accountId'?: string;
    /**
     * 
     * @type {MessageInsertDataProductsInnerDetails}
     * @memberof MessageInsertDataProductsInner
     */
    'details'?: MessageInsertDataProductsInnerDetails;
}
/**
 * 
 * @export
 * @interface MessageInsertDataProductsInnerDetails
 */
export interface MessageInsertDataProductsInnerDetails {
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataProductsInnerDetails
     */
    'currencyCode': string;
    /**
     * 
     * @type {number}
     * @memberof MessageInsertDataProductsInnerDetails
     */
    'price1000': number;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataProductsInnerDetails
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataProductsInnerDetails
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataProductsInnerDetails
     */
    'url'?: string;
    /**
     * 
     * @type {MessageInsertDataAttachmentsInner}
     * @memberof MessageInsertDataProductsInnerDetails
     */
    'image': MessageInsertDataAttachmentsInner;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataProductsInnerDetails
     */
    'businessOwnerId'?: string;
}
/**
 * 
 * @export
 * @interface MessageInsertDataQuoted
 */
export interface MessageInsertDataQuoted {
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataQuoted
     */
    'chatId': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataQuoted
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataQuoted
     */
    'senderContactId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataQuoted
     */
    'text'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataQuoted
     */
    'jpegThumbnail'?: string | null;
}
/**
 * 
 * @export
 * @interface MessageInsertDataReactionAction
 */
export interface MessageInsertDataReactionAction {
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataReactionAction
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataReactionAction
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface MessageInsertDataReactionsInner
 */
export interface MessageInsertDataReactionsInner {
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataReactionsInner
     */
    'reaction': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataReactionsInner
     */
    'fromId': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataReactionsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataReactionsInner
     */
    'timestamp'?: string;
}
/**
 * 
 * @export
 * @interface MessageInsertDataSender
 */
export interface MessageInsertDataSender {
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataSender
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataSender
     */
    'createdAt'?: string;
    /**
     * 
     * @type {GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadataActor}
     * @memberof MessageInsertDataSender
     */
    'context'?: GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadataActor;
}
/**
 * 
 * @export
 * @interface MessageUpdate
 */
export interface MessageUpdate {
    /**
     * 
     * @type {string}
     * @memberof MessageUpdate
     */
    'event': MessageUpdateEventEnum;
    /**
     * 
     * @type {Array<MessageUpdateData>}
     * @memberof MessageUpdate
     */
    'data': Array<MessageUpdateData>;
}

export const MessageUpdateEventEnum = {
    MessageUpdate: 'message-update'
} as const;

export type MessageUpdateEventEnum = typeof MessageUpdateEventEnum[keyof typeof MessageUpdateEventEnum];

/**
 * 
 * @export
 * @interface MessageUpdateData
 */
export interface MessageUpdateData {
    /**
     * 
     * @type {string}
     * @memberof MessageUpdateData
     */
    'chatId': string;
    /**
     * 
     * @type {string}
     * @memberof MessageUpdateData
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof MessageUpdateData
     */
    'id': string;
    /**
     * 
     * @type {boolean}
     * @memberof MessageUpdateData
     */
    'fromMe'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MessageUpdateData
     */
    'senderContactId'?: string | null;
    /**
     * 
     * @type {MessageInsertDataSender}
     * @memberof MessageUpdateData
     */
    'sender'?: MessageInsertDataSender | null;
    /**
     * 
     * @type {string}
     * @memberof MessageUpdateData
     */
    'timestamp'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageUpdateData
     */
    'status'?: MessageUpdateDataStatusEnum;
    /**
     * 
     * @type {MessageInsertDataError}
     * @memberof MessageUpdateData
     */
    'error'?: MessageInsertDataError | null;
    /**
     * 
     * @type {string}
     * @memberof MessageUpdateData
     */
    'resolvedBy'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MessageUpdateData
     */
    'resolvedAt'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof MessageUpdateData
     */
    'hidden'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof MessageUpdateData
     */
    'revision'?: number;
    /**
     * 
     * @type {string}
     * @memberof MessageUpdateData
     */
    'editedAt'?: string | null;
    /**
     * 
     * @type {MessageInsertDataMiscOptions}
     * @memberof MessageUpdateData
     */
    'miscOptions'?: MessageInsertDataMiscOptions;
    /**
     * 
     * @type {MessageInsertDataConversationMetadata}
     * @memberof MessageUpdateData
     */
    'conversationMetadata'?: MessageInsertDataConversationMetadata;
    /**
     * 
     * @type {MessageInsertDataReactionAction}
     * @memberof MessageUpdateData
     */
    'reactionAction'?: MessageInsertDataReactionAction;
    /**
     * 
     * @type {Array<string>}
     * @memberof MessageUpdateData
     */
    'mentions'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof MessageUpdateData
     */
    'subject'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageUpdateData
     */
    'text'?: string | null;
    /**
     * 
     * @type {MessageInsertDataQuoted}
     * @memberof MessageUpdateData
     */
    'quoted'?: MessageInsertDataQuoted | null;
    /**
     * 
     * @type {boolean}
     * @memberof MessageUpdateData
     */
    'deleted'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MessageUpdateData
     */
    'failDecryption'?: boolean;
    /**
     * 
     * @type {MessageInsertDataAction}
     * @memberof MessageUpdateData
     */
    'action'?: MessageInsertDataAction | null;
    /**
     * 
     * @type {Array<MessageInsertDataAttachmentsInner>}
     * @memberof MessageUpdateData
     */
    'attachments'?: Array<MessageInsertDataAttachmentsInner>;
    /**
     * 
     * @type {Array<MessageInsertDataButtonsInner>}
     * @memberof MessageUpdateData
     */
    'buttons'?: Array<MessageInsertDataButtonsInner> | null;
    /**
     * 
     * @type {MessageInsertDataPoll}
     * @memberof MessageUpdateData
     */
    'poll'?: MessageInsertDataPoll;
    /**
     * 
     * @type {MessageInsertDataList}
     * @memberof MessageUpdateData
     */
    'list'?: MessageInsertDataList;
    /**
     * 
     * @type {Array<MessageInsertDataProductsInner>}
     * @memberof MessageUpdateData
     */
    'products'?: Array<MessageInsertDataProductsInner> | null;
    /**
     * 
     * @type {MessageInsertDataOrder}
     * @memberof MessageUpdateData
     */
    'order'?: MessageInsertDataOrder | null;
    /**
     * 
     * @type {MessageInsertDataLinkPreview}
     * @memberof MessageUpdateData
     */
    'linkPreview'?: MessageInsertDataLinkPreview;
    /**
     * 
     * @type {Array<MessageInsertDataReactionsInner>}
     * @memberof MessageUpdateData
     */
    'reactions'?: Array<MessageInsertDataReactionsInner> | null;
}

export const MessageUpdateDataStatusEnum = {
    Error: 'error',
    Pending: 'pending',
    Note: 'note',
    Sent: 'sent',
    Delivered: 'delivered',
    Read: 'read',
    Cancelled: 'cancelled'
} as const;

export type MessageUpdateDataStatusEnum = typeof MessageUpdateDataStatusEnum[keyof typeof MessageUpdateDataStatusEnum];

/**
 * 
 * @export
 * @interface OrderInsert
 */
export interface OrderInsert {
    /**
     * 
     * @type {string}
     * @memberof OrderInsert
     */
    'event': OrderInsertEventEnum;
    /**
     * 
     * @type {Array<OrderInsertData>}
     * @memberof OrderInsert
     */
    'data': Array<OrderInsertData>;
}

export const OrderInsertEventEnum = {
    OrderInsert: 'order-insert'
} as const;

export type OrderInsertEventEnum = typeof OrderInsertEventEnum[keyof typeof OrderInsertEventEnum];

/**
 * - A data point created via the \"dataPatch\" operation - this signifies a change in an order, or the creation of a new order 
 * @export
 * @interface OrderInsertData
 */
export interface OrderInsertData {
    /**
     * Unique identifier for the data point
     * @type {number}
     * @memberof OrderInsertData
     */
    'id': number;
    /**
     * Unique identifier for the order, provided by the \"tracking\" its from
     * @type {string}
     * @memberof OrderInsertData
     */
    'orderId': string;
    /**
     * 
     * @type {string}
     * @memberof OrderInsertData
     */
    'accountId'?: string | null;
    /**
     * 
     * @type {OrderInsertDataPhoneNumber}
     * @memberof OrderInsertData
     */
    'phoneNumber': OrderInsertDataPhoneNumber;
    /**
     * The recipientId to use when phone number is not applicable. Including this will override phone number
     * @type {string}
     * @memberof OrderInsertData
     */
    'recipientId'?: string;
    /**
     * 
     * @type {OrderInsertDataWaResponse}
     * @memberof OrderInsertData
     */
    'waResponse': OrderInsertDataWaResponse;
    /**
     * The trigger that captured this data point for message sending. If null, it means that no trigger captured this data point
     * @type {number}
     * @memberof OrderInsertData
     */
    'triggerId': number | null;
    /**
     * The tracking that captured this data point for message sending
     * @type {number}
     * @memberof OrderInsertData
     */
    'trackingId'?: number;
    /**
     * The status of the data point. - \"sent\" => data point has been sent to the bot service, either successfully or not - \"pending\" => data point is waiting to be sent to the bot service. If - \"cancelled\" => data point has been cancelled, and will not be sent to the bot service. this could be because no trigger was found, or the trigger was disabled
     * @type {string}
     * @memberof OrderInsertData
     */
    'status': OrderInsertDataStatusEnum;
    /**
     * Whether this data point is a test data point or not. Test data points are created by the \"triggerTest\" operation
     * @type {boolean}
     * @memberof OrderInsertData
     */
    'isTest': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrderInsertData
     */
    'datetime': string;
    /**
     * The params that were sent by the integration when the data point was created
     * @type {{ [key: string]: any; }}
     * @memberof OrderInsertData
     */
    'params': { [key: string]: any; };
}

export const OrderInsertDataStatusEnum = {
    Sent: 'sent',
    Pending: 'pending',
    Cancelled: 'cancelled'
} as const;

export type OrderInsertDataStatusEnum = typeof OrderInsertDataStatusEnum[keyof typeof OrderInsertDataStatusEnum];

/**
 * @type OrderInsertDataPhoneNumber
 * Phone number to be sent to
 * @export
 */
export type OrderInsertDataPhoneNumber = number | object | string;

/**
 * the response received from the bots service. \"waResponse\" is a bit of a misnomer now, but it\'s a legacy name as we used to only support data from WhatsApp 
 * @export
 * @interface OrderInsertDataWaResponse
 */
export interface OrderInsertDataWaResponse {
    /**
     * the response code
     * @type {number}
     * @memberof OrderInsertDataWaResponse
     */
    'code'?: number;
    /**
     * the body received
     * @type {object}
     * @memberof OrderInsertDataWaResponse
     */
    'body'?: object;
}
/**
 * 
 * @export
 * @interface PaymentintegrationInsert
 */
export interface PaymentintegrationInsert {
    /**
     * 
     * @type {string}
     * @memberof PaymentintegrationInsert
     */
    'event': PaymentintegrationInsertEventEnum;
    /**
     * 
     * @type {Array<PaymentintegrationInsertData>}
     * @memberof PaymentintegrationInsert
     */
    'data': Array<PaymentintegrationInsertData>;
}

export const PaymentintegrationInsertEventEnum = {
    PaymentintegrationInsert: 'paymentintegration-insert'
} as const;

export type PaymentintegrationInsertEventEnum = typeof PaymentintegrationInsertEventEnum[keyof typeof PaymentintegrationInsertEventEnum];

/**
 * 
 * @export
 * @interface PaymentintegrationInsertData
 */
export interface PaymentintegrationInsertData {
    /**
     * 
     * @type {string}
     * @memberof PaymentintegrationInsertData
     */
    'id': string;
    /**
     * 
     * @type {boolean}
     * @memberof PaymentintegrationInsertData
     */
    'enabled': boolean;
    /**
     * 
     * @type {string}
     * @memberof PaymentintegrationInsertData
     */
    'teamId': string;
    /**
     * 
     * @type {string}
     * @memberof PaymentintegrationInsertData
     */
    'createdAt': string;
    /**
     * The user who created the payment integration. This is the user who authorized the payment integration
     * @type {string}
     * @memberof PaymentintegrationInsertData
     */
    'createdBy': string;
    /**
     * 
     * @type {string}
     * @memberof PaymentintegrationInsertData
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof PaymentintegrationInsertData
     */
    'paymentSystemId': string;
    /**
     * URL of the QR code image
     * @type {string}
     * @memberof PaymentintegrationInsertData
     */
    'qrCodeUrl'?: string;
    /**
     * Secret key for the payment system
     * @type {string}
     * @memberof PaymentintegrationInsertData
     */
    'secret'?: string;
}
/**
 * 
 * @export
 * @interface PlatformproductDelete
 */
export interface PlatformproductDelete {
    /**
     * 
     * @type {string}
     * @memberof PlatformproductDelete
     */
    'event': PlatformproductDeleteEventEnum;
    /**
     * 
     * @type {Array<PlatformproductDeleteData>}
     * @memberof PlatformproductDelete
     */
    'data': Array<PlatformproductDeleteData>;
}

export const PlatformproductDeleteEventEnum = {
    PlatformproductDelete: 'platformproduct-delete'
} as const;

export type PlatformproductDeleteEventEnum = typeof PlatformproductDeleteEventEnum[keyof typeof PlatformproductDeleteEventEnum];

/**
 * 
 * @export
 * @interface PlatformproductDeleteData
 */
export interface PlatformproductDeleteData {
    /**
     * 
     * @type {string}
     * @memberof PlatformproductDeleteData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof PlatformproductDeleteData
     */
    'accountId': string;
}
/**
 * 
 * @export
 * @interface PlatformproductInsert
 */
export interface PlatformproductInsert {
    /**
     * 
     * @type {string}
     * @memberof PlatformproductInsert
     */
    'event': PlatformproductInsertEventEnum;
    /**
     * 
     * @type {Array<PlatformproductInsertData>}
     * @memberof PlatformproductInsert
     */
    'data': Array<PlatformproductInsertData>;
}

export const PlatformproductInsertEventEnum = {
    PlatformproductInsert: 'platformproduct-insert'
} as const;

export type PlatformproductInsertEventEnum = typeof PlatformproductInsertEventEnum[keyof typeof PlatformproductInsertEventEnum];

/**
 * 
 * @export
 * @interface PlatformproductInsertData
 */
export interface PlatformproductInsertData {
    /**
     * 
     * @type {string}
     * @memberof PlatformproductInsertData
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PlatformproductInsertData
     */
    'retailerId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PlatformproductInsertData
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlatformproductInsertData
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof PlatformproductInsertData
     */
    'price': number | null;
    /**
     * 
     * @type {number}
     * @memberof PlatformproductInsertData
     */
    'stock'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PlatformproductInsertData
     */
    'totalStockSold'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PlatformproductInsertData
     */
    'currency': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof PlatformproductInsertData
     */
    'isHidden': boolean;
    /**
     * 
     * @type {string}
     * @memberof PlatformproductInsertData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof PlatformproductInsertData
     */
    'accountId': string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof PlatformproductInsertData
     */
    'imageUrls': { [key: string]: string; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof PlatformproductInsertData
     */
    'reviewStatus': { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof PlatformproductInsertData
     */
    'availability'?: PlatformproductInsertDataAvailabilityEnum;
    /**
     * 
     * @type {string}
     * @memberof PlatformproductInsertData
     */
    'syncStatus': PlatformproductInsertDataSyncStatusEnum;
    /**
     * 
     * @type {boolean}
     * @memberof PlatformproductInsertData
     */
    'isSyncing'?: boolean;
    /**
     * 
     * @type {AccountInsertDataErrorAllOf}
     * @memberof PlatformproductInsertData
     */
    'error'?: AccountInsertDataErrorAllOf;
    /**
     * 
     * @type {string}
     * @memberof PlatformproductInsertData
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof PlatformproductInsertData
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof PlatformproductInsertData
     */
    'cursor'?: string;
}

export const PlatformproductInsertDataAvailabilityEnum = {
    InStock: 'in-stock'
} as const;

export type PlatformproductInsertDataAvailabilityEnum = typeof PlatformproductInsertDataAvailabilityEnum[keyof typeof PlatformproductInsertDataAvailabilityEnum];
export const PlatformproductInsertDataSyncStatusEnum = {
    Synced: 'synced',
    PendingCreate: 'pendingCreate',
    PendingUpdate: 'pendingUpdate',
    PendingDelete: 'pendingDelete'
} as const;

export type PlatformproductInsertDataSyncStatusEnum = typeof PlatformproductInsertDataSyncStatusEnum[keyof typeof PlatformproductInsertDataSyncStatusEnum];

/**
 * 
 * @export
 * @interface PlatformproductUpdate
 */
export interface PlatformproductUpdate {
    /**
     * 
     * @type {string}
     * @memberof PlatformproductUpdate
     */
    'event': PlatformproductUpdateEventEnum;
    /**
     * 
     * @type {Array<PlatformproductUpdateData>}
     * @memberof PlatformproductUpdate
     */
    'data': Array<PlatformproductUpdateData>;
}

export const PlatformproductUpdateEventEnum = {
    PlatformproductUpdate: 'platformproduct-update'
} as const;

export type PlatformproductUpdateEventEnum = typeof PlatformproductUpdateEventEnum[keyof typeof PlatformproductUpdateEventEnum];

/**
 * 
 * @export
 * @interface PlatformproductUpdateData
 */
export interface PlatformproductUpdateData {
    /**
     * 
     * @type {string}
     * @memberof PlatformproductUpdateData
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlatformproductUpdateData
     */
    'retailerId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PlatformproductUpdateData
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlatformproductUpdateData
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof PlatformproductUpdateData
     */
    'price'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PlatformproductUpdateData
     */
    'stock'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PlatformproductUpdateData
     */
    'totalStockSold'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PlatformproductUpdateData
     */
    'currency'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof PlatformproductUpdateData
     */
    'isHidden'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PlatformproductUpdateData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof PlatformproductUpdateData
     */
    'accountId': string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof PlatformproductUpdateData
     */
    'imageUrls'?: { [key: string]: string; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof PlatformproductUpdateData
     */
    'reviewStatus'?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof PlatformproductUpdateData
     */
    'availability'?: PlatformproductUpdateDataAvailabilityEnum;
    /**
     * 
     * @type {string}
     * @memberof PlatformproductUpdateData
     */
    'syncStatus'?: PlatformproductUpdateDataSyncStatusEnum;
    /**
     * 
     * @type {boolean}
     * @memberof PlatformproductUpdateData
     */
    'isSyncing'?: boolean;
    /**
     * 
     * @type {AccountInsertDataErrorAllOf}
     * @memberof PlatformproductUpdateData
     */
    'error'?: AccountInsertDataErrorAllOf;
    /**
     * 
     * @type {string}
     * @memberof PlatformproductUpdateData
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlatformproductUpdateData
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlatformproductUpdateData
     */
    'cursor'?: string;
}

export const PlatformproductUpdateDataAvailabilityEnum = {
    InStock: 'in-stock'
} as const;

export type PlatformproductUpdateDataAvailabilityEnum = typeof PlatformproductUpdateDataAvailabilityEnum[keyof typeof PlatformproductUpdateDataAvailabilityEnum];
export const PlatformproductUpdateDataSyncStatusEnum = {
    Synced: 'synced',
    PendingCreate: 'pendingCreate',
    PendingUpdate: 'pendingUpdate',
    PendingDelete: 'pendingDelete'
} as const;

export type PlatformproductUpdateDataSyncStatusEnum = typeof PlatformproductUpdateDataSyncStatusEnum[keyof typeof PlatformproductUpdateDataSyncStatusEnum];

/**
 * 
 * @export
 * @interface PostEventSubscription
 */
export interface PostEventSubscription {
    /**
     * whether the subscription is enabled
     * @type {boolean}
     * @memberof PostEventSubscription
     */
    'enabled': boolean;
    /**
     * the events to listen for
     * @type {Array<EventName>}
     * @memberof PostEventSubscription
     */
    'events'?: Array<EventName>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PostEventSubscription
     */
    'accounts'?: Array<string>;
    /**
     * Optionally specify ajv schema object, if validation of data fails -- the subscription will not fire
     * @type {{ [key: string]: any; }}
     * @memberof PostEventSubscription
     */
    'schema'?: { [key: string]: any; } | null;
    /**
     * Web hook url to fire to
     * @type {string}
     * @memberof PostEventSubscription
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface PostMessageBySecretRequest
 */
export interface PostMessageBySecretRequest {
    /**
     * 
     * @type {string}
     * @memberof PostMessageBySecretRequest
     */
    'event': string;
    /**
     * 
     * @type {Array<{ [key: string]: any; }>}
     * @memberof PostMessageBySecretRequest
     */
    'data': Array<{ [key: string]: any; }>;
}
/**
 * 
 * @export
 * @interface PresenceUpdate
 */
export interface PresenceUpdate {
    /**
     * 
     * @type {string}
     * @memberof PresenceUpdate
     */
    'event': PresenceUpdateEventEnum;
    /**
     * 
     * @type {Array<PresenceUpdateData>}
     * @memberof PresenceUpdate
     */
    'data': Array<PresenceUpdateData>;
}

export const PresenceUpdateEventEnum = {
    PresenceUpdate: 'presence-update'
} as const;

export type PresenceUpdateEventEnum = typeof PresenceUpdateEventEnum[keyof typeof PresenceUpdateEventEnum];

/**
 * 
 * @export
 * @interface PresenceUpdateData
 */
export interface PresenceUpdateData {
    /**
     * 
     * @type {string}
     * @memberof PresenceUpdateData
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof PresenceUpdateData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof PresenceUpdateData
     */
    'contactId'?: string;
    /**
     * if a known team member has this presence
     * @type {string}
     * @memberof PresenceUpdateData
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PresenceUpdateData
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PresenceUpdateData
     */
    'type'?: PresenceUpdateDataTypeEnum;
}

export const PresenceUpdateDataTypeEnum = {
    Available: 'available',
    Unavailable: 'unavailable',
    Typing: 'typing',
    StoppedTyping: 'stoppedTyping'
} as const;

export type PresenceUpdateDataTypeEnum = typeof PresenceUpdateDataTypeEnum[keyof typeof PresenceUpdateDataTypeEnum];

/**
 * 
 * @export
 * @interface PurchasedetailDeleteData
 */
export interface PurchasedetailDeleteData {
    /**
     * 
     * @type {string}
     * @memberof PurchasedetailDeleteData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof PurchasedetailDeleteData
     */
    'teamId': string;
}
/**
 * 
 * @export
 * @interface PurchasedetailInsertData
 */
export interface PurchasedetailInsertData {
    /**
     * 
     * @type {string}
     * @memberof PurchasedetailInsertData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof PurchasedetailInsertData
     */
    'productId': string;
    /**
     * 
     * @type {string}
     * @memberof PurchasedetailInsertData
     */
    'teamId': string;
    /**
     * 
     * @type {string}
     * @memberof PurchasedetailInsertData
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof PurchasedetailInsertData
     */
    'date': string;
    /**
     * 
     * @type {string}
     * @memberof PurchasedetailInsertData
     */
    'expiry'?: string;
    /**
     * 
     * @type {PurchasedetailInsertDataPrice}
     * @memberof PurchasedetailInsertData
     */
    'price': PurchasedetailInsertDataPrice;
    /**
     * 
     * @type {PurchasedetailInsertDataTrial}
     * @memberof PurchasedetailInsertData
     */
    'trial'?: PurchasedetailInsertDataTrial | null;
    /**
     * 
     * @type {string}
     * @memberof PurchasedetailInsertData
     */
    'status'?: PurchasedetailInsertDataStatusEnum;
    /**
     * 
     * @type {PurchasedetailInsertDataStripe}
     * @memberof PurchasedetailInsertData
     */
    'stripe'?: PurchasedetailInsertDataStripe | null;
}

export const PurchasedetailInsertDataStatusEnum = {
    Paid: 'paid',
    Cancelled: 'cancelled',
    PendingPayment: 'pending-payment',
    Voided: 'voided'
} as const;

export type PurchasedetailInsertDataStatusEnum = typeof PurchasedetailInsertDataStatusEnum[keyof typeof PurchasedetailInsertDataStatusEnum];

/**
 * 
 * @export
 * @interface PurchasedetailInsertDataPrice
 */
export interface PurchasedetailInsertDataPrice {
    /**
     * 
     * @type {number}
     * @memberof PurchasedetailInsertDataPrice
     */
    'value': number;
    /**
     * 
     * @type {string}
     * @memberof PurchasedetailInsertDataPrice
     */
    'currency': string;
}
/**
 * 
 * @export
 * @interface PurchasedetailInsertDataStripe
 */
export interface PurchasedetailInsertDataStripe {
    /**
     * 
     * @type {string}
     * @memberof PurchasedetailInsertDataStripe
     */
    'invoiceId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchasedetailInsertDataStripe
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchasedetailInsertDataStripe
     */
    'subscriptionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchasedetailInsertDataStripe
     */
    'subscriptionItemId'?: string;
}
/**
 * 
 * @export
 * @interface PurchasedetailInsertDataTrial
 */
export interface PurchasedetailInsertDataTrial {
    /**
     * 
     * @type {string}
     * @memberof PurchasedetailInsertDataTrial
     */
    'expiry'?: string;
}
/**
 * 
 * @export
 * @interface PurchasedetailUpdateData
 */
export interface PurchasedetailUpdateData {
    /**
     * 
     * @type {string}
     * @memberof PurchasedetailUpdateData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof PurchasedetailUpdateData
     */
    'productId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchasedetailUpdateData
     */
    'teamId': string;
    /**
     * 
     * @type {string}
     * @memberof PurchasedetailUpdateData
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchasedetailUpdateData
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchasedetailUpdateData
     */
    'expiry'?: string;
    /**
     * 
     * @type {PurchasedetailInsertDataPrice}
     * @memberof PurchasedetailUpdateData
     */
    'price'?: PurchasedetailInsertDataPrice;
    /**
     * 
     * @type {PurchasedetailInsertDataTrial}
     * @memberof PurchasedetailUpdateData
     */
    'trial'?: PurchasedetailInsertDataTrial | null;
    /**
     * 
     * @type {string}
     * @memberof PurchasedetailUpdateData
     */
    'status'?: PurchasedetailUpdateDataStatusEnum;
    /**
     * 
     * @type {PurchasedetailInsertDataStripe}
     * @memberof PurchasedetailUpdateData
     */
    'stripe'?: PurchasedetailInsertDataStripe | null;
}

export const PurchasedetailUpdateDataStatusEnum = {
    Paid: 'paid',
    Cancelled: 'cancelled',
    PendingPayment: 'pending-payment',
    Voided: 'voided'
} as const;

export type PurchasedetailUpdateDataStatusEnum = typeof PurchasedetailUpdateDataStatusEnum[keyof typeof PurchasedetailUpdateDataStatusEnum];

/**
 * 
 * @export
 * @interface PushNotification
 */
export interface PushNotification {
    /**
     * 
     * @type {string}
     * @memberof PushNotification
     */
    'event': PushNotificationEventEnum;
    /**
     * 
     * @type {Array<PushNotificationData>}
     * @memberof PushNotification
     */
    'data': Array<PushNotificationData>;
}

export const PushNotificationEventEnum = {
    PushNotification: 'push-notification'
} as const;

export type PushNotificationEventEnum = typeof PushNotificationEventEnum[keyof typeof PushNotificationEventEnum];

/**
 * 
 * @export
 * @interface PushNotificationData
 */
export interface PushNotificationData {
    /**
     * 
     * @type {string}
     * @memberof PushNotificationData
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof PushNotificationData
     */
    'text': string;
    /**
     * When true, the notification is only shown if the user is online
     * @type {boolean}
     * @memberof PushNotificationData
     */
    'onlineOnly'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PushNotificationData
     */
    'teamId': string;
    /**
     * The path to open when the notification is clicked
     * @type {string}
     * @memberof PushNotificationData
     */
    'path'?: string;
    /**
     * The image to show in the notification
     * @type {string}
     * @memberof PushNotificationData
     */
    'imgUrl'?: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof PushNotificationData
     */
    'context'?: { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface ShopproductInsert
 */
export interface ShopproductInsert {
    /**
     * 
     * @type {string}
     * @memberof ShopproductInsert
     */
    'event': ShopproductInsertEventEnum;
    /**
     * 
     * @type {Array<ShopproductInsertData>}
     * @memberof ShopproductInsert
     */
    'data': Array<ShopproductInsertData>;
}

export const ShopproductInsertEventEnum = {
    ShopproductInsert: 'shopproduct-insert'
} as const;

export type ShopproductInsertEventEnum = typeof ShopproductInsertEventEnum[keyof typeof ShopproductInsertEventEnum];

/**
 * Product model for Waha Shop
 * @export
 * @interface ShopproductInsertData
 */
export interface ShopproductInsertData {
    /**
     * 
     * @type {string}
     * @memberof ShopproductInsertData
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ShopproductInsertData
     */
    'retailerId'?: string | null;
    /**
     * 
     * @type {Array<ShopproductInsertDataAccountSyncStatusesInner>}
     * @memberof ShopproductInsertData
     */
    'accountSyncStatuses'?: Array<ShopproductInsertDataAccountSyncStatusesInner>;
    /**
     * Specify category id
     * @type {string}
     * @memberof ShopproductInsertData
     */
    'categoryId'?: string;
    /**
     * 
     * @type {ShopproductInsertDataCategory}
     * @memberof ShopproductInsertData
     */
    'category'?: ShopproductInsertDataCategory;
    /**
     * 
     * @type {string}
     * @memberof ShopproductInsertData
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof ShopproductInsertData
     */
    'price': number | null;
    /**
     * 
     * @type {string}
     * @memberof ShopproductInsertData
     */
    'currency'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ShopproductInsertData
     */
    'isHidden': boolean;
    /**
     * 
     * @type {string}
     * @memberof ShopproductInsertData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ShopproductInsertData
     */
    'teamId': string;
    /**
     * 
     * @type {Array<ShopproductInsertDataImageUrlsInner>}
     * @memberof ShopproductInsertData
     */
    'imageUrls': Array<ShopproductInsertDataImageUrlsInner>;
    /**
     * 
     * @type {string}
     * @memberof ShopproductInsertData
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ShopproductInsertData
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ShopproductInsertData
     */
    'createdBy': string;
}
/**
 * 
 * @export
 * @interface ShopproductInsertDataAccountSyncStatusesInner
 */
export interface ShopproductInsertDataAccountSyncStatusesInner {
    /**
     * 
     * @type {string}
     * @memberof ShopproductInsertDataAccountSyncStatusesInner
     */
    'accountId': string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopproductInsertDataAccountSyncStatusesInner
     */
    'ProductSyncStatus'?: ShopproductInsertDataAccountSyncStatusesInnerProductSyncStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof ShopproductInsertDataAccountSyncStatusesInner
     */
    'lastSyncDate': string | null;
    /**
     * Id of the team member that syncs the product from chatdaddy->WhatsApp
     * @type {string}
     * @memberof ShopproductInsertDataAccountSyncStatusesInner
     */
    'syncedBy': string;
}

export const ShopproductInsertDataAccountSyncStatusesInnerProductSyncStatusEnum = {
    Synced: 'synced',
    Failed: 'failed',
    Syncing: 'syncing'
} as const;

export type ShopproductInsertDataAccountSyncStatusesInnerProductSyncStatusEnum = typeof ShopproductInsertDataAccountSyncStatusesInnerProductSyncStatusEnum[keyof typeof ShopproductInsertDataAccountSyncStatusesInnerProductSyncStatusEnum];

/**
 * 
 * @export
 * @interface ShopproductInsertDataCategory
 */
export interface ShopproductInsertDataCategory {
    /**
     * 
     * @type {string}
     * @memberof ShopproductInsertDataCategory
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ShopproductInsertDataCategory
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof ShopproductInsertDataCategory
     */
    'productCount': number;
    /**
     * 
     * @type {string}
     * @memberof ShopproductInsertDataCategory
     */
    'teamId': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShopproductInsertDataCategory
     */
    'productId'?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface ShopproductInsertDataImageUrlsInner
 */
export interface ShopproductInsertDataImageUrlsInner {
    /**
     * 
     * @type {string}
     * @memberof ShopproductInsertDataImageUrlsInner
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface StaleAccountNotification
 */
export interface StaleAccountNotification {
    /**
     * 
     * @type {string}
     * @memberof StaleAccountNotification
     */
    'event': StaleAccountNotificationEventEnum;
    /**
     * 
     * @type {Array<StaleAccountNotificationData>}
     * @memberof StaleAccountNotification
     */
    'data': Array<StaleAccountNotificationData>;
}

export const StaleAccountNotificationEventEnum = {
    StaleAccountNotification: 'stale-account-notification'
} as const;

export type StaleAccountNotificationEventEnum = typeof StaleAccountNotificationEventEnum[keyof typeof StaleAccountNotificationEventEnum];

/**
 * 
 * @export
 * @interface StaleAccountNotificationData
 */
export interface StaleAccountNotificationData {
    /**
     * 
     * @type {string}
     * @memberof StaleAccountNotificationData
     */
    'accountId': string;
}
/**
 * 
 * @export
 * @interface SubscriptionsDelete200Response
 */
export interface SubscriptionsDelete200Response {
    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionsDelete200Response
     */
    'success'?: boolean;
}
/**
 * 
 * @export
 * @interface SubscriptionsGet200Response
 */
export interface SubscriptionsGet200Response {
    /**
     * 
     * @type {Array<EventSubscription>}
     * @memberof SubscriptionsGet200Response
     */
    'subscriptions': Array<EventSubscription>;
}
/**
 * 
 * @export
 * @interface TagDelete
 */
export interface TagDelete {
    /**
     * 
     * @type {string}
     * @memberof TagDelete
     */
    'event': TagDeleteEventEnum;
    /**
     * 
     * @type {Array<TagDeleteData>}
     * @memberof TagDelete
     */
    'data': Array<TagDeleteData>;
}

export const TagDeleteEventEnum = {
    TagDelete: 'tag-delete'
} as const;

export type TagDeleteEventEnum = typeof TagDeleteEventEnum[keyof typeof TagDeleteEventEnum];

/**
 * 
 * @export
 * @interface TagDeleteData
 */
export interface TagDeleteData {
    /**
     * 
     * @type {string}
     * @memberof TagDeleteData
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface TagInsert
 */
export interface TagInsert {
    /**
     * 
     * @type {string}
     * @memberof TagInsert
     */
    'event': TagInsertEventEnum;
    /**
     * 
     * @type {Array<TagInsertData>}
     * @memberof TagInsert
     */
    'data': Array<TagInsertData>;
}

export const TagInsertEventEnum = {
    TagInsert: 'tag-insert'
} as const;

export type TagInsertEventEnum = typeof TagInsertEventEnum[keyof typeof TagInsertEventEnum];

/**
 * 
 * @export
 * @interface TagInsertData
 */
export interface TagInsertData {
    /**
     * 
     * @type {string}
     * @memberof TagInsertData
     */
    'name': string;
    /**
     * 
     * @type {object}
     * @memberof TagInsertData
     */
    'filters'?: object | null;
    /**
     * 
     * @type {string}
     * @memberof TagInsertData
     */
    'color'?: string;
    /**
     * 
     * @type {TagInsertDataValidation}
     * @memberof TagInsertData
     */
    'validation'?: TagInsertDataValidation;
    /**
     * 
     * @type {string}
     * @memberof TagInsertData
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof TagInsertData
     */
    'createdBy': string;
}
/**
 * @type TagInsertDataValidation
 * @export
 */
export type TagInsertDataValidation = TagInsertDataValidationOneOf | TagInsertDataValidationOneOf1;

/**
 * 
 * @export
 * @interface TagInsertDataValidationOneOf
 */
export interface TagInsertDataValidationOneOf {
    /**
     * 
     * @type {string}
     * @memberof TagInsertDataValidationOneOf
     */
    'type'?: TagInsertDataValidationOneOfTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof TagInsertDataValidationOneOf
     */
    'format'?: TagInsertDataValidationOneOfFormatEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof TagInsertDataValidationOneOf
     */
    'enum'?: Array<string>;
}

export const TagInsertDataValidationOneOfTypeEnum = {
    String: 'string'
} as const;

export type TagInsertDataValidationOneOfTypeEnum = typeof TagInsertDataValidationOneOfTypeEnum[keyof typeof TagInsertDataValidationOneOfTypeEnum];
export const TagInsertDataValidationOneOfFormatEnum = {
    Email: 'email',
    Phone: 'phone',
    Uri: 'uri',
    Attachment: 'attachment',
    TeamMember: 'team-member',
    DateTime: 'date-time'
} as const;

export type TagInsertDataValidationOneOfFormatEnum = typeof TagInsertDataValidationOneOfFormatEnum[keyof typeof TagInsertDataValidationOneOfFormatEnum];

/**
 * 
 * @export
 * @interface TagInsertDataValidationOneOf1
 */
export interface TagInsertDataValidationOneOf1 {
    /**
     * 
     * @type {string}
     * @memberof TagInsertDataValidationOneOf1
     */
    'type'?: TagInsertDataValidationOneOf1TypeEnum;
}

export const TagInsertDataValidationOneOf1TypeEnum = {
    Number: 'number',
    Integer: 'integer',
    Boolean: 'boolean'
} as const;

export type TagInsertDataValidationOneOf1TypeEnum = typeof TagInsertDataValidationOneOf1TypeEnum[keyof typeof TagInsertDataValidationOneOf1TypeEnum];

/**
 * 
 * @export
 * @interface TagUpdate
 */
export interface TagUpdate {
    /**
     * 
     * @type {string}
     * @memberof TagUpdate
     */
    'event': TagUpdateEventEnum;
    /**
     * 
     * @type {Array<TagUpdateData>}
     * @memberof TagUpdate
     */
    'data': Array<TagUpdateData>;
}

export const TagUpdateEventEnum = {
    TagUpdate: 'tag-update'
} as const;

export type TagUpdateEventEnum = typeof TagUpdateEventEnum[keyof typeof TagUpdateEventEnum];

/**
 * 
 * @export
 * @interface TagUpdateData
 */
export interface TagUpdateData {
    /**
     * 
     * @type {string}
     * @memberof TagUpdateData
     */
    'name': string;
    /**
     * 
     * @type {object}
     * @memberof TagUpdateData
     */
    'filters'?: object | null;
    /**
     * 
     * @type {string}
     * @memberof TagUpdateData
     */
    'color'?: string;
    /**
     * 
     * @type {TagInsertDataValidation}
     * @memberof TagUpdateData
     */
    'validation'?: TagInsertDataValidation;
    /**
     * 
     * @type {string}
     * @memberof TagUpdateData
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TagUpdateData
     */
    'createdBy'?: string;
}
/**
 * 
 * @export
 * @interface TeamDelete
 */
export interface TeamDelete {
    /**
     * 
     * @type {string}
     * @memberof TeamDelete
     */
    'event': TeamDeleteEventEnum;
    /**
     * 
     * @type {Array<TeamDeleteData>}
     * @memberof TeamDelete
     */
    'data': Array<TeamDeleteData>;
}

export const TeamDeleteEventEnum = {
    TeamDelete: 'team-delete'
} as const;

export type TeamDeleteEventEnum = typeof TeamDeleteEventEnum[keyof typeof TeamDeleteEventEnum];

/**
 * 
 * @export
 * @interface TeamDeleteData
 */
export interface TeamDeleteData {
    /**
     * 
     * @type {string}
     * @memberof TeamDeleteData
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface TeamInsert
 */
export interface TeamInsert {
    /**
     * 
     * @type {string}
     * @memberof TeamInsert
     */
    'event': TeamInsertEventEnum;
    /**
     * 
     * @type {Array<TeamInsertData>}
     * @memberof TeamInsert
     */
    'data': Array<TeamInsertData>;
}

export const TeamInsertEventEnum = {
    TeamInsert: 'team-insert'
} as const;

export type TeamInsertEventEnum = typeof TeamInsertEventEnum[keyof typeof TeamInsertEventEnum];

/**
 * 
 * @export
 * @interface TeamInsertData
 */
export interface TeamInsertData {
    /**
     * 
     * @type {string}
     * @memberof TeamInsertData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof TeamInsertData
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof TeamInsertData
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof TeamInsertData
     */
    'createdBy'?: string;
    /**
     * 
     * @type {TeamInsertDataCreator}
     * @memberof TeamInsertData
     */
    'creator'?: TeamInsertDataCreator;
    /**
     * 
     * @type {string}
     * @memberof TeamInsertData
     */
    'region': string;
    /**
     * 
     * @type {string}
     * @memberof TeamInsertData
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof TeamInsertData
     */
    'isAdmin'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof TeamInsertData
     */
    'scopes': Array<TeamInsertDataScopesEnum>;
    /**
     * 
     * @type {TeamInsertDataMetadata}
     * @memberof TeamInsertData
     */
    'metadata': TeamInsertDataMetadata;
    /**
     * 
     * @type {string}
     * @memberof TeamInsertData
     */
    'partnerAdmin'?: string | null;
    /**
     * 
     * @type {TeamInsertDataZapierToken}
     * @memberof TeamInsertData
     */
    'zapierToken'?: TeamInsertDataZapierToken | null;
    /**
     * 
     * @type {Array<TeamInsertDataOnboardingStepsDoneInner>}
     * @memberof TeamInsertData
     */
    'onboardingStepsDone'?: Array<TeamInsertDataOnboardingStepsDoneInner>;
    /**
     * 
     * @type {number}
     * @memberof TeamInsertData
     */
    'onboardingScore'?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamInsertData
     */
    'connectedChannelCount'?: number;
    /**
     * 
     * @type {string}
     * @memberof TeamInsertData
     */
    'creditCustomerId'?: string | null;
}

export const TeamInsertDataScopesEnum = {
    ContactsReadAssigned: 'CONTACTS_READ_ASSIGNED',
    ContactsReadAll: 'CONTACTS_READ_ALL',
    ContactsCreate: 'CONTACTS_CREATE',
    ContactsDelete: 'CONTACTS_DELETE',
    ContactsUpdate: 'CONTACTS_UPDATE',
    CampaignsRead: 'CAMPAIGNS_READ',
    CampaignsCreate: 'CAMPAIGNS_CREATE',
    CampaignsDelete: 'CAMPAIGNS_DELETE',
    CampaignsUpdate: 'CAMPAIGNS_UPDATE',
    KeywordRead: 'KEYWORD_READ',
    KeywordCreate: 'KEYWORD_CREATE',
    KeywordDelete: 'KEYWORD_DELETE',
    KeywordUpdate: 'KEYWORD_UPDATE',
    TemplatesRead: 'TEMPLATES_READ',
    TemplatesCreate: 'TEMPLATES_CREATE',
    TemplatesDelete: 'TEMPLATES_DELETE',
    TemplatesUpdate: 'TEMPLATES_UPDATE',
    TagsRead: 'TAGS_READ',
    TagsCreate: 'TAGS_CREATE',
    TagsDelete: 'TAGS_DELETE',
    TokensRead: 'TOKENS_READ',
    TokensDelete: 'TOKENS_DELETE',
    UsersPatch: 'USERS_PATCH',
    ContactsExportButton: 'CONTACTS_EXPORT_BUTTON',
    TeamUpdate: 'TEAM_UPDATE',
    AccountCreate: 'ACCOUNT_CREATE',
    AccountPatch: 'ACCOUNT_PATCH',
    AccountDelete: 'ACCOUNT_DELETE',
    AccountRead: 'ACCOUNT_READ',
    CreateSubUser: 'CREATE_SUB_USER',
    TeamlinkCreate: 'TEAMLINK_CREATE',
    TeammembersUpdate: 'TEAMMEMBERS_UPDATE',
    TeammembersRead: 'TEAMMEMBERS_READ',
    LogoutSubUser: 'LOGOUT_SUB_USER',
    ChatsAccessAll: 'CHATS_ACCESS_ALL',
    ChatsAccessAssigned: 'CHATS_ACCESS_ASSIGNED',
    ChatsDelete: 'CHATS_DELETE',
    MessagesSendToAssigned: 'MESSAGES_SEND_TO_ASSIGNED',
    MessagesSendToAll: 'MESSAGES_SEND_TO_ALL',
    EditNotes: 'EDIT_NOTES',
    MessagesDelete: 'MESSAGES_DELETE',
    GroupsCreate: 'GROUPS_CREATE',
    GroupsUpdate: 'GROUPS_UPDATE',
    CreateNotes: 'CREATE_NOTES',
    ChatdaddyHook: 'CHATDADDY_HOOK',
    NotificationRead: 'NOTIFICATION_READ',
    NotificationCreate: 'NOTIFICATION_CREATE',
    NotificationUpdate: 'NOTIFICATION_UPDATE',
    NotificationDelete: 'NOTIFICATION_DELETE',
    DeleteNotes: 'DELETE_NOTES',
    IntegrationsUpdate: 'INTEGRATIONS_UPDATE',
    AdminPanelAccess: 'ADMIN_PANEL_ACCESS',
    DashboardCreate: 'DASHBOARD_CREATE',
    DashboardDelete: 'DASHBOARD_DELETE',
    PaymentsRead: 'PAYMENTS_READ',
    PaymentsUpdate: 'PAYMENTS_UPDATE',
    WaLiveEvents: 'WA_LIVE_EVENTS',
    PartnerAdminPanelAccess: 'PARTNER_ADMIN_PANEL_ACCESS',
    ProductsGet: 'PRODUCTS_GET',
    ProductsCreate: 'PRODUCTS_CREATE',
    ProductsUpdate: 'PRODUCTS_UPDATE',
    ProductsDelete: 'PRODUCTS_DELETE',
    PaymentIntegrationRead: 'PAYMENT_INTEGRATION_READ',
    PaymentIntegrationWrite: 'PAYMENT_INTEGRATION_WRITE',
    PaymentRecordsRead: 'PAYMENT_RECORDS_READ',
    PaymentRecordsWrite: 'PAYMENT_RECORDS_WRITE',
    MetricsGet: 'METRICS_GET',
    AccountsReadAssigned: 'ACCOUNTS_READ_ASSIGNED',
    AutocompleteGet: 'AUTOCOMPLETE_GET',
    MessagesSearch: 'MESSAGES_SEARCH',
    WidgetEdit: 'WIDGET_EDIT',
    CouponRead: 'COUPON_READ',
    CouponCreate: 'COUPON_CREATE',
    CouponDelete: 'COUPON_DELETE',
    CouponUpdate: 'COUPON_UPDATE',
    TeammembersReadContactDetails: 'TEAMMEMBERS_READ_CONTACT_DETAILS',
    TeammembersReadMessageDetails: 'TEAMMEMBERS_READ_MESSAGE_DETAILS',
    CallPhoneCreate: 'CALL_PHONE_CREATE',
    CallPhoneDelete: 'CALL_PHONE_DELETE',
    MakeCalls: 'MAKE_CALLS',
    CallLogsRead: 'CALL_LOGS_READ'
} as const;

export type TeamInsertDataScopesEnum = typeof TeamInsertDataScopesEnum[keyof typeof TeamInsertDataScopesEnum];

/**
 * 
 * @export
 * @interface TeamInsertDataCreator
 */
export interface TeamInsertDataCreator {
    /**
     * 
     * @type {string}
     * @memberof TeamInsertDataCreator
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof TeamInsertDataCreator
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof TeamInsertDataCreator
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof TeamInsertDataCreator
     */
    'disabledAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamInsertDataCreator
     */
    'fullName': string;
    /**
     * 
     * @type {string}
     * @memberof TeamInsertDataCreator
     */
    'lastUsedTeamId'?: string;
    /**
     * 
     * @type {number}
     * @memberof TeamInsertDataCreator
     */
    'phoneNumber': number | null;
    /**
     * 
     * @type {string}
     * @memberof TeamInsertDataCreator
     */
    'emailAddress'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TeamInsertDataCreator
     */
    'createdByMethod'?: TeamInsertDataCreatorCreatedByMethodEnum;
    /**
     * 
     * @type {UserInsertDataNotify}
     * @memberof TeamInsertDataCreator
     * @deprecated
     */
    'notify': UserInsertDataNotify;
    /**
     * 
     * @type {UserInsertDataNotificationPreferences}
     * @memberof TeamInsertDataCreator
     */
    'notificationPreferences': UserInsertDataNotificationPreferences;
    /**
     * 
     * @type {string}
     * @memberof TeamInsertDataCreator
     */
    'referralCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TeamInsertDataCreator
     */
    'signature'?: string | null;
    /**
     * 
     * @type {Array<UserInsertDataWebPushSubscriptionsInner>}
     * @memberof TeamInsertDataCreator
     */
    'webPushSubscriptions'?: Array<UserInsertDataWebPushSubscriptionsInner>;
    /**
     * 
     * @type {string}
     * @memberof TeamInsertDataCreator
     */
    'partnership'?: string | null;
}

export const TeamInsertDataCreatorCreatedByMethodEnum = {
    AdminPanel: 'admin-panel',
    Otp: 'otp',
    Boutir: 'boutir',
    InstantReg: 'instant-reg',
    Firebase: 'firebase',
    TeamMember: 'team-member'
} as const;

export type TeamInsertDataCreatorCreatedByMethodEnum = typeof TeamInsertDataCreatorCreatedByMethodEnum[keyof typeof TeamInsertDataCreatorCreatedByMethodEnum];

/**
 * 
 * @export
 * @interface TeamInsertDataMetadata
 */
export interface TeamInsertDataMetadata {
    /**
     * 
     * @type {string}
     * @memberof TeamInsertDataMetadata
     */
    'companyName'?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamInsertDataMetadata
     */
    'companyEmailAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamInsertDataMetadata
     */
    'companyWebsite'?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamInsertDataMetadata
     */
    'industry'?: string;
}
/**
 * 
 * @export
 * @interface TeamInsertDataOnboardingStepsDoneInner
 */
export interface TeamInsertDataOnboardingStepsDoneInner {
    /**
     * 
     * @type {string}
     * @memberof TeamInsertDataOnboardingStepsDoneInner
     */
    'id': TeamInsertDataOnboardingStepsDoneInnerIdEnum;
    /**
     * 
     * @type {string}
     * @memberof TeamInsertDataOnboardingStepsDoneInner
     */
    'doneAt': string;
    /**
     * 
     * @type {string}
     * @memberof TeamInsertDataOnboardingStepsDoneInner
     */
    'doneBy': string;
}

export const TeamInsertDataOnboardingStepsDoneInnerIdEnum = {
    ConnectedWa: 'connectedWa',
    SentMessage: 'sentMessage',
    UsedMobileVersion: 'usedMobileVersion',
    InvitedTeamMember: 'invitedTeamMember',
    CreatedNote: 'createdNote',
    CreatedTag: 'createdTag',
    CreatedMessageFlow: 'createdMessageFlow',
    SentMessageFlowByShortcut: 'sentMessageFlowByShortcut',
    AssignedChatToTeamMember: 'assignedChatToTeamMember',
    ScheduledAMessage: 'scheduledAMessage',
    CreatedMessageFlowWithButtons: 'createdMessageFlowWithButtons',
    SentMessageFlowWithButtons: 'sentMessageFlowWithButtons',
    AutoTagOrAssignWithMessageFlow: 'autoTagOrAssignWithMessageFlow',
    CreatedFirstBroadcast: 'createdFirstBroadcast',
    ScheduledFirstBroadcast: 'scheduledFirstBroadcast',
    ToggleOfflineBotOn: 'toggleOfflineBotOn',
    CreatedFirstKeywordBot: 'createdFirstKeywordBot',
    ConnectFirstIntegration: 'connectFirstIntegration',
    ImportedContacts: 'importedContacts',
    AdddedACustomFieldToContact: 'adddedACustomFieldToContact'
} as const;

export type TeamInsertDataOnboardingStepsDoneInnerIdEnum = typeof TeamInsertDataOnboardingStepsDoneInnerIdEnum[keyof typeof TeamInsertDataOnboardingStepsDoneInnerIdEnum];

/**
 * 
 * @export
 * @interface TeamInsertDataZapierToken
 */
export interface TeamInsertDataZapierToken {
    /**
     * 
     * @type {string}
     * @memberof TeamInsertDataZapierToken
     */
    'token': string;
    /**
     * 
     * @type {string}
     * @memberof TeamInsertDataZapierToken
     */
    'expiresAt': string;
}
/**
 * 
 * @export
 * @interface TeamUpdate
 */
export interface TeamUpdate {
    /**
     * 
     * @type {string}
     * @memberof TeamUpdate
     */
    'event': TeamUpdateEventEnum;
    /**
     * 
     * @type {Array<TeamUpdateData>}
     * @memberof TeamUpdate
     */
    'data': Array<TeamUpdateData>;
}

export const TeamUpdateEventEnum = {
    TeamUpdate: 'team-update'
} as const;

export type TeamUpdateEventEnum = typeof TeamUpdateEventEnum[keyof typeof TeamUpdateEventEnum];

/**
 * 
 * @export
 * @interface TeamUpdateData
 */
export interface TeamUpdateData {
    /**
     * 
     * @type {string}
     * @memberof TeamUpdateData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof TeamUpdateData
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamUpdateData
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamUpdateData
     */
    'createdBy'?: string;
    /**
     * 
     * @type {TeamInsertDataCreator}
     * @memberof TeamUpdateData
     */
    'creator'?: TeamInsertDataCreator;
    /**
     * 
     * @type {string}
     * @memberof TeamUpdateData
     */
    'region'?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamUpdateData
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof TeamUpdateData
     */
    'isAdmin'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof TeamUpdateData
     */
    'scopes'?: Array<TeamUpdateDataScopesEnum>;
    /**
     * 
     * @type {TeamInsertDataMetadata}
     * @memberof TeamUpdateData
     */
    'metadata'?: TeamInsertDataMetadata;
    /**
     * 
     * @type {string}
     * @memberof TeamUpdateData
     */
    'partnerAdmin'?: string | null;
    /**
     * 
     * @type {TeamInsertDataZapierToken}
     * @memberof TeamUpdateData
     */
    'zapierToken'?: TeamInsertDataZapierToken | null;
    /**
     * 
     * @type {Array<TeamInsertDataOnboardingStepsDoneInner>}
     * @memberof TeamUpdateData
     */
    'onboardingStepsDone'?: Array<TeamInsertDataOnboardingStepsDoneInner>;
    /**
     * 
     * @type {number}
     * @memberof TeamUpdateData
     */
    'onboardingScore'?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamUpdateData
     */
    'connectedChannelCount'?: number;
    /**
     * 
     * @type {string}
     * @memberof TeamUpdateData
     */
    'creditCustomerId'?: string | null;
}

export const TeamUpdateDataScopesEnum = {
    ContactsReadAssigned: 'CONTACTS_READ_ASSIGNED',
    ContactsReadAll: 'CONTACTS_READ_ALL',
    ContactsCreate: 'CONTACTS_CREATE',
    ContactsDelete: 'CONTACTS_DELETE',
    ContactsUpdate: 'CONTACTS_UPDATE',
    CampaignsRead: 'CAMPAIGNS_READ',
    CampaignsCreate: 'CAMPAIGNS_CREATE',
    CampaignsDelete: 'CAMPAIGNS_DELETE',
    CampaignsUpdate: 'CAMPAIGNS_UPDATE',
    KeywordRead: 'KEYWORD_READ',
    KeywordCreate: 'KEYWORD_CREATE',
    KeywordDelete: 'KEYWORD_DELETE',
    KeywordUpdate: 'KEYWORD_UPDATE',
    TemplatesRead: 'TEMPLATES_READ',
    TemplatesCreate: 'TEMPLATES_CREATE',
    TemplatesDelete: 'TEMPLATES_DELETE',
    TemplatesUpdate: 'TEMPLATES_UPDATE',
    TagsRead: 'TAGS_READ',
    TagsCreate: 'TAGS_CREATE',
    TagsDelete: 'TAGS_DELETE',
    TokensRead: 'TOKENS_READ',
    TokensDelete: 'TOKENS_DELETE',
    UsersPatch: 'USERS_PATCH',
    ContactsExportButton: 'CONTACTS_EXPORT_BUTTON',
    TeamUpdate: 'TEAM_UPDATE',
    AccountCreate: 'ACCOUNT_CREATE',
    AccountPatch: 'ACCOUNT_PATCH',
    AccountDelete: 'ACCOUNT_DELETE',
    AccountRead: 'ACCOUNT_READ',
    CreateSubUser: 'CREATE_SUB_USER',
    TeamlinkCreate: 'TEAMLINK_CREATE',
    TeammembersUpdate: 'TEAMMEMBERS_UPDATE',
    TeammembersRead: 'TEAMMEMBERS_READ',
    LogoutSubUser: 'LOGOUT_SUB_USER',
    ChatsAccessAll: 'CHATS_ACCESS_ALL',
    ChatsAccessAssigned: 'CHATS_ACCESS_ASSIGNED',
    ChatsDelete: 'CHATS_DELETE',
    MessagesSendToAssigned: 'MESSAGES_SEND_TO_ASSIGNED',
    MessagesSendToAll: 'MESSAGES_SEND_TO_ALL',
    EditNotes: 'EDIT_NOTES',
    MessagesDelete: 'MESSAGES_DELETE',
    GroupsCreate: 'GROUPS_CREATE',
    GroupsUpdate: 'GROUPS_UPDATE',
    CreateNotes: 'CREATE_NOTES',
    ChatdaddyHook: 'CHATDADDY_HOOK',
    NotificationRead: 'NOTIFICATION_READ',
    NotificationCreate: 'NOTIFICATION_CREATE',
    NotificationUpdate: 'NOTIFICATION_UPDATE',
    NotificationDelete: 'NOTIFICATION_DELETE',
    DeleteNotes: 'DELETE_NOTES',
    IntegrationsUpdate: 'INTEGRATIONS_UPDATE',
    AdminPanelAccess: 'ADMIN_PANEL_ACCESS',
    DashboardCreate: 'DASHBOARD_CREATE',
    DashboardDelete: 'DASHBOARD_DELETE',
    PaymentsRead: 'PAYMENTS_READ',
    PaymentsUpdate: 'PAYMENTS_UPDATE',
    WaLiveEvents: 'WA_LIVE_EVENTS',
    PartnerAdminPanelAccess: 'PARTNER_ADMIN_PANEL_ACCESS',
    ProductsGet: 'PRODUCTS_GET',
    ProductsCreate: 'PRODUCTS_CREATE',
    ProductsUpdate: 'PRODUCTS_UPDATE',
    ProductsDelete: 'PRODUCTS_DELETE',
    PaymentIntegrationRead: 'PAYMENT_INTEGRATION_READ',
    PaymentIntegrationWrite: 'PAYMENT_INTEGRATION_WRITE',
    PaymentRecordsRead: 'PAYMENT_RECORDS_READ',
    PaymentRecordsWrite: 'PAYMENT_RECORDS_WRITE',
    MetricsGet: 'METRICS_GET',
    AccountsReadAssigned: 'ACCOUNTS_READ_ASSIGNED',
    AutocompleteGet: 'AUTOCOMPLETE_GET',
    MessagesSearch: 'MESSAGES_SEARCH',
    WidgetEdit: 'WIDGET_EDIT',
    CouponRead: 'COUPON_READ',
    CouponCreate: 'COUPON_CREATE',
    CouponDelete: 'COUPON_DELETE',
    CouponUpdate: 'COUPON_UPDATE',
    TeammembersReadContactDetails: 'TEAMMEMBERS_READ_CONTACT_DETAILS',
    TeammembersReadMessageDetails: 'TEAMMEMBERS_READ_MESSAGE_DETAILS',
    CallPhoneCreate: 'CALL_PHONE_CREATE',
    CallPhoneDelete: 'CALL_PHONE_DELETE',
    MakeCalls: 'MAKE_CALLS',
    CallLogsRead: 'CALL_LOGS_READ'
} as const;

export type TeamUpdateDataScopesEnum = typeof TeamUpdateDataScopesEnum[keyof typeof TeamUpdateDataScopesEnum];

/**
 * 
 * @export
 * @interface TeammemberDelete
 */
export interface TeammemberDelete {
    /**
     * 
     * @type {string}
     * @memberof TeammemberDelete
     */
    'event': TeammemberDeleteEventEnum;
    /**
     * 
     * @type {Array<TeammemberDeleteData>}
     * @memberof TeammemberDelete
     */
    'data': Array<TeammemberDeleteData>;
}

export const TeammemberDeleteEventEnum = {
    TeammemberDelete: 'teammember-delete'
} as const;

export type TeammemberDeleteEventEnum = typeof TeammemberDeleteEventEnum[keyof typeof TeammemberDeleteEventEnum];

/**
 * 
 * @export
 * @interface TeammemberDeleteData
 */
export interface TeammemberDeleteData {
    /**
     * 
     * @type {string}
     * @memberof TeammemberDeleteData
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof TeammemberDeleteData
     */
    'teamId': string;
}
/**
 * 
 * @export
 * @interface TeammemberInsert
 */
export interface TeammemberInsert {
    /**
     * 
     * @type {string}
     * @memberof TeammemberInsert
     */
    'event': TeammemberInsertEventEnum;
    /**
     * 
     * @type {Array<TeammemberInsertData>}
     * @memberof TeammemberInsert
     */
    'data': Array<TeammemberInsertData>;
}

export const TeammemberInsertEventEnum = {
    TeammemberInsert: 'teammember-insert'
} as const;

export type TeammemberInsertEventEnum = typeof TeammemberInsertEventEnum[keyof typeof TeammemberInsertEventEnum];

/**
 * 
 * @export
 * @interface TeammemberInsertData
 */
export interface TeammemberInsertData {
    /**
     * 
     * @type {string}
     * @memberof TeammemberInsertData
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof TeammemberInsertData
     */
    'teamId': string;
    /**
     * 
     * @type {string}
     * @memberof TeammemberInsertData
     */
    'addedAt': string;
    /**
     * 
     * @type {string}
     * @memberof TeammemberInsertData
     */
    'addedBy'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof TeammemberInsertData
     */
    'scopes': Array<TeammemberInsertDataScopesEnum>;
    /**
     * 
     * @type {string}
     * @memberof TeammemberInsertData
     */
    'role'?: TeammemberInsertDataRoleEnum;
}

export const TeammemberInsertDataScopesEnum = {
    ContactsReadAssigned: 'CONTACTS_READ_ASSIGNED',
    ContactsReadAll: 'CONTACTS_READ_ALL',
    ContactsCreate: 'CONTACTS_CREATE',
    ContactsDelete: 'CONTACTS_DELETE',
    ContactsUpdate: 'CONTACTS_UPDATE',
    CampaignsRead: 'CAMPAIGNS_READ',
    CampaignsCreate: 'CAMPAIGNS_CREATE',
    CampaignsDelete: 'CAMPAIGNS_DELETE',
    CampaignsUpdate: 'CAMPAIGNS_UPDATE',
    KeywordRead: 'KEYWORD_READ',
    KeywordCreate: 'KEYWORD_CREATE',
    KeywordDelete: 'KEYWORD_DELETE',
    KeywordUpdate: 'KEYWORD_UPDATE',
    TemplatesRead: 'TEMPLATES_READ',
    TemplatesCreate: 'TEMPLATES_CREATE',
    TemplatesDelete: 'TEMPLATES_DELETE',
    TemplatesUpdate: 'TEMPLATES_UPDATE',
    TagsRead: 'TAGS_READ',
    TagsCreate: 'TAGS_CREATE',
    TagsDelete: 'TAGS_DELETE',
    TokensRead: 'TOKENS_READ',
    TokensDelete: 'TOKENS_DELETE',
    UsersPatch: 'USERS_PATCH',
    ContactsExportButton: 'CONTACTS_EXPORT_BUTTON',
    TeamUpdate: 'TEAM_UPDATE',
    AccountCreate: 'ACCOUNT_CREATE',
    AccountPatch: 'ACCOUNT_PATCH',
    AccountDelete: 'ACCOUNT_DELETE',
    AccountRead: 'ACCOUNT_READ',
    CreateSubUser: 'CREATE_SUB_USER',
    TeamlinkCreate: 'TEAMLINK_CREATE',
    TeammembersUpdate: 'TEAMMEMBERS_UPDATE',
    TeammembersRead: 'TEAMMEMBERS_READ',
    LogoutSubUser: 'LOGOUT_SUB_USER',
    ChatsAccessAll: 'CHATS_ACCESS_ALL',
    ChatsAccessAssigned: 'CHATS_ACCESS_ASSIGNED',
    ChatsDelete: 'CHATS_DELETE',
    MessagesSendToAssigned: 'MESSAGES_SEND_TO_ASSIGNED',
    MessagesSendToAll: 'MESSAGES_SEND_TO_ALL',
    EditNotes: 'EDIT_NOTES',
    MessagesDelete: 'MESSAGES_DELETE',
    GroupsCreate: 'GROUPS_CREATE',
    GroupsUpdate: 'GROUPS_UPDATE',
    CreateNotes: 'CREATE_NOTES',
    ChatdaddyHook: 'CHATDADDY_HOOK',
    NotificationRead: 'NOTIFICATION_READ',
    NotificationCreate: 'NOTIFICATION_CREATE',
    NotificationUpdate: 'NOTIFICATION_UPDATE',
    NotificationDelete: 'NOTIFICATION_DELETE',
    DeleteNotes: 'DELETE_NOTES',
    IntegrationsUpdate: 'INTEGRATIONS_UPDATE',
    AdminPanelAccess: 'ADMIN_PANEL_ACCESS',
    DashboardCreate: 'DASHBOARD_CREATE',
    DashboardDelete: 'DASHBOARD_DELETE',
    PaymentsRead: 'PAYMENTS_READ',
    PaymentsUpdate: 'PAYMENTS_UPDATE',
    WaLiveEvents: 'WA_LIVE_EVENTS',
    PartnerAdminPanelAccess: 'PARTNER_ADMIN_PANEL_ACCESS',
    ProductsGet: 'PRODUCTS_GET',
    ProductsCreate: 'PRODUCTS_CREATE',
    ProductsUpdate: 'PRODUCTS_UPDATE',
    ProductsDelete: 'PRODUCTS_DELETE',
    PaymentIntegrationRead: 'PAYMENT_INTEGRATION_READ',
    PaymentIntegrationWrite: 'PAYMENT_INTEGRATION_WRITE',
    PaymentRecordsRead: 'PAYMENT_RECORDS_READ',
    PaymentRecordsWrite: 'PAYMENT_RECORDS_WRITE',
    MetricsGet: 'METRICS_GET',
    AccountsReadAssigned: 'ACCOUNTS_READ_ASSIGNED',
    AutocompleteGet: 'AUTOCOMPLETE_GET',
    MessagesSearch: 'MESSAGES_SEARCH',
    WidgetEdit: 'WIDGET_EDIT',
    CouponRead: 'COUPON_READ',
    CouponCreate: 'COUPON_CREATE',
    CouponDelete: 'COUPON_DELETE',
    CouponUpdate: 'COUPON_UPDATE',
    TeammembersReadContactDetails: 'TEAMMEMBERS_READ_CONTACT_DETAILS',
    TeammembersReadMessageDetails: 'TEAMMEMBERS_READ_MESSAGE_DETAILS',
    CallPhoneCreate: 'CALL_PHONE_CREATE',
    CallPhoneDelete: 'CALL_PHONE_DELETE',
    MakeCalls: 'MAKE_CALLS',
    CallLogsRead: 'CALL_LOGS_READ'
} as const;

export type TeammemberInsertDataScopesEnum = typeof TeammemberInsertDataScopesEnum[keyof typeof TeammemberInsertDataScopesEnum];
export const TeammemberInsertDataRoleEnum = {
    Viewer: 'viewer',
    Editor: 'editor',
    Admin: 'admin',
    Agent: 'agent'
} as const;

export type TeammemberInsertDataRoleEnum = typeof TeammemberInsertDataRoleEnum[keyof typeof TeammemberInsertDataRoleEnum];

/**
 * 
 * @export
 * @interface TeammemberLogout
 */
export interface TeammemberLogout {
    /**
     * 
     * @type {string}
     * @memberof TeammemberLogout
     */
    'event': TeammemberLogoutEventEnum;
    /**
     * 
     * @type {Array<TeammemberLogoutData>}
     * @memberof TeammemberLogout
     */
    'data': Array<TeammemberLogoutData>;
}

export const TeammemberLogoutEventEnum = {
    TeammemberLogout: 'teammember-logout'
} as const;

export type TeammemberLogoutEventEnum = typeof TeammemberLogoutEventEnum[keyof typeof TeammemberLogoutEventEnum];

/**
 * 
 * @export
 * @interface TeammemberLogoutData
 */
export interface TeammemberLogoutData {
    /**
     * 
     * @type {string}
     * @memberof TeammemberLogoutData
     */
    'teamId': string;
    /**
     * 
     * @type {string}
     * @memberof TeammemberLogoutData
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface TeammemberUpdate
 */
export interface TeammemberUpdate {
    /**
     * 
     * @type {string}
     * @memberof TeammemberUpdate
     */
    'event': TeammemberUpdateEventEnum;
    /**
     * 
     * @type {Array<TeammemberUpdateData>}
     * @memberof TeammemberUpdate
     */
    'data': Array<TeammemberUpdateData>;
}

export const TeammemberUpdateEventEnum = {
    TeammemberUpdate: 'teammember-update'
} as const;

export type TeammemberUpdateEventEnum = typeof TeammemberUpdateEventEnum[keyof typeof TeammemberUpdateEventEnum];

/**
 * 
 * @export
 * @interface TeammemberUpdateData
 */
export interface TeammemberUpdateData {
    /**
     * 
     * @type {string}
     * @memberof TeammemberUpdateData
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof TeammemberUpdateData
     */
    'teamId': string;
    /**
     * 
     * @type {string}
     * @memberof TeammemberUpdateData
     */
    'addedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TeammemberUpdateData
     */
    'addedBy'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof TeammemberUpdateData
     */
    'scopes'?: Array<TeammemberUpdateDataScopesEnum>;
    /**
     * 
     * @type {string}
     * @memberof TeammemberUpdateData
     */
    'role'?: TeammemberUpdateDataRoleEnum;
}

export const TeammemberUpdateDataScopesEnum = {
    ContactsReadAssigned: 'CONTACTS_READ_ASSIGNED',
    ContactsReadAll: 'CONTACTS_READ_ALL',
    ContactsCreate: 'CONTACTS_CREATE',
    ContactsDelete: 'CONTACTS_DELETE',
    ContactsUpdate: 'CONTACTS_UPDATE',
    CampaignsRead: 'CAMPAIGNS_READ',
    CampaignsCreate: 'CAMPAIGNS_CREATE',
    CampaignsDelete: 'CAMPAIGNS_DELETE',
    CampaignsUpdate: 'CAMPAIGNS_UPDATE',
    KeywordRead: 'KEYWORD_READ',
    KeywordCreate: 'KEYWORD_CREATE',
    KeywordDelete: 'KEYWORD_DELETE',
    KeywordUpdate: 'KEYWORD_UPDATE',
    TemplatesRead: 'TEMPLATES_READ',
    TemplatesCreate: 'TEMPLATES_CREATE',
    TemplatesDelete: 'TEMPLATES_DELETE',
    TemplatesUpdate: 'TEMPLATES_UPDATE',
    TagsRead: 'TAGS_READ',
    TagsCreate: 'TAGS_CREATE',
    TagsDelete: 'TAGS_DELETE',
    TokensRead: 'TOKENS_READ',
    TokensDelete: 'TOKENS_DELETE',
    UsersPatch: 'USERS_PATCH',
    ContactsExportButton: 'CONTACTS_EXPORT_BUTTON',
    TeamUpdate: 'TEAM_UPDATE',
    AccountCreate: 'ACCOUNT_CREATE',
    AccountPatch: 'ACCOUNT_PATCH',
    AccountDelete: 'ACCOUNT_DELETE',
    AccountRead: 'ACCOUNT_READ',
    CreateSubUser: 'CREATE_SUB_USER',
    TeamlinkCreate: 'TEAMLINK_CREATE',
    TeammembersUpdate: 'TEAMMEMBERS_UPDATE',
    TeammembersRead: 'TEAMMEMBERS_READ',
    LogoutSubUser: 'LOGOUT_SUB_USER',
    ChatsAccessAll: 'CHATS_ACCESS_ALL',
    ChatsAccessAssigned: 'CHATS_ACCESS_ASSIGNED',
    ChatsDelete: 'CHATS_DELETE',
    MessagesSendToAssigned: 'MESSAGES_SEND_TO_ASSIGNED',
    MessagesSendToAll: 'MESSAGES_SEND_TO_ALL',
    EditNotes: 'EDIT_NOTES',
    MessagesDelete: 'MESSAGES_DELETE',
    GroupsCreate: 'GROUPS_CREATE',
    GroupsUpdate: 'GROUPS_UPDATE',
    CreateNotes: 'CREATE_NOTES',
    ChatdaddyHook: 'CHATDADDY_HOOK',
    NotificationRead: 'NOTIFICATION_READ',
    NotificationCreate: 'NOTIFICATION_CREATE',
    NotificationUpdate: 'NOTIFICATION_UPDATE',
    NotificationDelete: 'NOTIFICATION_DELETE',
    DeleteNotes: 'DELETE_NOTES',
    IntegrationsUpdate: 'INTEGRATIONS_UPDATE',
    AdminPanelAccess: 'ADMIN_PANEL_ACCESS',
    DashboardCreate: 'DASHBOARD_CREATE',
    DashboardDelete: 'DASHBOARD_DELETE',
    PaymentsRead: 'PAYMENTS_READ',
    PaymentsUpdate: 'PAYMENTS_UPDATE',
    WaLiveEvents: 'WA_LIVE_EVENTS',
    PartnerAdminPanelAccess: 'PARTNER_ADMIN_PANEL_ACCESS',
    ProductsGet: 'PRODUCTS_GET',
    ProductsCreate: 'PRODUCTS_CREATE',
    ProductsUpdate: 'PRODUCTS_UPDATE',
    ProductsDelete: 'PRODUCTS_DELETE',
    PaymentIntegrationRead: 'PAYMENT_INTEGRATION_READ',
    PaymentIntegrationWrite: 'PAYMENT_INTEGRATION_WRITE',
    PaymentRecordsRead: 'PAYMENT_RECORDS_READ',
    PaymentRecordsWrite: 'PAYMENT_RECORDS_WRITE',
    MetricsGet: 'METRICS_GET',
    AccountsReadAssigned: 'ACCOUNTS_READ_ASSIGNED',
    AutocompleteGet: 'AUTOCOMPLETE_GET',
    MessagesSearch: 'MESSAGES_SEARCH',
    WidgetEdit: 'WIDGET_EDIT',
    CouponRead: 'COUPON_READ',
    CouponCreate: 'COUPON_CREATE',
    CouponDelete: 'COUPON_DELETE',
    CouponUpdate: 'COUPON_UPDATE',
    TeammembersReadContactDetails: 'TEAMMEMBERS_READ_CONTACT_DETAILS',
    TeammembersReadMessageDetails: 'TEAMMEMBERS_READ_MESSAGE_DETAILS',
    CallPhoneCreate: 'CALL_PHONE_CREATE',
    CallPhoneDelete: 'CALL_PHONE_DELETE',
    MakeCalls: 'MAKE_CALLS',
    CallLogsRead: 'CALL_LOGS_READ'
} as const;

export type TeammemberUpdateDataScopesEnum = typeof TeammemberUpdateDataScopesEnum[keyof typeof TeammemberUpdateDataScopesEnum];
export const TeammemberUpdateDataRoleEnum = {
    Viewer: 'viewer',
    Editor: 'editor',
    Admin: 'admin',
    Agent: 'agent'
} as const;

export type TeammemberUpdateDataRoleEnum = typeof TeammemberUpdateDataRoleEnum[keyof typeof TeammemberUpdateDataRoleEnum];

/**
 * 
 * @export
 * @interface TrackingDelete
 */
export interface TrackingDelete {
    /**
     * 
     * @type {string}
     * @memberof TrackingDelete
     */
    'event': TrackingDeleteEventEnum;
    /**
     * 
     * @type {Array<TrackingDeleteData>}
     * @memberof TrackingDelete
     */
    'data': Array<TrackingDeleteData>;
}

export const TrackingDeleteEventEnum = {
    TrackingDelete: 'tracking-delete'
} as const;

export type TrackingDeleteEventEnum = typeof TrackingDeleteEventEnum[keyof typeof TrackingDeleteEventEnum];

/**
 * 
 * @export
 * @interface TrackingDeleteData
 */
export interface TrackingDeleteData {
    /**
     * 
     * @type {number}
     * @memberof TrackingDeleteData
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface TrackingInsert
 */
export interface TrackingInsert {
    /**
     * 
     * @type {string}
     * @memberof TrackingInsert
     */
    'event': TrackingInsertEventEnum;
    /**
     * 
     * @type {Array<TrackingInsertData>}
     * @memberof TrackingInsert
     */
    'data': Array<TrackingInsertData>;
}

export const TrackingInsertEventEnum = {
    TrackingInsert: 'tracking-insert'
} as const;

export type TrackingInsertEventEnum = typeof TrackingInsertEventEnum[keyof typeof TrackingInsertEventEnum];

/**
 * 
 * @export
 * @interface TrackingInsertData
 */
export interface TrackingInsertData {
    /**
     * 
     * @type {number}
     * @memberof TrackingInsertData
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof TrackingInsertData
     */
    'secretId': string;
    /**
     * 
     * @type {string}
     * @memberof TrackingInsertData
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof TrackingInsertData
     */
    'serviceId'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrackingInsertData
     */
    'teamId': string;
    /**
     * 
     * @type {number}
     * @memberof TrackingInsertData
     */
    'defaultCountryCode'?: number;
    /**
     * 
     * @type {Array<TrackingInsertDataEventsInner>}
     * @memberof TrackingInsertData
     */
    'events'?: Array<TrackingInsertDataEventsInner>;
    /**
     * 
     * @type {string}
     * @memberof TrackingInsertData
     */
    'lastActivity': string | null;
    /**
     * 
     * @type {number}
     * @memberof TrackingInsertData
     */
    'triggered': number;
    /**
     * 
     * @type {boolean}
     * @memberof TrackingInsertData
     */
    'isActive': boolean;
    /**
     * 
     * @type {TrackingInsertDataOverridePhoneNumber}
     * @memberof TrackingInsertData
     */
    'overridePhoneNumber'?: TrackingInsertDataOverridePhoneNumber;
    /**
     * 
     * @type {TrackingInsertDataRecipientIdOptions}
     * @memberof TrackingInsertData
     */
    'recipientIdOptions'?: TrackingInsertDataRecipientIdOptions;
    /**
     * 
     * @type {string}
     * @memberof TrackingInsertData
     */
    'accountId': string | null;
    /**
     * 
     * @type {TrackingInsertDataError}
     * @memberof TrackingInsertData
     */
    'error': TrackingInsertDataError | null;
    /**
     * 
     * @type {TrackingInsertDataAutoPayment}
     * @memberof TrackingInsertData
     */
    'autoPayment'?: TrackingInsertDataAutoPayment | null;
    /**
     * 
     * @type {string}
     * @memberof TrackingInsertData
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof TrackingInsertData
     */
    'createdBy': string;
    /**
     * 
     * @type {string}
     * @memberof TrackingInsertData
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface TrackingInsertDataAutoPayment
 */
export interface TrackingInsertDataAutoPayment {
    /**
     * 
     * @type {string}
     * @memberof TrackingInsertDataAutoPayment
     */
    'paymentIntegrationId': string;
}
/**
 * 
 * @export
 * @interface TrackingInsertDataError
 */
export interface TrackingInsertDataError {
    /**
     * 
     * @type {number}
     * @memberof TrackingInsertDataError
     */
    'statusCode': number;
    /**
     * 
     * @type {string}
     * @memberof TrackingInsertDataError
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface TrackingInsertDataEventsInner
 */
export interface TrackingInsertDataEventsInner {
    /**
     * 
     * @type {number}
     * @memberof TrackingInsertDataEventsInner
     */
    'id'?: number;
    /**
     * Passed in the body to mark for deletion
     * @type {boolean}
     * @memberof TrackingInsertDataEventsInner
     */
    'delete'?: boolean;
    /**
     * the message template to send when this trigger is activated
     * @type {string}
     * @memberof TrackingInsertDataEventsInner
     */
    'templateId'?: string;
    /**
     * Whether the condition is enabled. If false, the trigger will be ignored whenever a data point is ingested
     * @type {boolean}
     * @memberof TrackingInsertDataEventsInner
     */
    'enabled'?: boolean;
    /**
     * Maximum notifications to be sent per order on this trigger. Default null -- unlimited
     * @type {number}
     * @memberof TrackingInsertDataEventsInner
     */
    'limit'?: number | null;
    /**
     * 
     * @type {TrackingInsertDataEventsInnerAllOf1Delay}
     * @memberof TrackingInsertDataEventsInner
     */
    'delay'?: TrackingInsertDataEventsInnerAllOf1Delay;
    /**
     * 
     * @type {TrackingInsertDataEventsInnerAllOf1ScheduleOptions}
     * @memberof TrackingInsertDataEventsInner
     */
    'scheduleOptions'?: TrackingInsertDataEventsInnerAllOf1ScheduleOptions | null;
    /**
     * an array of usersIds to notify users when an event is created
     * @type {Array<string>}
     * @memberof TrackingInsertDataEventsInner
     */
    'notifyUsers'?: Array<string> | null;
    /**
     * 
     * @type {{ [key: string]: TrackingInsertDataEventsInnerAllOf1ConditionsValue; }}
     * @memberof TrackingInsertDataEventsInner
     */
    'conditions'?: { [key: string]: TrackingInsertDataEventsInnerAllOf1ConditionsValue; };
}
/**
 * 
 * @export
 * @interface TrackingInsertDataEventsInnerAllOf
 */
export interface TrackingInsertDataEventsInnerAllOf {
    /**
     * 
     * @type {number}
     * @memberof TrackingInsertDataEventsInnerAllOf
     */
    'id'?: number;
    /**
     * Passed in the body to mark for deletion
     * @type {boolean}
     * @memberof TrackingInsertDataEventsInnerAllOf
     */
    'delete'?: boolean;
}
/**
 * 
 * @export
 * @interface TrackingInsertDataEventsInnerAllOf1
 */
export interface TrackingInsertDataEventsInnerAllOf1 {
    /**
     * the message template to send when this trigger is activated
     * @type {string}
     * @memberof TrackingInsertDataEventsInnerAllOf1
     */
    'templateId'?: string;
    /**
     * Whether the condition is enabled. If false, the trigger will be ignored whenever a data point is ingested
     * @type {boolean}
     * @memberof TrackingInsertDataEventsInnerAllOf1
     */
    'enabled'?: boolean;
    /**
     * Maximum notifications to be sent per order on this trigger. Default null -- unlimited
     * @type {number}
     * @memberof TrackingInsertDataEventsInnerAllOf1
     */
    'limit'?: number | null;
    /**
     * 
     * @type {TrackingInsertDataEventsInnerAllOf1Delay}
     * @memberof TrackingInsertDataEventsInnerAllOf1
     */
    'delay'?: TrackingInsertDataEventsInnerAllOf1Delay;
    /**
     * 
     * @type {TrackingInsertDataEventsInnerAllOf1ScheduleOptions}
     * @memberof TrackingInsertDataEventsInnerAllOf1
     */
    'scheduleOptions'?: TrackingInsertDataEventsInnerAllOf1ScheduleOptions | null;
    /**
     * an array of usersIds to notify users when an event is created
     * @type {Array<string>}
     * @memberof TrackingInsertDataEventsInnerAllOf1
     */
    'notifyUsers'?: Array<string> | null;
    /**
     * 
     * @type {{ [key: string]: TrackingInsertDataEventsInnerAllOf1ConditionsValue; }}
     * @memberof TrackingInsertDataEventsInnerAllOf1
     */
    'conditions'?: { [key: string]: TrackingInsertDataEventsInnerAllOf1ConditionsValue; };
}
/**
 * 
 * @export
 * @interface TrackingInsertDataEventsInnerAllOf1ConditionsValue
 */
export interface TrackingInsertDataEventsInnerAllOf1ConditionsValue {
    /**
     * 
     * @type {TrackingInsertDataEventsInnerAllOf1ConditionsValueValues}
     * @memberof TrackingInsertDataEventsInnerAllOf1ConditionsValue
     */
    'values': TrackingInsertDataEventsInnerAllOf1ConditionsValueValues;
    /**
     * the test for the condition. Default is `include`
     * @type {string}
     * @memberof TrackingInsertDataEventsInnerAllOf1ConditionsValue
     */
    'test'?: TrackingInsertDataEventsInnerAllOf1ConditionsValueTestEnum;
}

export const TrackingInsertDataEventsInnerAllOf1ConditionsValueTestEnum = {
    Include: 'include',
    Exclude: 'exclude',
    GreaterThan: 'greater-than',
    LessThan: 'less-than'
} as const;

export type TrackingInsertDataEventsInnerAllOf1ConditionsValueTestEnum = typeof TrackingInsertDataEventsInnerAllOf1ConditionsValueTestEnum[keyof typeof TrackingInsertDataEventsInnerAllOf1ConditionsValueTestEnum];

/**
 * @type TrackingInsertDataEventsInnerAllOf1ConditionsValueValues
 * @export
 */
export type TrackingInsertDataEventsInnerAllOf1ConditionsValueValues = Array<number> | Array<string>;

/**
 * the optional delay to attach to this service
 * @export
 * @interface TrackingInsertDataEventsInnerAllOf1Delay
 */
export interface TrackingInsertDataEventsInnerAllOf1Delay {
    /**
     * the delay in sending the message
     * @type {number}
     * @memberof TrackingInsertDataEventsInnerAllOf1Delay
     */
    'seconds'?: number;
    /**
     * The type of delay \"stale\" means that the message is sent out with the aforementioned delay (delayS) if the order is not updated. If the order is updated before the delay is over, then the message is cancelled \"simple\" means that the message is sent out regardless of the order update. 
     * @type {string}
     * @memberof TrackingInsertDataEventsInnerAllOf1Delay
     */
    'type'?: TrackingInsertDataEventsInnerAllOf1DelayTypeEnum;
}

export const TrackingInsertDataEventsInnerAllOf1DelayTypeEnum = {
    Simple: 'simple',
    Stale: 'stale'
} as const;

export type TrackingInsertDataEventsInnerAllOf1DelayTypeEnum = typeof TrackingInsertDataEventsInnerAllOf1DelayTypeEnum[keyof typeof TrackingInsertDataEventsInnerAllOf1DelayTypeEnum];

/**
 * 
 * @export
 * @interface TrackingInsertDataEventsInnerAllOf1ScheduleOptions
 */
export interface TrackingInsertDataEventsInnerAllOf1ScheduleOptions {
    /**
     * the order parameter to use for the schedule
     * @type {string}
     * @memberof TrackingInsertDataEventsInnerAllOf1ScheduleOptions
     */
    'parameter'?: string;
    /**
     * the time to schedule message before or after the parameter in seconds. Negative value means before the parameter date
     * @type {number}
     * @memberof TrackingInsertDataEventsInnerAllOf1ScheduleOptions
     */
    'delaySeconds'?: number;
}
/**
 * @type TrackingInsertDataOverridePhoneNumber
 * @export
 */
export type TrackingInsertDataOverridePhoneNumber = TrackingInsertDataOverridePhoneNumberOneOf | TrackingInsertDataOverridePhoneNumberOneOf1;

/**
 * Override with exact phone number
 * @export
 * @interface TrackingInsertDataOverridePhoneNumberOneOf
 */
export interface TrackingInsertDataOverridePhoneNumberOneOf {
    /**
     * 
     * @type {number}
     * @memberof TrackingInsertDataOverridePhoneNumberOneOf
     */
    'exact': number;
}
/**
 * 
 * @export
 * @interface TrackingInsertDataOverridePhoneNumberOneOf1
 */
export interface TrackingInsertDataOverridePhoneNumberOneOf1 {
    /**
     * Override with a field from the data
     * @type {string}
     * @memberof TrackingInsertDataOverridePhoneNumberOneOf1
     */
    'field': string;
}
/**
 * 
 * @export
 * @interface TrackingInsertDataRecipientIdOptions
 */
export interface TrackingInsertDataRecipientIdOptions {
    /**
     * 
     * @type {string}
     * @memberof TrackingInsertDataRecipientIdOptions
     */
    'format': TrackingInsertDataRecipientIdOptionsFormatEnum;
}

export const TrackingInsertDataRecipientIdOptionsFormatEnum = {
    PhoneNumber: 'phone_number',
    Opaque: 'opaque'
} as const;

export type TrackingInsertDataRecipientIdOptionsFormatEnum = typeof TrackingInsertDataRecipientIdOptionsFormatEnum[keyof typeof TrackingInsertDataRecipientIdOptionsFormatEnum];

/**
 * 
 * @export
 * @interface TrackingUpdate
 */
export interface TrackingUpdate {
    /**
     * 
     * @type {string}
     * @memberof TrackingUpdate
     */
    'event': TrackingUpdateEventEnum;
    /**
     * 
     * @type {Array<TrackingUpdateData>}
     * @memberof TrackingUpdate
     */
    'data': Array<TrackingUpdateData>;
}

export const TrackingUpdateEventEnum = {
    TrackingUpdate: 'tracking-update'
} as const;

export type TrackingUpdateEventEnum = typeof TrackingUpdateEventEnum[keyof typeof TrackingUpdateEventEnum];

/**
 * 
 * @export
 * @interface TrackingUpdateData
 */
export interface TrackingUpdateData {
    /**
     * 
     * @type {number}
     * @memberof TrackingUpdateData
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof TrackingUpdateData
     */
    'secretId'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrackingUpdateData
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrackingUpdateData
     */
    'serviceId'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrackingUpdateData
     */
    'teamId'?: string;
    /**
     * 
     * @type {number}
     * @memberof TrackingUpdateData
     */
    'defaultCountryCode'?: number;
    /**
     * 
     * @type {Array<TrackingInsertDataEventsInner>}
     * @memberof TrackingUpdateData
     */
    'events'?: Array<TrackingInsertDataEventsInner>;
    /**
     * 
     * @type {string}
     * @memberof TrackingUpdateData
     */
    'lastActivity'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TrackingUpdateData
     */
    'triggered'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof TrackingUpdateData
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {TrackingInsertDataOverridePhoneNumber}
     * @memberof TrackingUpdateData
     */
    'overridePhoneNumber'?: TrackingInsertDataOverridePhoneNumber;
    /**
     * 
     * @type {TrackingInsertDataRecipientIdOptions}
     * @memberof TrackingUpdateData
     */
    'recipientIdOptions'?: TrackingInsertDataRecipientIdOptions;
    /**
     * 
     * @type {string}
     * @memberof TrackingUpdateData
     */
    'accountId'?: string | null;
    /**
     * 
     * @type {TrackingInsertDataError}
     * @memberof TrackingUpdateData
     */
    'error'?: TrackingInsertDataError | null;
    /**
     * 
     * @type {TrackingInsertDataAutoPayment}
     * @memberof TrackingUpdateData
     */
    'autoPayment'?: TrackingInsertDataAutoPayment | null;
    /**
     * 
     * @type {string}
     * @memberof TrackingUpdateData
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrackingUpdateData
     */
    'createdBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrackingUpdateData
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface UnreadChatsNotificationData
 */
export interface UnreadChatsNotificationData {
    /**
     * 
     * @type {string}
     * @memberof UnreadChatsNotificationData
     */
    'userId': string;
    /**
     * 
     * @type {number}
     * @memberof UnreadChatsNotificationData
     */
    'unreadChatsCount'?: number;
}
/**
 * 
 * @export
 * @interface UpdateEventSubscription
 */
export interface UpdateEventSubscription {
    /**
     * whether the subscription is enabled
     * @type {boolean}
     * @memberof UpdateEventSubscription
     */
    'enabled'?: boolean;
    /**
     * the events to listen for
     * @type {Array<EventName>}
     * @memberof UpdateEventSubscription
     */
    'events'?: Array<EventName>;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateEventSubscription
     */
    'accounts'?: Array<string>;
    /**
     * Optionally specify ajv schema object, if validation of data fails -- the subscription will not fire
     * @type {{ [key: string]: any; }}
     * @memberof UpdateEventSubscription
     */
    'schema'?: { [key: string]: any; } | null;
    /**
     * Web hook url to fire to
     * @type {string}
     * @memberof UpdateEventSubscription
     */
    'url'?: string;
}
/**
 * 
 * @export
 * @interface UserDelete
 */
export interface UserDelete {
    /**
     * 
     * @type {string}
     * @memberof UserDelete
     */
    'event': UserDeleteEventEnum;
    /**
     * 
     * @type {Array<UserDeleteData>}
     * @memberof UserDelete
     */
    'data': Array<UserDeleteData>;
}

export const UserDeleteEventEnum = {
    UserDelete: 'user-delete'
} as const;

export type UserDeleteEventEnum = typeof UserDeleteEventEnum[keyof typeof UserDeleteEventEnum];

/**
 * 
 * @export
 * @interface UserDeleteData
 */
export interface UserDeleteData {
    /**
     * 
     * @type {string}
     * @memberof UserDeleteData
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface UserInsert
 */
export interface UserInsert {
    /**
     * 
     * @type {string}
     * @memberof UserInsert
     */
    'event': UserInsertEventEnum;
    /**
     * 
     * @type {Array<UserInsertData>}
     * @memberof UserInsert
     */
    'data': Array<UserInsertData>;
}

export const UserInsertEventEnum = {
    UserInsert: 'user-insert'
} as const;

export type UserInsertEventEnum = typeof UserInsertEventEnum[keyof typeof UserInsertEventEnum];

/**
 * 
 * @export
 * @interface UserInsertData
 */
export interface UserInsertData {
    /**
     * 
     * @type {string}
     * @memberof UserInsertData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof UserInsertData
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof UserInsertData
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof UserInsertData
     */
    'disabledAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserInsertData
     */
    'fullName': string;
    /**
     * 
     * @type {string}
     * @memberof UserInsertData
     */
    'lastUsedTeamId'?: string;
    /**
     * 
     * @type {number}
     * @memberof UserInsertData
     */
    'phoneNumber': number | null;
    /**
     * 
     * @type {string}
     * @memberof UserInsertData
     */
    'emailAddress'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserInsertData
     */
    'createdByMethod'?: UserInsertDataCreatedByMethodEnum;
    /**
     * 
     * @type {UserInsertDataNotify}
     * @memberof UserInsertData
     * @deprecated
     */
    'notify': UserInsertDataNotify;
    /**
     * 
     * @type {UserInsertDataNotificationPreferences}
     * @memberof UserInsertData
     */
    'notificationPreferences': UserInsertDataNotificationPreferences;
    /**
     * 
     * @type {string}
     * @memberof UserInsertData
     */
    'referralCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserInsertData
     */
    'signature'?: string | null;
    /**
     * 
     * @type {Array<UserInsertDataWebPushSubscriptionsInner>}
     * @memberof UserInsertData
     */
    'webPushSubscriptions'?: Array<UserInsertDataWebPushSubscriptionsInner>;
    /**
     * 
     * @type {string}
     * @memberof UserInsertData
     */
    'partnership'?: string | null;
}

export const UserInsertDataCreatedByMethodEnum = {
    AdminPanel: 'admin-panel',
    Otp: 'otp',
    Boutir: 'boutir',
    InstantReg: 'instant-reg',
    Firebase: 'firebase',
    TeamMember: 'team-member'
} as const;

export type UserInsertDataCreatedByMethodEnum = typeof UserInsertDataCreatedByMethodEnum[keyof typeof UserInsertDataCreatedByMethodEnum];

/**
 * 
 * @export
 * @interface UserInsertDataNotificationPreferences
 */
export interface UserInsertDataNotificationPreferences {
    /**
     * 
     * @type {UserInsertDataNotificationPreferencesAccountDisconnected}
     * @memberof UserInsertDataNotificationPreferences
     */
    'accountDisconnected'?: UserInsertDataNotificationPreferencesAccountDisconnected;
    /**
     * 
     * @type {UserInsertDataNotificationPreferencesContactAssignedToMe}
     * @memberof UserInsertDataNotificationPreferences
     */
    'contactAssignedToMe'?: UserInsertDataNotificationPreferencesContactAssignedToMe;
    /**
     * 
     * @type {UserInsertDataNotificationPreferencesNewMessage}
     * @memberof UserInsertDataNotificationPreferences
     */
    'newMessage'?: UserInsertDataNotificationPreferencesNewMessage;
    /**
     * 
     * @type {UserInsertDataNotificationPreferencesContactAssignedToMe}
     * @memberof UserInsertDataNotificationPreferences
     */
    'teamMemberAdded'?: UserInsertDataNotificationPreferencesContactAssignedToMe;
    /**
     * 
     * @type {UserInsertDataNotificationPreferencesContactAssignedToMe}
     * @memberof UserInsertDataNotificationPreferences
     */
    'trackingAdded'?: UserInsertDataNotificationPreferencesContactAssignedToMe;
    /**
     * 
     * @type {UserInsertDataNotificationPreferencesContactAssignedToMe}
     * @memberof UserInsertDataNotificationPreferences
     */
    'trackingErrored'?: UserInsertDataNotificationPreferencesContactAssignedToMe;
    /**
     * 
     * @type {UserInsertDataNotificationPreferencesAccountDisconnected}
     * @memberof UserInsertDataNotificationPreferences
     */
    'botExternalTemplateStatusUpdated'?: UserInsertDataNotificationPreferencesAccountDisconnected;
    /**
     * 
     * @type {UserInsertDataNotificationPreferencesContactAssignedToMe}
     * @memberof UserInsertDataNotificationPreferences
     */
    'actionExecute'?: UserInsertDataNotificationPreferencesContactAssignedToMe;
    /**
     * 
     * @type {UserInsertDataNotificationPreferencesContactAssignedToMe}
     * @memberof UserInsertDataNotificationPreferences
     */
    'noteMentionsMe'?: UserInsertDataNotificationPreferencesContactAssignedToMe;
    /**
     * 
     * @type {UserInsertDataNotificationPreferencesContactAssignedToMe}
     * @memberof UserInsertDataNotificationPreferences
     */
    'payments'?: UserInsertDataNotificationPreferencesContactAssignedToMe;
    /**
     * 
     * @type {UserInsertDataNotificationPreferencesContactAssignedToMe}
     * @memberof UserInsertDataNotificationPreferences
     */
    'creditsLevelNotification'?: UserInsertDataNotificationPreferencesContactAssignedToMe;
}
/**
 * 
 * @export
 * @interface UserInsertDataNotificationPreferencesAccountDisconnected
 */
export interface UserInsertDataNotificationPreferencesAccountDisconnected {
    /**
     * 
     * @type {Array<string>}
     * @memberof UserInsertDataNotificationPreferencesAccountDisconnected
     */
    'destinations': Array<UserInsertDataNotificationPreferencesAccountDisconnectedDestinationsEnum>;
    /**
     * 
     * @type {Array<UserInsertDataNotificationPreferencesAccountDisconnectedAccountsInner>}
     * @memberof UserInsertDataNotificationPreferencesAccountDisconnected
     */
    'accounts'?: Array<UserInsertDataNotificationPreferencesAccountDisconnectedAccountsInner>;
}

export const UserInsertDataNotificationPreferencesAccountDisconnectedDestinationsEnum = {
    Push: 'push',
    Email: 'email',
    Whatsapp: 'whatsapp'
} as const;

export type UserInsertDataNotificationPreferencesAccountDisconnectedDestinationsEnum = typeof UserInsertDataNotificationPreferencesAccountDisconnectedDestinationsEnum[keyof typeof UserInsertDataNotificationPreferencesAccountDisconnectedDestinationsEnum];

/**
 * 
 * @export
 * @interface UserInsertDataNotificationPreferencesAccountDisconnectedAccountsInner
 */
export interface UserInsertDataNotificationPreferencesAccountDisconnectedAccountsInner {
    /**
     * 
     * @type {string}
     * @memberof UserInsertDataNotificationPreferencesAccountDisconnectedAccountsInner
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface UserInsertDataNotificationPreferencesContactAssignedToMe
 */
export interface UserInsertDataNotificationPreferencesContactAssignedToMe {
    /**
     * 
     * @type {Array<string>}
     * @memberof UserInsertDataNotificationPreferencesContactAssignedToMe
     */
    'destinations': Array<UserInsertDataNotificationPreferencesContactAssignedToMeDestinationsEnum>;
}

export const UserInsertDataNotificationPreferencesContactAssignedToMeDestinationsEnum = {
    Push: 'push',
    Email: 'email',
    Whatsapp: 'whatsapp'
} as const;

export type UserInsertDataNotificationPreferencesContactAssignedToMeDestinationsEnum = typeof UserInsertDataNotificationPreferencesContactAssignedToMeDestinationsEnum[keyof typeof UserInsertDataNotificationPreferencesContactAssignedToMeDestinationsEnum];

/**
 * 
 * @export
 * @interface UserInsertDataNotificationPreferencesNewMessage
 */
export interface UserInsertDataNotificationPreferencesNewMessage {
    /**
     * 
     * @type {Array<string>}
     * @memberof UserInsertDataNotificationPreferencesNewMessage
     */
    'destinations': Array<UserInsertDataNotificationPreferencesNewMessageDestinationsEnum>;
    /**
     * 
     * @type {UserInsertDataNotificationPreferencesNewMessageDefaultType}
     * @memberof UserInsertDataNotificationPreferencesNewMessage
     */
    'defaultType'?: UserInsertDataNotificationPreferencesNewMessageDefaultType;
    /**
     * 
     * @type {Array<UserInsertDataNotificationPreferencesNewMessageAccountsInner>}
     * @memberof UserInsertDataNotificationPreferencesNewMessage
     */
    'accounts'?: Array<UserInsertDataNotificationPreferencesNewMessageAccountsInner>;
}

export const UserInsertDataNotificationPreferencesNewMessageDestinationsEnum = {
    Push: 'push'
} as const;

export type UserInsertDataNotificationPreferencesNewMessageDestinationsEnum = typeof UserInsertDataNotificationPreferencesNewMessageDestinationsEnum[keyof typeof UserInsertDataNotificationPreferencesNewMessageDestinationsEnum];

/**
 * 
 * @export
 * @interface UserInsertDataNotificationPreferencesNewMessageAccountsInner
 */
export interface UserInsertDataNotificationPreferencesNewMessageAccountsInner {
    /**
     * 
     * @type {string}
     * @memberof UserInsertDataNotificationPreferencesNewMessageAccountsInner
     */
    'id': string;
    /**
     * 
     * @type {UserInsertDataNotificationPreferencesNewMessageDefaultType}
     * @memberof UserInsertDataNotificationPreferencesNewMessageAccountsInner
     */
    'type': UserInsertDataNotificationPreferencesNewMessageDefaultType;
}
/**
 * @type UserInsertDataNotificationPreferencesNewMessageDefaultType
 * @export
 */
export type UserInsertDataNotificationPreferencesNewMessageDefaultType = Array<string> | string;

/**
 * 
 * @export
 * @interface UserInsertDataNotify
 */
export interface UserInsertDataNotify {
    /**
     * 
     * @type {boolean}
     * @memberof UserInsertDataNotify
     */
    'whatsapp'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserInsertDataNotify
     */
    'email'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserInsertDataNotify
     */
    'desktop'?: boolean;
}
/**
 * 
 * @export
 * @interface UserInsertDataWebPushSubscriptionsInner
 */
export interface UserInsertDataWebPushSubscriptionsInner {
    /**
     * 
     * @type {string}
     * @memberof UserInsertDataWebPushSubscriptionsInner
     */
    'endpoint': string;
    /**
     * 
     * @type {string}
     * @memberof UserInsertDataWebPushSubscriptionsInner
     */
    'authKey': string;
    /**
     * 
     * @type {string}
     * @memberof UserInsertDataWebPushSubscriptionsInner
     */
    'p256dhKey': string;
}
/**
 * 
 * @export
 * @interface UserUpdate
 */
export interface UserUpdate {
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'event': UserUpdateEventEnum;
    /**
     * 
     * @type {Array<UserUpdateData>}
     * @memberof UserUpdate
     */
    'data': Array<UserUpdateData>;
}

export const UserUpdateEventEnum = {
    UserUpdate: 'user-update'
} as const;

export type UserUpdateEventEnum = typeof UserUpdateEventEnum[keyof typeof UserUpdateEventEnum];

/**
 * 
 * @export
 * @interface UserUpdateData
 */
export interface UserUpdateData {
    /**
     * 
     * @type {string}
     * @memberof UserUpdateData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateData
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateData
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateData
     */
    'disabledAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateData
     */
    'fullName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateData
     */
    'lastUsedTeamId'?: string;
    /**
     * 
     * @type {number}
     * @memberof UserUpdateData
     */
    'phoneNumber'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateData
     */
    'emailAddress'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateData
     */
    'createdByMethod'?: UserUpdateDataCreatedByMethodEnum;
    /**
     * 
     * @type {UserInsertDataNotify}
     * @memberof UserUpdateData
     * @deprecated
     */
    'notify'?: UserInsertDataNotify;
    /**
     * 
     * @type {UserInsertDataNotificationPreferences}
     * @memberof UserUpdateData
     */
    'notificationPreferences'?: UserInsertDataNotificationPreferences;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateData
     */
    'referralCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateData
     */
    'signature'?: string | null;
    /**
     * 
     * @type {Array<UserInsertDataWebPushSubscriptionsInner>}
     * @memberof UserUpdateData
     */
    'webPushSubscriptions'?: Array<UserInsertDataWebPushSubscriptionsInner>;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateData
     */
    'partnership'?: string | null;
}

export const UserUpdateDataCreatedByMethodEnum = {
    AdminPanel: 'admin-panel',
    Otp: 'otp',
    Boutir: 'boutir',
    InstantReg: 'instant-reg',
    Firebase: 'firebase',
    TeamMember: 'team-member'
} as const;

export type UserUpdateDataCreatedByMethodEnum = typeof UserUpdateDataCreatedByMethodEnum[keyof typeof UserUpdateDataCreatedByMethodEnum];


/**
 * AlarmsApi - axios parameter creator
 * @export
 */
export const AlarmsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Send an alarm to the system
         * @param {AlarmPostRequest} [alarmPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alarmPost: async (alarmPostRequest?: AlarmPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/alarm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["ADMIN_PANEL_ACCESS"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(alarmPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AlarmsApi - functional programming interface
 * @export
 */
export const AlarmsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AlarmsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Send an alarm to the system
         * @param {AlarmPostRequest} [alarmPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alarmPost(alarmPostRequest?: AlarmPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlarmPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alarmPost(alarmPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AlarmsApi - factory interface
 * @export
 */
export const AlarmsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AlarmsApiFp(configuration)
    return {
        /**
         * 
         * @summary Send an alarm to the system
         * @param {AlarmsApiAlarmPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alarmPost(requestParameters: AlarmsApiAlarmPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AlarmPost200Response> {
            return localVarFp.alarmPost(requestParameters.alarmPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for alarmPost operation in AlarmsApi.
 * @export
 * @interface AlarmsApiAlarmPostRequest
 */
export interface AlarmsApiAlarmPostRequest {
    /**
     * 
     * @type {AlarmPostRequest}
     * @memberof AlarmsApiAlarmPost
     */
    readonly alarmPostRequest?: AlarmPostRequest
}

/**
 * AlarmsApi - object-oriented interface
 * @export
 * @class AlarmsApi
 * @extends {BaseAPI}
 */
export class AlarmsApi extends BaseAPI {
    /**
     * 
     * @summary Send an alarm to the system
     * @param {AlarmsApiAlarmPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlarmsApi
     */
    public alarmPost(requestParameters: AlarmsApiAlarmPostRequest = {}, options?: AxiosRequestConfig) {
        return AlarmsApiFp(this.configuration).alarmPost(requestParameters.alarmPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EventSubscriptionApi - axios parameter creator
 * @export
 */
export const EventSubscriptionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Send message to subscription
         * @param {string} id 
         * @param {string} secret 
         * @param {PostMessageBySecretRequest} [postMessageBySecretRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMessageBySecret: async (id: string, secret: string, postMessageBySecretRequest?: PostMessageBySecretRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postMessageBySecret', 'id', id)
            // verify required parameter 'secret' is not null or undefined
            assertParamExists('postMessageBySecret', 'secret', secret)
            const localVarPath = `/subscriptions/{id}/message/{secret}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"secret"}}`, encodeURIComponent(String(secret)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postMessageBySecretRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a webhook subscription
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionsDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('subscriptionsDelete', 'id', id)
            const localVarPath = `/subscriptions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["CHATDADDY_HOOK"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all current webhook & websocket subscriptions
         * @param {EventSubscriptionType} [type] Filter by subscription type
         * @param {string} [accountId] Filter by subscriptions that are enabled for this account
         * @param {Array<string>} [teamId] Filter by subscriptions that are enabled for this team
         * @param {Array<string>} [userId] Filter by subscriptions that are enabled for the specified users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionsGet: async (type?: EventSubscriptionType, accountId?: string, teamId?: Array<string>, userId?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["CHATDADDY_HOOK"], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (accountId !== undefined) {
                localVarQueryParameter['accountId'] = accountId;
            }

            if (teamId) {
                localVarQueryParameter['teamId'] = teamId;
            }

            if (userId) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send message to subscription
         * @param {string} id 
         * @param {EventWebhookData} [eventWebhookData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionsMessagePost: async (id: string, eventWebhookData?: EventWebhookData, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('subscriptionsMessagePost', 'id', id)
            const localVarPath = `/subscriptions/{id}/message`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["ADMIN_PANEL_ACCESS"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eventWebhookData, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a webhook subscription
         * @param {string} id 
         * @param {UpdateEventSubscription} [updateEventSubscription] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionsPatch: async (id: string, updateEventSubscription?: UpdateEventSubscription, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('subscriptionsPatch', 'id', id)
            const localVarPath = `/subscriptions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["CHATDADDY_HOOK"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateEventSubscription, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a webhook subscription
         * @param {PostEventSubscription} [postEventSubscription] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionsPost: async (postEventSubscription?: PostEventSubscription, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["CHATDADDY_HOOK"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postEventSubscription, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventSubscriptionApi - functional programming interface
 * @export
 */
export const EventSubscriptionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventSubscriptionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Send message to subscription
         * @param {string} id 
         * @param {string} secret 
         * @param {PostMessageBySecretRequest} [postMessageBySecretRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postMessageBySecret(id: string, secret: string, postMessageBySecretRequest?: PostMessageBySecretRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postMessageBySecret(id, secret, postMessageBySecretRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a webhook subscription
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscriptionsDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionsDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscriptionsDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all current webhook & websocket subscriptions
         * @param {EventSubscriptionType} [type] Filter by subscription type
         * @param {string} [accountId] Filter by subscriptions that are enabled for this account
         * @param {Array<string>} [teamId] Filter by subscriptions that are enabled for this team
         * @param {Array<string>} [userId] Filter by subscriptions that are enabled for the specified users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscriptionsGet(type?: EventSubscriptionType, accountId?: string, teamId?: Array<string>, userId?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscriptionsGet(type, accountId, teamId, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Send message to subscription
         * @param {string} id 
         * @param {EventWebhookData} [eventWebhookData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscriptionsMessagePost(id: string, eventWebhookData?: EventWebhookData, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscriptionsMessagePost(id, eventWebhookData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a webhook subscription
         * @param {string} id 
         * @param {UpdateEventSubscription} [updateEventSubscription] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscriptionsPatch(id: string, updateEventSubscription?: UpdateEventSubscription, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventSubscription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscriptionsPatch(id, updateEventSubscription, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a webhook subscription
         * @param {PostEventSubscription} [postEventSubscription] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscriptionsPost(postEventSubscription?: PostEventSubscription, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventSubscription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscriptionsPost(postEventSubscription, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EventSubscriptionApi - factory interface
 * @export
 */
export const EventSubscriptionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventSubscriptionApiFp(configuration)
    return {
        /**
         * 
         * @summary Send message to subscription
         * @param {EventSubscriptionApiPostMessageBySecretRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMessageBySecret(requestParameters: EventSubscriptionApiPostMessageBySecretRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postMessageBySecret(requestParameters.id, requestParameters.secret, requestParameters.postMessageBySecretRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a webhook subscription
         * @param {EventSubscriptionApiSubscriptionsDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionsDelete(requestParameters: EventSubscriptionApiSubscriptionsDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<SubscriptionsDelete200Response> {
            return localVarFp.subscriptionsDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all current webhook & websocket subscriptions
         * @param {EventSubscriptionApiSubscriptionsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionsGet(requestParameters: EventSubscriptionApiSubscriptionsGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<SubscriptionsGet200Response> {
            return localVarFp.subscriptionsGet(requestParameters.type, requestParameters.accountId, requestParameters.teamId, requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send message to subscription
         * @param {EventSubscriptionApiSubscriptionsMessagePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionsMessagePost(requestParameters: EventSubscriptionApiSubscriptionsMessagePostRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.subscriptionsMessagePost(requestParameters.id, requestParameters.eventWebhookData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a webhook subscription
         * @param {EventSubscriptionApiSubscriptionsPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionsPatch(requestParameters: EventSubscriptionApiSubscriptionsPatchRequest, options?: AxiosRequestConfig): AxiosPromise<EventSubscription> {
            return localVarFp.subscriptionsPatch(requestParameters.id, requestParameters.updateEventSubscription, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a webhook subscription
         * @param {EventSubscriptionApiSubscriptionsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionsPost(requestParameters: EventSubscriptionApiSubscriptionsPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<EventSubscription> {
            return localVarFp.subscriptionsPost(requestParameters.postEventSubscription, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for postMessageBySecret operation in EventSubscriptionApi.
 * @export
 * @interface EventSubscriptionApiPostMessageBySecretRequest
 */
export interface EventSubscriptionApiPostMessageBySecretRequest {
    /**
     * 
     * @type {string}
     * @memberof EventSubscriptionApiPostMessageBySecret
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof EventSubscriptionApiPostMessageBySecret
     */
    readonly secret: string

    /**
     * 
     * @type {PostMessageBySecretRequest}
     * @memberof EventSubscriptionApiPostMessageBySecret
     */
    readonly postMessageBySecretRequest?: PostMessageBySecretRequest
}

/**
 * Request parameters for subscriptionsDelete operation in EventSubscriptionApi.
 * @export
 * @interface EventSubscriptionApiSubscriptionsDeleteRequest
 */
export interface EventSubscriptionApiSubscriptionsDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof EventSubscriptionApiSubscriptionsDelete
     */
    readonly id: string
}

/**
 * Request parameters for subscriptionsGet operation in EventSubscriptionApi.
 * @export
 * @interface EventSubscriptionApiSubscriptionsGetRequest
 */
export interface EventSubscriptionApiSubscriptionsGetRequest {
    /**
     * Filter by subscription type
     * @type {EventSubscriptionType}
     * @memberof EventSubscriptionApiSubscriptionsGet
     */
    readonly type?: EventSubscriptionType

    /**
     * Filter by subscriptions that are enabled for this account
     * @type {string}
     * @memberof EventSubscriptionApiSubscriptionsGet
     */
    readonly accountId?: string

    /**
     * Filter by subscriptions that are enabled for this team
     * @type {Array<string>}
     * @memberof EventSubscriptionApiSubscriptionsGet
     */
    readonly teamId?: Array<string>

    /**
     * Filter by subscriptions that are enabled for the specified users
     * @type {Array<string>}
     * @memberof EventSubscriptionApiSubscriptionsGet
     */
    readonly userId?: Array<string>
}

/**
 * Request parameters for subscriptionsMessagePost operation in EventSubscriptionApi.
 * @export
 * @interface EventSubscriptionApiSubscriptionsMessagePostRequest
 */
export interface EventSubscriptionApiSubscriptionsMessagePostRequest {
    /**
     * 
     * @type {string}
     * @memberof EventSubscriptionApiSubscriptionsMessagePost
     */
    readonly id: string

    /**
     * 
     * @type {EventWebhookData}
     * @memberof EventSubscriptionApiSubscriptionsMessagePost
     */
    readonly eventWebhookData?: EventWebhookData
}

/**
 * Request parameters for subscriptionsPatch operation in EventSubscriptionApi.
 * @export
 * @interface EventSubscriptionApiSubscriptionsPatchRequest
 */
export interface EventSubscriptionApiSubscriptionsPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof EventSubscriptionApiSubscriptionsPatch
     */
    readonly id: string

    /**
     * 
     * @type {UpdateEventSubscription}
     * @memberof EventSubscriptionApiSubscriptionsPatch
     */
    readonly updateEventSubscription?: UpdateEventSubscription
}

/**
 * Request parameters for subscriptionsPost operation in EventSubscriptionApi.
 * @export
 * @interface EventSubscriptionApiSubscriptionsPostRequest
 */
export interface EventSubscriptionApiSubscriptionsPostRequest {
    /**
     * 
     * @type {PostEventSubscription}
     * @memberof EventSubscriptionApiSubscriptionsPost
     */
    readonly postEventSubscription?: PostEventSubscription
}

/**
 * EventSubscriptionApi - object-oriented interface
 * @export
 * @class EventSubscriptionApi
 * @extends {BaseAPI}
 */
export class EventSubscriptionApi extends BaseAPI {
    /**
     * 
     * @summary Send message to subscription
     * @param {EventSubscriptionApiPostMessageBySecretRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventSubscriptionApi
     */
    public postMessageBySecret(requestParameters: EventSubscriptionApiPostMessageBySecretRequest, options?: AxiosRequestConfig) {
        return EventSubscriptionApiFp(this.configuration).postMessageBySecret(requestParameters.id, requestParameters.secret, requestParameters.postMessageBySecretRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a webhook subscription
     * @param {EventSubscriptionApiSubscriptionsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventSubscriptionApi
     */
    public subscriptionsDelete(requestParameters: EventSubscriptionApiSubscriptionsDeleteRequest, options?: AxiosRequestConfig) {
        return EventSubscriptionApiFp(this.configuration).subscriptionsDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all current webhook & websocket subscriptions
     * @param {EventSubscriptionApiSubscriptionsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventSubscriptionApi
     */
    public subscriptionsGet(requestParameters: EventSubscriptionApiSubscriptionsGetRequest = {}, options?: AxiosRequestConfig) {
        return EventSubscriptionApiFp(this.configuration).subscriptionsGet(requestParameters.type, requestParameters.accountId, requestParameters.teamId, requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send message to subscription
     * @param {EventSubscriptionApiSubscriptionsMessagePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventSubscriptionApi
     */
    public subscriptionsMessagePost(requestParameters: EventSubscriptionApiSubscriptionsMessagePostRequest, options?: AxiosRequestConfig) {
        return EventSubscriptionApiFp(this.configuration).subscriptionsMessagePost(requestParameters.id, requestParameters.eventWebhookData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a webhook subscription
     * @param {EventSubscriptionApiSubscriptionsPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventSubscriptionApi
     */
    public subscriptionsPatch(requestParameters: EventSubscriptionApiSubscriptionsPatchRequest, options?: AxiosRequestConfig) {
        return EventSubscriptionApiFp(this.configuration).subscriptionsPatch(requestParameters.id, requestParameters.updateEventSubscription, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a webhook subscription
     * @param {EventSubscriptionApiSubscriptionsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventSubscriptionApi
     */
    public subscriptionsPost(requestParameters: EventSubscriptionApiSubscriptionsPostRequest = {}, options?: AxiosRequestConfig) {
        return EventSubscriptionApiFp(this.configuration).subscriptionsPost(requestParameters.postEventSubscription, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * WebSocketApi - axios parameter creator
 * @export
 */
export const WebSocketApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Connect to this route to receive live events from ChatDaddy via a WebSocket.
         * @summary The WebSocket Route
         * @param {string} accessToken the JWT authorization token
         * @param {Array<EventName>} events Events to subscribe to
         * @param {Array<string>} [accounts] Set the IM accounts to receive events from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ws: async (accessToken: string, events: Array<EventName>, accounts?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accessToken' is not null or undefined
            assertParamExists('ws', 'accessToken', accessToken)
            // verify required parameter 'events' is not null or undefined
            assertParamExists('ws', 'events', events)
            const localVarPath = `/ws`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", [], configuration)

            if (accessToken !== undefined) {
                localVarQueryParameter['accessToken'] = accessToken;
            }

            if (events) {
                localVarQueryParameter['events'] = events;
            }

            if (accounts) {
                localVarQueryParameter['accounts'] = accounts;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Connect to this route to receive live events from ChatDaddy via a WebSocket. This route is deprecated, use `/ws` instead.
         * @summary The WebSocket Route
         * @param {string} accessToken the JWT authorization token
         * @param {Array<EventName>} events Events to subscribe to
         * @param {Array<string>} [accounts] Set the IM accounts to receive events from
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        wsLegacy: async (accessToken: string, events: Array<EventName>, accounts?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accessToken' is not null or undefined
            assertParamExists('wsLegacy', 'accessToken', accessToken)
            // verify required parameter 'events' is not null or undefined
            assertParamExists('wsLegacy', 'events', events)
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", [], configuration)

            if (accessToken !== undefined) {
                localVarQueryParameter['accessToken'] = accessToken;
            }

            if (events) {
                localVarQueryParameter['events'] = events;
            }

            if (accounts) {
                localVarQueryParameter['accounts'] = accounts;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebSocketApi - functional programming interface
 * @export
 */
export const WebSocketApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebSocketApiAxiosParamCreator(configuration)
    return {
        /**
         * Connect to this route to receive live events from ChatDaddy via a WebSocket.
         * @summary The WebSocket Route
         * @param {string} accessToken the JWT authorization token
         * @param {Array<EventName>} events Events to subscribe to
         * @param {Array<string>} [accounts] Set the IM accounts to receive events from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ws(accessToken: string, events: Array<EventName>, accounts?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ws(accessToken, events, accounts, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Connect to this route to receive live events from ChatDaddy via a WebSocket. This route is deprecated, use `/ws` instead.
         * @summary The WebSocket Route
         * @param {string} accessToken the JWT authorization token
         * @param {Array<EventName>} events Events to subscribe to
         * @param {Array<string>} [accounts] Set the IM accounts to receive events from
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async wsLegacy(accessToken: string, events: Array<EventName>, accounts?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.wsLegacy(accessToken, events, accounts, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WebSocketApi - factory interface
 * @export
 */
export const WebSocketApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebSocketApiFp(configuration)
    return {
        /**
         * Connect to this route to receive live events from ChatDaddy via a WebSocket.
         * @summary The WebSocket Route
         * @param {WebSocketApiWsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ws(requestParameters: WebSocketApiWsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.ws(requestParameters.accessToken, requestParameters.events, requestParameters.accounts, options).then((request) => request(axios, basePath));
        },
        /**
         * Connect to this route to receive live events from ChatDaddy via a WebSocket. This route is deprecated, use `/ws` instead.
         * @summary The WebSocket Route
         * @param {WebSocketApiWsLegacyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        wsLegacy(requestParameters: WebSocketApiWsLegacyRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.wsLegacy(requestParameters.accessToken, requestParameters.events, requestParameters.accounts, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for ws operation in WebSocketApi.
 * @export
 * @interface WebSocketApiWsRequest
 */
export interface WebSocketApiWsRequest {
    /**
     * the JWT authorization token
     * @type {string}
     * @memberof WebSocketApiWs
     */
    readonly accessToken: string

    /**
     * Events to subscribe to
     * @type {Array<EventName>}
     * @memberof WebSocketApiWs
     */
    readonly events: Array<EventName>

    /**
     * Set the IM accounts to receive events from
     * @type {Array<string>}
     * @memberof WebSocketApiWs
     */
    readonly accounts?: Array<string>
}

/**
 * Request parameters for wsLegacy operation in WebSocketApi.
 * @export
 * @interface WebSocketApiWsLegacyRequest
 */
export interface WebSocketApiWsLegacyRequest {
    /**
     * the JWT authorization token
     * @type {string}
     * @memberof WebSocketApiWsLegacy
     */
    readonly accessToken: string

    /**
     * Events to subscribe to
     * @type {Array<EventName>}
     * @memberof WebSocketApiWsLegacy
     */
    readonly events: Array<EventName>

    /**
     * Set the IM accounts to receive events from
     * @type {Array<string>}
     * @memberof WebSocketApiWsLegacy
     */
    readonly accounts?: Array<string>
}

/**
 * WebSocketApi - object-oriented interface
 * @export
 * @class WebSocketApi
 * @extends {BaseAPI}
 */
export class WebSocketApi extends BaseAPI {
    /**
     * Connect to this route to receive live events from ChatDaddy via a WebSocket.
     * @summary The WebSocket Route
     * @param {WebSocketApiWsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebSocketApi
     */
    public ws(requestParameters: WebSocketApiWsRequest, options?: AxiosRequestConfig) {
        return WebSocketApiFp(this.configuration).ws(requestParameters.accessToken, requestParameters.events, requestParameters.accounts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Connect to this route to receive live events from ChatDaddy via a WebSocket. This route is deprecated, use `/ws` instead.
     * @summary The WebSocket Route
     * @param {WebSocketApiWsLegacyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof WebSocketApi
     */
    public wsLegacy(requestParameters: WebSocketApiWsLegacyRequest, options?: AxiosRequestConfig) {
        return WebSocketApiFp(this.configuration).wsLegacy(requestParameters.accessToken, requestParameters.events, requestParameters.accounts, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * WebhookExampleApi - axios parameter creator
 * @export
 */
export const WebhookExampleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Example of what to expect from a ChatDaddy Webhook, this is not a real route. Points to keep in mind: - the request body you\'ll receive in the webhook will   match the request body shown in this route - there will be a chatdaddy token in the headers with no scopes - a POST request will be made to the url - ChatDaddy expects a 200 response to mark a successful delivery 
         * @param {EventWebhookData} [eventWebhookData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookExample: async (eventWebhookData?: EventWebhookData, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/webhook/example`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eventWebhookData, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebhookExampleApi - functional programming interface
 * @export
 */
export const WebhookExampleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebhookExampleApiAxiosParamCreator(configuration)
    return {
        /**
         * Example of what to expect from a ChatDaddy Webhook, this is not a real route. Points to keep in mind: - the request body you\'ll receive in the webhook will   match the request body shown in this route - there will be a chatdaddy token in the headers with no scopes - a POST request will be made to the url - ChatDaddy expects a 200 response to mark a successful delivery 
         * @param {EventWebhookData} [eventWebhookData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhookExample(eventWebhookData?: EventWebhookData, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookExample(eventWebhookData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WebhookExampleApi - factory interface
 * @export
 */
export const WebhookExampleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebhookExampleApiFp(configuration)
    return {
        /**
         * Example of what to expect from a ChatDaddy Webhook, this is not a real route. Points to keep in mind: - the request body you\'ll receive in the webhook will   match the request body shown in this route - there will be a chatdaddy token in the headers with no scopes - a POST request will be made to the url - ChatDaddy expects a 200 response to mark a successful delivery 
         * @param {WebhookExampleApiWebhookExampleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookExample(requestParameters: WebhookExampleApiWebhookExampleRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.webhookExample(requestParameters.eventWebhookData, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for webhookExample operation in WebhookExampleApi.
 * @export
 * @interface WebhookExampleApiWebhookExampleRequest
 */
export interface WebhookExampleApiWebhookExampleRequest {
    /**
     * 
     * @type {EventWebhookData}
     * @memberof WebhookExampleApiWebhookExample
     */
    readonly eventWebhookData?: EventWebhookData
}

/**
 * WebhookExampleApi - object-oriented interface
 * @export
 * @class WebhookExampleApi
 * @extends {BaseAPI}
 */
export class WebhookExampleApi extends BaseAPI {
    /**
     * Example of what to expect from a ChatDaddy Webhook, this is not a real route. Points to keep in mind: - the request body you\'ll receive in the webhook will   match the request body shown in this route - there will be a chatdaddy token in the headers with no scopes - a POST request will be made to the url - ChatDaddy expects a 200 response to mark a successful delivery 
     * @param {WebhookExampleApiWebhookExampleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookExampleApi
     */
    public webhookExample(requestParameters: WebhookExampleApiWebhookExampleRequest = {}, options?: AxiosRequestConfig) {
        return WebhookExampleApiFp(this.configuration).webhookExample(requestParameters.eventWebhookData, options).then((request) => request(this.axios, this.basePath));
    }
}


