const BASE_PATH = "https://api.chatdaddy.tech/voice".replace(/\/+$/, "");

/* tslint:disable */
/* eslint-disable */
/**
 * ChatDaddy Voice Service
 * Place and receive voice calls from Chatdaddy via WebSockets 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
import type { RequestArgs } from '../base';
// @ts-ignore
import { COLLECTION_FORMATS, BaseAPI, RequiredError } from '../base';

/**
 * 
 * @export
 * @interface Call
 */
export interface Call {
    /**
     * AccountId of the user making the call
     * @type {string}
     * @memberof Call
     */
    'accountId': string;
    /**
     * TeamId of the user making the call
     * @type {string}
     * @memberof Call
     */
    'teamId'?: string;
    /**
     * phone number of the user
     * @type {string}
     * @memberof Call
     */
    'phoneNumber': string;
    /**
     * phone number of the recipient
     * @type {string}
     * @memberof Call
     */
    'to'?: string;
    /**
     * Name of the contact
     * @type {string}
     * @memberof Call
     */
    'contactName'?: string;
    /**
     * Duration of the call
     * @type {string}
     * @memberof Call
     */
    'callDuration'?: string;
    /**
     * Id of the call
     * @type {string}
     * @memberof Call
     */
    'callId': string;
    /**
     * Date of the call
     * @type {string}
     * @memberof Call
     */
    'createdAt': string;
    /**
     * URL of the recording
     * @type {string}
     * @memberof Call
     */
    'callRecording'?: string | null;
    /**
     * Notes for the call
     * @type {string}
     * @memberof Call
     */
    'callNotes'?: string | null;
}
/**
 * 
 * @export
 * @interface CallChannel
 */
export interface CallChannel {
    /**
     * ID of the contact
     * @type {string}
     * @memberof CallChannel
     */
    'name': string;
    /**
     * Access token for the contact
     * @type {string}
     * @memberof CallChannel
     */
    'phoneNumber': string;
    /**
     * TeamId of the user making the call
     * @type {string}
     * @memberof CallChannel
     */
    'teamId'?: string;
    /**
     * Outgoing caller Id
     * @type {string}
     * @memberof CallChannel
     */
    'userId'?: string;
}
/**
 * 
 * @export
 * @interface CallNotesPost200Response
 */
export interface CallNotesPost200Response {
    /**
     * 
     * @type {Call}
     * @memberof CallNotesPost200Response
     */
    'calls'?: Call;
}
/**
 * 
 * @export
 * @interface CallNotesPostRequest
 */
export interface CallNotesPostRequest {
    /**
     * Id of the call
     * @type {string}
     * @memberof CallNotesPostRequest
     */
    'callId': string;
    /**
     * Notes for the call
     * @type {string}
     * @memberof CallNotesPostRequest
     */
    'callNotes': string;
}
/**
 * 
 * @export
 * @interface CallsGet200Response
 */
export interface CallsGet200Response {
    /**
     * 
     * @type {Array<Call>}
     * @memberof CallsGet200Response
     */
    'calls'?: Array<Call>;
    /**
     * Cursor to use to fetch next page of results
     * @type {string}
     * @memberof CallsGet200Response
     */
    'nextPageCursor'?: string;
    /**
     * Total number of calls fetched
     * @type {number}
     * @memberof CallsGet200Response
     */
    'totalDataCount'?: number;
}
/**
 * 
 * @export
 * @interface HoldCallPostRequest
 */
export interface HoldCallPostRequest {
    /**
     * Id of the call
     * @type {string}
     * @memberof HoldCallPostRequest
     */
    'callId': string;
    /**
     * Status of the call
     * @type {boolean}
     * @memberof HoldCallPostRequest
     */
    'holdStatus'?: boolean;
}
/**
 * 
 * @export
 * @interface PhoneNumbersDelete200Response
 */
export interface PhoneNumbersDelete200Response {
    /**
     * 
     * @type {CallChannel}
     * @memberof PhoneNumbersDelete200Response
     */
    'phoneNumbers'?: CallChannel;
}
/**
 * 
 * @export
 * @interface PhoneNumbersDeleteRequest
 */
export interface PhoneNumbersDeleteRequest {
    /**
     * The phone number
     * @type {string}
     * @memberof PhoneNumbersDeleteRequest
     */
    'phoneNumber': string;
}
/**
 * 
 * @export
 * @interface PhoneNumbersGet200Response
 */
export interface PhoneNumbersGet200Response {
    /**
     * 
     * @type {Array<CallChannel>}
     * @memberof PhoneNumbersGet200Response
     */
    'phoneNumbers'?: Array<CallChannel>;
}
/**
 * 
 * @export
 * @interface Recording
 */
export interface Recording {
    /**
     * AccountId of the user making the call
     * @type {string}
     * @memberof Recording
     */
    'accountSid'?: string;
    /**
     * Id of the call
     * @type {string}
     * @memberof Recording
     */
    'callSid'?: string;
    /**
     * Id of the recording
     * @type {string}
     * @memberof Recording
     */
    'sid'?: string;
    /**
     * Date of the recording
     * @type {string}
     * @memberof Recording
     */
    'dateCreated'?: string;
    /**
     * Duration of the recording
     * @type {string}
     * @memberof Recording
     */
    'duration'?: string;
    /**
     * URL of the recording
     * @type {string}
     * @memberof Recording
     */
    'mediaUrl'?: string;
}
/**
 * 
 * @export
 * @interface RecordingsGet200Response
 */
export interface RecordingsGet200Response {
    /**
     * 
     * @type {Array<Recording>}
     * @memberof RecordingsGet200Response
     */
    'recordings'?: Array<Recording>;
}
/**
 * 
 * @export
 * @interface TokenGet200Response
 */
export interface TokenGet200Response {
    /**
     * 
     * @type {string}
     * @memberof TokenGet200Response
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface VerifyNumberPost200Response
 */
export interface VerifyNumberPost200Response {
    /**
     * 
     * @type {string}
     * @memberof VerifyNumberPost200Response
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifyNumberPost200Response
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifyNumberPost200Response
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface VerifyNumberPostRequest
 */
export interface VerifyNumberPostRequest {
    /**
     * The name of owner of the phone number
     * @type {string}
     * @memberof VerifyNumberPostRequest
     */
    'name'?: string;
    /**
     * The phone number
     * @type {string}
     * @memberof VerifyNumberPostRequest
     */
    'phoneNumber': string;
}
/**
 * 
 * @export
 * @interface VoiceInboundPostRequest
 */
export interface VoiceInboundPostRequest {
    /**
     * Phone number of the caller
     * @type {string}
     * @memberof VoiceInboundPostRequest
     */
    'From': string;
    /**
     * Phone number of the recipient of the call
     * @type {string}
     * @memberof VoiceInboundPostRequest
     */
    'To': string;
    /**
     * Id of the call
     * @type {string}
     * @memberof VoiceInboundPostRequest
     */
    'CallSid'?: string;
}
/**
 * 
 * @export
 * @interface VoiceOutboundPostRequest
 */
export interface VoiceOutboundPostRequest {
    /**
     * Phone number of the caller
     * @type {string}
     * @memberof VoiceOutboundPostRequest
     */
    'From': string;
    /**
     * Phone number of the recipient of the call
     * @type {string}
     * @memberof VoiceOutboundPostRequest
     */
    'To': string;
    /**
     * Id of the call
     * @type {string}
     * @memberof VoiceOutboundPostRequest
     */
    'CallSid'?: string;
    /**
     * Name of the contact
     * @type {string}
     * @memberof VoiceOutboundPostRequest
     */
    'contactName'?: string;
    /**
     * The account id of the user making the call
     * @type {string}
     * @memberof VoiceOutboundPostRequest
     */
    'accountId': string;
    /**
     * The team id of the user making the call
     * @type {string}
     * @memberof VoiceOutboundPostRequest
     */
    'teamId': string;
    /**
     * Flag for whether or not call should be recorded
     * @type {string}
     * @memberof VoiceOutboundPostRequest
     */
    'record'?: string;
}

/**
 * CallsApi - axios parameter creator
 * @export
 */
export const CallsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add notes to the call
         * @param {CallNotesPostRequest} [callNotesPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        callNotesPost: async (callNotesPostRequest?: CallNotesPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/callNotes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(callNotesPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the calls for the account
         * @param {string} [q] Search items by this string
         * @param {Array<string>} [phoneNumbers] list of phone numbers
         * @param {string} [callsDateRangeFrom] 
         * @param {string} [callsDateRangeTo] 
         * @param {string} [before] 
         * @param {number} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        callsGet: async (q?: string, phoneNumbers?: Array<string>, callsDateRangeFrom?: string, callsDateRangeTo?: string, before?: string, count?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/calls`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", [], configuration)

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (phoneNumbers) {
                localVarQueryParameter['phoneNumbers'] = phoneNumbers;
            }

            if (callsDateRangeFrom !== undefined) {
                localVarQueryParameter['callsDateRangeFrom'] = (callsDateRangeFrom as any instanceof Date) ?
                    (callsDateRangeFrom as any).toISOString() :
                    callsDateRangeFrom;
            }

            if (callsDateRangeTo !== undefined) {
                localVarQueryParameter['callsDateRangeTo'] = (callsDateRangeTo as any instanceof Date) ?
                    (callsDateRangeTo as any).toISOString() :
                    callsDateRangeTo;
            }

            if (before !== undefined) {
                localVarQueryParameter['before'] = before;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hold or resume the call
         * @param {HoldCallPostRequest} [holdCallPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        holdCallPost: async (holdCallPostRequest?: HoldCallPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/holdCall`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(holdCallPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete the phone number
         * @param {PhoneNumbersDeleteRequest} [phoneNumbersDeleteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phoneNumbersDelete: async (phoneNumbersDeleteRequest?: PhoneNumbersDeleteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/phoneNumbers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["CALL_PHONE_DELETE"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(phoneNumbersDeleteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the phone numbers for the account
         * @param {string} [q] Search items by this string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phoneNumbersGet: async (q?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/phoneNumbers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", [], configuration)

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the call recordings for the account
         * @param {string} accountId The account id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordingsGet: async (accountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('recordingsGet', 'accountId', accountId)
            const localVarPath = `/recordings/{accountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the twilio token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Verify the number
         * @param {string} accountId The account id
         * @param {VerifyNumberPostRequest} [verifyNumberPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyNumberPost: async (accountId: string, verifyNumberPostRequest?: VerifyNumberPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('verifyNumberPost', 'accountId', accountId)
            const localVarPath = `/verifyNumber/{accountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["CALL_PHONE_CREATE"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verifyNumberPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inbound call route which receives webhook event and forwards to chatdaddy user
         * @param {VoiceInboundPostRequest} [voiceInboundPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voiceInboundPost: async (voiceInboundPostRequest?: VoiceInboundPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/voice/inbound`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(voiceInboundPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Place the call and pass the audio stream
         * @param {VoiceOutboundPostRequest} [voiceOutboundPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voiceOutboundPost: async (voiceOutboundPostRequest?: VoiceOutboundPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/voice/outbound`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(voiceOutboundPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CallsApi - functional programming interface
 * @export
 */
export const CallsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CallsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add notes to the call
         * @param {CallNotesPostRequest} [callNotesPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async callNotesPost(callNotesPostRequest?: CallNotesPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CallNotesPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.callNotesPost(callNotesPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the calls for the account
         * @param {string} [q] Search items by this string
         * @param {Array<string>} [phoneNumbers] list of phone numbers
         * @param {string} [callsDateRangeFrom] 
         * @param {string} [callsDateRangeTo] 
         * @param {string} [before] 
         * @param {number} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async callsGet(q?: string, phoneNumbers?: Array<string>, callsDateRangeFrom?: string, callsDateRangeTo?: string, before?: string, count?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CallsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.callsGet(q, phoneNumbers, callsDateRangeFrom, callsDateRangeTo, before, count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Hold or resume the call
         * @param {HoldCallPostRequest} [holdCallPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async holdCallPost(holdCallPostRequest?: HoldCallPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CallNotesPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.holdCallPost(holdCallPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete the phone number
         * @param {PhoneNumbersDeleteRequest} [phoneNumbersDeleteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async phoneNumbersDelete(phoneNumbersDeleteRequest?: PhoneNumbersDeleteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhoneNumbersDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.phoneNumbersDelete(phoneNumbersDeleteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the phone numbers for the account
         * @param {string} [q] Search items by this string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async phoneNumbersGet(q?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhoneNumbersGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.phoneNumbersGet(q, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the call recordings for the account
         * @param {string} accountId The account id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recordingsGet(accountId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecordingsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recordingsGet(accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the twilio token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tokenGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tokenGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Verify the number
         * @param {string} accountId The account id
         * @param {VerifyNumberPostRequest} [verifyNumberPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyNumberPost(accountId: string, verifyNumberPostRequest?: VerifyNumberPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerifyNumberPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyNumberPost(accountId, verifyNumberPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Inbound call route which receives webhook event and forwards to chatdaddy user
         * @param {VoiceInboundPostRequest} [voiceInboundPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async voiceInboundPost(voiceInboundPostRequest?: VoiceInboundPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.voiceInboundPost(voiceInboundPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Place the call and pass the audio stream
         * @param {VoiceOutboundPostRequest} [voiceOutboundPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async voiceOutboundPost(voiceOutboundPostRequest?: VoiceOutboundPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.voiceOutboundPost(voiceOutboundPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CallsApi - factory interface
 * @export
 */
export const CallsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CallsApiFp(configuration)
    return {
        /**
         * 
         * @summary Add notes to the call
         * @param {CallsApiCallNotesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        callNotesPost(requestParameters: CallsApiCallNotesPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CallNotesPost200Response> {
            return localVarFp.callNotesPost(requestParameters.callNotesPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the calls for the account
         * @param {CallsApiCallsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        callsGet(requestParameters: CallsApiCallsGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CallsGet200Response> {
            return localVarFp.callsGet(requestParameters.q, requestParameters.phoneNumbers, requestParameters.callsDateRangeFrom, requestParameters.callsDateRangeTo, requestParameters.before, requestParameters.count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hold or resume the call
         * @param {CallsApiHoldCallPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        holdCallPost(requestParameters: CallsApiHoldCallPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CallNotesPost200Response> {
            return localVarFp.holdCallPost(requestParameters.holdCallPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete the phone number
         * @param {CallsApiPhoneNumbersDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phoneNumbersDelete(requestParameters: CallsApiPhoneNumbersDeleteRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PhoneNumbersDelete200Response> {
            return localVarFp.phoneNumbersDelete(requestParameters.phoneNumbersDeleteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the phone numbers for the account
         * @param {CallsApiPhoneNumbersGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phoneNumbersGet(requestParameters: CallsApiPhoneNumbersGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PhoneNumbersGet200Response> {
            return localVarFp.phoneNumbersGet(requestParameters.q, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the call recordings for the account
         * @param {CallsApiRecordingsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordingsGet(requestParameters: CallsApiRecordingsGetRequest, options?: AxiosRequestConfig): AxiosPromise<RecordingsGet200Response> {
            return localVarFp.recordingsGet(requestParameters.accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the twilio token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenGet(options?: AxiosRequestConfig): AxiosPromise<TokenGet200Response> {
            return localVarFp.tokenGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Verify the number
         * @param {CallsApiVerifyNumberPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyNumberPost(requestParameters: CallsApiVerifyNumberPostRequest, options?: AxiosRequestConfig): AxiosPromise<VerifyNumberPost200Response> {
            return localVarFp.verifyNumberPost(requestParameters.accountId, requestParameters.verifyNumberPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Inbound call route which receives webhook event and forwards to chatdaddy user
         * @param {CallsApiVoiceInboundPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voiceInboundPost(requestParameters: CallsApiVoiceInboundPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.voiceInboundPost(requestParameters.voiceInboundPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Place the call and pass the audio stream
         * @param {CallsApiVoiceOutboundPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voiceOutboundPost(requestParameters: CallsApiVoiceOutboundPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.voiceOutboundPost(requestParameters.voiceOutboundPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for callNotesPost operation in CallsApi.
 * @export
 * @interface CallsApiCallNotesPostRequest
 */
export interface CallsApiCallNotesPostRequest {
    /**
     * 
     * @type {CallNotesPostRequest}
     * @memberof CallsApiCallNotesPost
     */
    readonly callNotesPostRequest?: CallNotesPostRequest
}

/**
 * Request parameters for callsGet operation in CallsApi.
 * @export
 * @interface CallsApiCallsGetRequest
 */
export interface CallsApiCallsGetRequest {
    /**
     * Search items by this string
     * @type {string}
     * @memberof CallsApiCallsGet
     */
    readonly q?: string

    /**
     * list of phone numbers
     * @type {Array<string>}
     * @memberof CallsApiCallsGet
     */
    readonly phoneNumbers?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof CallsApiCallsGet
     */
    readonly callsDateRangeFrom?: string

    /**
     * 
     * @type {string}
     * @memberof CallsApiCallsGet
     */
    readonly callsDateRangeTo?: string

    /**
     * 
     * @type {string}
     * @memberof CallsApiCallsGet
     */
    readonly before?: string

    /**
     * 
     * @type {number}
     * @memberof CallsApiCallsGet
     */
    readonly count?: number
}

/**
 * Request parameters for holdCallPost operation in CallsApi.
 * @export
 * @interface CallsApiHoldCallPostRequest
 */
export interface CallsApiHoldCallPostRequest {
    /**
     * 
     * @type {HoldCallPostRequest}
     * @memberof CallsApiHoldCallPost
     */
    readonly holdCallPostRequest?: HoldCallPostRequest
}

/**
 * Request parameters for phoneNumbersDelete operation in CallsApi.
 * @export
 * @interface CallsApiPhoneNumbersDeleteRequest
 */
export interface CallsApiPhoneNumbersDeleteRequest {
    /**
     * 
     * @type {PhoneNumbersDeleteRequest}
     * @memberof CallsApiPhoneNumbersDelete
     */
    readonly phoneNumbersDeleteRequest?: PhoneNumbersDeleteRequest
}

/**
 * Request parameters for phoneNumbersGet operation in CallsApi.
 * @export
 * @interface CallsApiPhoneNumbersGetRequest
 */
export interface CallsApiPhoneNumbersGetRequest {
    /**
     * Search items by this string
     * @type {string}
     * @memberof CallsApiPhoneNumbersGet
     */
    readonly q?: string
}

/**
 * Request parameters for recordingsGet operation in CallsApi.
 * @export
 * @interface CallsApiRecordingsGetRequest
 */
export interface CallsApiRecordingsGetRequest {
    /**
     * The account id
     * @type {string}
     * @memberof CallsApiRecordingsGet
     */
    readonly accountId: string
}

/**
 * Request parameters for verifyNumberPost operation in CallsApi.
 * @export
 * @interface CallsApiVerifyNumberPostRequest
 */
export interface CallsApiVerifyNumberPostRequest {
    /**
     * The account id
     * @type {string}
     * @memberof CallsApiVerifyNumberPost
     */
    readonly accountId: string

    /**
     * 
     * @type {VerifyNumberPostRequest}
     * @memberof CallsApiVerifyNumberPost
     */
    readonly verifyNumberPostRequest?: VerifyNumberPostRequest
}

/**
 * Request parameters for voiceInboundPost operation in CallsApi.
 * @export
 * @interface CallsApiVoiceInboundPostRequest
 */
export interface CallsApiVoiceInboundPostRequest {
    /**
     * 
     * @type {VoiceInboundPostRequest}
     * @memberof CallsApiVoiceInboundPost
     */
    readonly voiceInboundPostRequest?: VoiceInboundPostRequest
}

/**
 * Request parameters for voiceOutboundPost operation in CallsApi.
 * @export
 * @interface CallsApiVoiceOutboundPostRequest
 */
export interface CallsApiVoiceOutboundPostRequest {
    /**
     * 
     * @type {VoiceOutboundPostRequest}
     * @memberof CallsApiVoiceOutboundPost
     */
    readonly voiceOutboundPostRequest?: VoiceOutboundPostRequest
}

/**
 * CallsApi - object-oriented interface
 * @export
 * @class CallsApi
 * @extends {BaseAPI}
 */
export class CallsApi extends BaseAPI {
    /**
     * 
     * @summary Add notes to the call
     * @param {CallsApiCallNotesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallsApi
     */
    public callNotesPost(requestParameters: CallsApiCallNotesPostRequest = {}, options?: AxiosRequestConfig) {
        return CallsApiFp(this.configuration).callNotesPost(requestParameters.callNotesPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the calls for the account
     * @param {CallsApiCallsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallsApi
     */
    public callsGet(requestParameters: CallsApiCallsGetRequest = {}, options?: AxiosRequestConfig) {
        return CallsApiFp(this.configuration).callsGet(requestParameters.q, requestParameters.phoneNumbers, requestParameters.callsDateRangeFrom, requestParameters.callsDateRangeTo, requestParameters.before, requestParameters.count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hold or resume the call
     * @param {CallsApiHoldCallPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallsApi
     */
    public holdCallPost(requestParameters: CallsApiHoldCallPostRequest = {}, options?: AxiosRequestConfig) {
        return CallsApiFp(this.configuration).holdCallPost(requestParameters.holdCallPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete the phone number
     * @param {CallsApiPhoneNumbersDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallsApi
     */
    public phoneNumbersDelete(requestParameters: CallsApiPhoneNumbersDeleteRequest = {}, options?: AxiosRequestConfig) {
        return CallsApiFp(this.configuration).phoneNumbersDelete(requestParameters.phoneNumbersDeleteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the phone numbers for the account
     * @param {CallsApiPhoneNumbersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallsApi
     */
    public phoneNumbersGet(requestParameters: CallsApiPhoneNumbersGetRequest = {}, options?: AxiosRequestConfig) {
        return CallsApiFp(this.configuration).phoneNumbersGet(requestParameters.q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the call recordings for the account
     * @param {CallsApiRecordingsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallsApi
     */
    public recordingsGet(requestParameters: CallsApiRecordingsGetRequest, options?: AxiosRequestConfig) {
        return CallsApiFp(this.configuration).recordingsGet(requestParameters.accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the twilio token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallsApi
     */
    public tokenGet(options?: AxiosRequestConfig) {
        return CallsApiFp(this.configuration).tokenGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Verify the number
     * @param {CallsApiVerifyNumberPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallsApi
     */
    public verifyNumberPost(requestParameters: CallsApiVerifyNumberPostRequest, options?: AxiosRequestConfig) {
        return CallsApiFp(this.configuration).verifyNumberPost(requestParameters.accountId, requestParameters.verifyNumberPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Inbound call route which receives webhook event and forwards to chatdaddy user
     * @param {CallsApiVoiceInboundPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallsApi
     */
    public voiceInboundPost(requestParameters: CallsApiVoiceInboundPostRequest = {}, options?: AxiosRequestConfig) {
        return CallsApiFp(this.configuration).voiceInboundPost(requestParameters.voiceInboundPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Place the call and pass the audio stream
     * @param {CallsApiVoiceOutboundPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallsApi
     */
    public voiceOutboundPost(requestParameters: CallsApiVoiceOutboundPostRequest = {}, options?: AxiosRequestConfig) {
        return CallsApiFp(this.configuration).voiceOutboundPost(requestParameters.voiceOutboundPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


