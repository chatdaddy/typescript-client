const BASE_PATH = "https://api-nfc.wscrm.me".replace(/\/+$/, "");

/* tslint:disable */
/* eslint-disable */
/**
 * NFC Service
 * NFC Service API for ChatDaddy Admin  
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
import type { RequestArgs } from '../base';
// @ts-ignore
import { COLLECTION_FORMATS, BaseAPI, RequiredError } from '../base';

/**
 * 
 * @export
 * @interface CouponCampaign
 */
export interface CouponCampaign {
    /**
     * The ID of the QR Code
     * @type {string}
     * @memberof CouponCampaign
     */
    'id': string;
    /**
     * The team ID
     * @type {string}
     * @memberof CouponCampaign
     */
    'teamId'?: string;
    /**
     * The URL of the QR Code
     * @type {Array<CouponCode>}
     * @memberof CouponCampaign
     */
    'couponCodes'?: Array<CouponCode> | null;
    /**
     * 
     * @type {CouponCampaignRedemptionRules}
     * @memberof CouponCampaign
     */
    'redemptionRules'?: CouponCampaignRedemptionRules;
    /**
     * The date and time the codes expire
     * @type {string}
     * @memberof CouponCampaign
     */
    'expiresAt'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CouponCampaign
     */
    'scannedAmount'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CouponCampaign
     */
    'couponCount'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CouponCampaign
     */
    'backgroundColor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CouponCampaign
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CouponCampaign
     */
    'couponProfileImage'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CouponCampaign
     */
    'mainImage'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CouponCampaign
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CouponCampaign
     */
    'showAs'?: CouponCampaignShowAsEnum;
    /**
     * 
     * @type {string}
     * @memberof CouponCampaign
     */
    'terms'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CouponCampaign
     */
    'showSerial'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof CouponCampaign
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CouponCampaign
     */
    'updatedAt'?: string;
}

export const CouponCampaignShowAsEnum = {
    Qr: 'qr',
    Barcode: 'barcode'
} as const;

export type CouponCampaignShowAsEnum = typeof CouponCampaignShowAsEnum[keyof typeof CouponCampaignShowAsEnum];

/**
 * 
 * @export
 * @interface CouponCampaignCreate
 */
export interface CouponCampaignCreate {
    /**
     * The team ID
     * @type {string}
     * @memberof CouponCampaignCreate
     */
    'teamId': string;
    /**
     * The URL of the QR Code
     * @type {Array<CouponCode>}
     * @memberof CouponCampaignCreate
     */
    'couponCodes'?: Array<CouponCode> | null;
    /**
     * The date and time the codes expire
     * @type {string}
     * @memberof CouponCampaignCreate
     */
    'expiresAt'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CouponCampaignCreate
     */
    'scannedAmount'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CouponCampaignCreate
     */
    'couponCount'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CouponCampaignCreate
     */
    'backgroundColor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CouponCampaignCreate
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CouponCampaignCreate
     */
    'couponProfileImage'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CouponCampaignCreate
     */
    'mainImage'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CouponCampaignCreate
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CouponCampaignCreate
     */
    'showAs'?: CouponCampaignCreateShowAsEnum;
    /**
     * 
     * @type {string}
     * @memberof CouponCampaignCreate
     */
    'terms'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CouponCampaignCreate
     */
    'showSerial'?: boolean | null;
}

export const CouponCampaignCreateShowAsEnum = {
    Qr: 'qr',
    Barcode: 'barcode'
} as const;

export type CouponCampaignCreateShowAsEnum = typeof CouponCampaignCreateShowAsEnum[keyof typeof CouponCampaignCreateShowAsEnum];

/**
 * 
 * @export
 * @interface CouponCampaignRedemptionRules
 */
export interface CouponCampaignRedemptionRules {
    /**
     * 
     * @type {boolean}
     * @memberof CouponCampaignRedemptionRules
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof CouponCampaignRedemptionRules
     */
    'specificContactIds'?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface CouponCode
 */
export interface CouponCode {
    /**
     * The ID of the Coupon Code
     * @type {string}
     * @memberof CouponCode
     */
    'id': string;
    /**
     * The coupon code
     * @type {string}
     * @memberof CouponCode
     */
    'code'?: string;
    /**
     * The campaign ID
     * @type {string}
     * @memberof CouponCode
     */
    'campaignId'?: string;
    /**
     * The contact ID
     * @type {string}
     * @memberof CouponCode
     */
    'contactId'?: string | null;
    /**
     * The coupon has been redeemed
     * @type {boolean}
     * @memberof CouponCode
     */
    'redeemed'?: boolean;
    /**
     * The date and time the coupon was redeemed
     * @type {string}
     * @memberof CouponCode
     */
    'redeemedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface CreateQrCodes200Response
 */
export interface CreateQrCodes200Response {
    /**
     * 
     * @type {Array<QRCode>}
     * @memberof CreateQrCodes200Response
     */
    'qrCodes'?: Array<QRCode>;
}
/**
 * 
 * @export
 * @interface CreateQrCodesRequest
 */
export interface CreateQrCodesRequest {
    /**
     * 
     * @type {Array<QRCodeCreate>}
     * @memberof CreateQrCodesRequest
     */
    'qrCodes': Array<QRCodeCreate>;
}
/**
 * 
 * @export
 * @interface DeleteCouponCampaignsRequest
 */
export interface DeleteCouponCampaignsRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof DeleteCouponCampaignsRequest
     */
    'ids': Array<string>;
}
/**
 * 
 * @export
 * @interface GetCampaignData200Response
 */
export interface GetCampaignData200Response {
    /**
     * 
     * @type {CouponCampaign}
     * @memberof GetCampaignData200Response
     */
    'couponCampaign'?: CouponCampaign;
}
/**
 * 
 * @export
 * @interface GetCouponCampaigns200Response
 */
export interface GetCouponCampaigns200Response {
    /**
     * 
     * @type {Array<CouponCampaign>}
     * @memberof GetCouponCampaigns200Response
     */
    'couponCampaigns': Array<CouponCampaign>;
    /**
     * The total amount of CouponCampaigns
     * @type {number}
     * @memberof GetCouponCampaigns200Response
     */
    'total': number;
    /**
     * The cursor for the next page
     * @type {string}
     * @memberof GetCouponCampaigns200Response
     */
    'cursor'?: string;
}
/**
 * 
 * @export
 * @interface GetCouponData200Response
 */
export interface GetCouponData200Response {
    /**
     * 
     * @type {CouponCode}
     * @memberof GetCouponData200Response
     */
    'couponCode'?: CouponCode;
    /**
     * 
     * @type {CouponCampaign}
     * @memberof GetCouponData200Response
     */
    'couponCampaign'?: CouponCampaign;
}
/**
 * 
 * @export
 * @interface GetCoupons200Response
 */
export interface GetCoupons200Response {
    /**
     * 
     * @type {Array<CouponCode>}
     * @memberof GetCoupons200Response
     */
    'coupons': Array<CouponCode>;
    /**
     * The total amount of Coupons
     * @type {number}
     * @memberof GetCoupons200Response
     */
    'total': number;
    /**
     * The cursor for the next page
     * @type {string}
     * @memberof GetCoupons200Response
     */
    'cursor'?: string;
}
/**
 * 
 * @export
 * @interface GetQrCodes200Response
 */
export interface GetQrCodes200Response {
    /**
     * 
     * @type {Array<QRCode>}
     * @memberof GetQrCodes200Response
     */
    'qrCodes'?: Array<QRCode>;
    /**
     * The total amount of QrCodes
     * @type {number}
     * @memberof GetQrCodes200Response
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface QRCode
 */
export interface QRCode {
    /**
     * The ID of the QR Code
     * @type {string}
     * @memberof QRCode
     */
    'id': string;
    /**
     * The URL of the QR Code
     * @type {string}
     * @memberof QRCode
     */
    'qrUrl': string;
    /**
     * The URL of the QR Code
     * @type {string}
     * @memberof QRCode
     */
    'redirectUrl'?: string;
    /**
     * The category of the QR Code
     * @type {string}
     * @memberof QRCode
     */
    'category'?: string;
    /**
     * The amount of times the QR Code has been scanned
     * @type {number}
     * @memberof QRCode
     */
    'scannedAmount'?: number;
    /**
     * The date and time the QR Code was created
     * @type {string}
     * @memberof QRCode
     */
    'createdAt'?: string;
    /**
     * The date and time the QR Code was last updated
     * @type {string}
     * @memberof QRCode
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface QRCodeCreate
 */
export interface QRCodeCreate {
    /**
     * The ID of the QR Code
     * @type {string}
     * @memberof QRCodeCreate
     */
    'id': string;
    /**
     * The URL of the QR Code
     * @type {string}
     * @memberof QRCodeCreate
     */
    'qrUrl': string;
    /**
     * The URL of the QR Code
     * @type {string}
     * @memberof QRCodeCreate
     */
    'redirectUrl'?: string;
    /**
     * The category of the QR Code
     * @type {string}
     * @memberof QRCodeCreate
     */
    'category'?: string;
}
/**
 * 
 * @export
 * @interface QRCodeUpdate
 */
export interface QRCodeUpdate {
    /**
     * The ID of the QR Code
     * @type {string}
     * @memberof QRCodeUpdate
     */
    'id': string;
    /**
     * The URL of the QR Code
     * @type {string}
     * @memberof QRCodeUpdate
     */
    'qrUrl'?: string;
    /**
     * The URL of the QR Code
     * @type {string}
     * @memberof QRCodeUpdate
     */
    'redirectUrl'?: string;
    /**
     * The category of the QR Code
     * @type {string}
     * @memberof QRCodeUpdate
     */
    'category'?: string;
    /**
     * The amount of times the QR Code has been scanned
     * @type {number}
     * @memberof QRCodeUpdate
     */
    'scannedAmount'?: number;
}
/**
 * 
 * @export
 * @interface RedeemCouponRequest
 */
export interface RedeemCouponRequest {
    /**
     * The coupon code to redeem
     * @type {string}
     * @memberof RedeemCouponRequest
     */
    'couponCode'?: string;
    /**
     * The contact ID to redeem
     * @type {string}
     * @memberof RedeemCouponRequest
     */
    'contactId'?: string;
}
/**
 * 
 * @export
 * @interface UpdateQrCodesRequest
 */
export interface UpdateQrCodesRequest {
    /**
     * 
     * @type {Array<QRCodeUpdate>}
     * @memberof UpdateQrCodesRequest
     */
    'qrCodes': Array<QRCodeUpdate>;
}

/**
 * CouponCampaignApi - axios parameter creator
 * @export
 */
export const CouponCampaignApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates CouponCampaign
         * @param {CouponCampaignCreate} couponCampaignCreate CouponCampaign to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCouponCampaign: async (couponCampaignCreate: CouponCampaignCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'couponCampaignCreate' is not null or undefined
            assertParamExists('createCouponCampaign', 'couponCampaignCreate', couponCampaignCreate)
            const localVarPath = `/coupon-campaigns`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["COUPON_CREATE"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(couponCampaignCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes CouponCampaigns
         * @param {DeleteCouponCampaignsRequest} deleteCouponCampaignsRequest CouponCampaigns to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCouponCampaigns: async (deleteCouponCampaignsRequest: DeleteCouponCampaignsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteCouponCampaignsRequest' is not null or undefined
            assertParamExists('deleteCouponCampaigns', 'deleteCouponCampaignsRequest', deleteCouponCampaignsRequest)
            const localVarPath = `/coupon-campaigns`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["COUPON_DELETE"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteCouponCampaignsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a CampaignData
         * @param {string} campaignId The ID of the CampaignData to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignData: async (campaignId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('getCampaignData', 'campaignId', campaignId)
            const localVarPath = `/campaign-data/{campaignId}`
                .replace(`{${"campaignId"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a Coupon
         * @param {string} campaignId The ID of the CouponCampaign to retrieve
         * @param {string} contactId The contact ID
         * @param {string} captchaToken The captcha token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoupon: async (campaignId: string, contactId: string, captchaToken: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('getCoupon', 'campaignId', campaignId)
            // verify required parameter 'contactId' is not null or undefined
            assertParamExists('getCoupon', 'contactId', contactId)
            // verify required parameter 'captchaToken' is not null or undefined
            assertParamExists('getCoupon', 'captchaToken', captchaToken)
            const localVarPath = `/coupon-campaign/{campaignId}/coupon`
                .replace(`{${"campaignId"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contactId !== undefined) {
                localVarQueryParameter['contactId'] = contactId;
            }

            if (captchaToken !== undefined) {
                localVarQueryParameter['captchaToken'] = captchaToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a CouponCampaign
         * @param {string} id The ID of the CouponCampaign to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCouponCampaign: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCouponCampaign', 'id', id)
            const localVarPath = `/coupon-campaign/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["COUPON_READ"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all CouponCampaigns
         * @param {string} [q] 
         * @param {number} [count] 
         * @param {string} [cursor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCouponCampaigns: async (q?: string, count?: number, cursor?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/coupon-campaigns`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["COUPON_READ"], configuration)

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a CouponData
         * @param {string} couponId The ID of the CouponData to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCouponData: async (couponId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'couponId' is not null or undefined
            assertParamExists('getCouponData', 'couponId', couponId)
            const localVarPath = `/coupon-data/{couponId}`
                .replace(`{${"couponId"}}`, encodeURIComponent(String(couponId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Coupons
         * @param {string} campaignId The ID of the CouponCampaign to retrieve
         * @param {string} [q] 
         * @param {number} [count] 
         * @param {string} [cursor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoupons: async (campaignId: string, q?: string, count?: number, cursor?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('getCoupons', 'campaignId', campaignId)
            const localVarPath = `/coupon-campaign/{campaignId}/coupons`
                .replace(`{${"campaignId"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["COUPON_READ"], configuration)

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Redeem a Coupon
         * @param {string} couponId The ID of the Coupon to redeem
         * @param {RedeemCouponRequest} redeemCouponRequest Coupon to redeem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redeemCoupon: async (couponId: string, redeemCouponRequest: RedeemCouponRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'couponId' is not null or undefined
            assertParamExists('redeemCoupon', 'couponId', couponId)
            // verify required parameter 'redeemCouponRequest' is not null or undefined
            assertParamExists('redeemCoupon', 'redeemCouponRequest', redeemCouponRequest)
            const localVarPath = `/coupon-redeem/{couponId}`
                .replace(`{${"couponId"}}`, encodeURIComponent(String(couponId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(redeemCouponRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a CouponCampaign
         * @param {string} id The ID of the CouponCampaign to retrieve
         * @param {CouponCampaign} couponCampaign CouponCampaign to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCouponCampaign: async (id: string, couponCampaign: CouponCampaign, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateCouponCampaign', 'id', id)
            // verify required parameter 'couponCampaign' is not null or undefined
            assertParamExists('updateCouponCampaign', 'couponCampaign', couponCampaign)
            const localVarPath = `/coupon-campaign/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["COUPON_UPDATE"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(couponCampaign, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CouponCampaignApi - functional programming interface
 * @export
 */
export const CouponCampaignApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CouponCampaignApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates CouponCampaign
         * @param {CouponCampaignCreate} couponCampaignCreate CouponCampaign to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCouponCampaign(couponCampaignCreate: CouponCampaignCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CouponCampaign>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCouponCampaign(couponCampaignCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes CouponCampaigns
         * @param {DeleteCouponCampaignsRequest} deleteCouponCampaignsRequest CouponCampaigns to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCouponCampaigns(deleteCouponCampaignsRequest: DeleteCouponCampaignsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCouponCampaigns(deleteCouponCampaignsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a CampaignData
         * @param {string} campaignId The ID of the CampaignData to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCampaignData(campaignId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCampaignData200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCampaignData(campaignId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a Coupon
         * @param {string} campaignId The ID of the CouponCampaign to retrieve
         * @param {string} contactId The contact ID
         * @param {string} captchaToken The captcha token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCoupon(campaignId: string, contactId: string, captchaToken: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CouponCode>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCoupon(campaignId, contactId, captchaToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a CouponCampaign
         * @param {string} id The ID of the CouponCampaign to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCouponCampaign(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CouponCampaign>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCouponCampaign(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all CouponCampaigns
         * @param {string} [q] 
         * @param {number} [count] 
         * @param {string} [cursor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCouponCampaigns(q?: string, count?: number, cursor?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCouponCampaigns200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCouponCampaigns(q, count, cursor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a CouponData
         * @param {string} couponId The ID of the CouponData to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCouponData(couponId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCouponData200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCouponData(couponId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Coupons
         * @param {string} campaignId The ID of the CouponCampaign to retrieve
         * @param {string} [q] 
         * @param {number} [count] 
         * @param {string} [cursor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCoupons(campaignId: string, q?: string, count?: number, cursor?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCoupons200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCoupons(campaignId, q, count, cursor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Redeem a Coupon
         * @param {string} couponId The ID of the Coupon to redeem
         * @param {RedeemCouponRequest} redeemCouponRequest Coupon to redeem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async redeemCoupon(couponId: string, redeemCouponRequest: RedeemCouponRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CouponCode>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.redeemCoupon(couponId, redeemCouponRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a CouponCampaign
         * @param {string} id The ID of the CouponCampaign to retrieve
         * @param {CouponCampaign} couponCampaign CouponCampaign to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCouponCampaign(id: string, couponCampaign: CouponCampaign, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CouponCampaign>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCouponCampaign(id, couponCampaign, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CouponCampaignApi - factory interface
 * @export
 */
export const CouponCampaignApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CouponCampaignApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates CouponCampaign
         * @param {CouponCampaignApiCreateCouponCampaignRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCouponCampaign(requestParameters: CouponCampaignApiCreateCouponCampaignRequest, options?: AxiosRequestConfig): AxiosPromise<CouponCampaign> {
            return localVarFp.createCouponCampaign(requestParameters.couponCampaignCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes CouponCampaigns
         * @param {CouponCampaignApiDeleteCouponCampaignsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCouponCampaigns(requestParameters: CouponCampaignApiDeleteCouponCampaignsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCouponCampaigns(requestParameters.deleteCouponCampaignsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a CampaignData
         * @param {CouponCampaignApiGetCampaignDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignData(requestParameters: CouponCampaignApiGetCampaignDataRequest, options?: AxiosRequestConfig): AxiosPromise<GetCampaignData200Response> {
            return localVarFp.getCampaignData(requestParameters.campaignId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a Coupon
         * @param {CouponCampaignApiGetCouponRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoupon(requestParameters: CouponCampaignApiGetCouponRequest, options?: AxiosRequestConfig): AxiosPromise<CouponCode> {
            return localVarFp.getCoupon(requestParameters.campaignId, requestParameters.contactId, requestParameters.captchaToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a CouponCampaign
         * @param {CouponCampaignApiGetCouponCampaignRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCouponCampaign(requestParameters: CouponCampaignApiGetCouponCampaignRequest, options?: AxiosRequestConfig): AxiosPromise<CouponCampaign> {
            return localVarFp.getCouponCampaign(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all CouponCampaigns
         * @param {CouponCampaignApiGetCouponCampaignsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCouponCampaigns(requestParameters: CouponCampaignApiGetCouponCampaignsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetCouponCampaigns200Response> {
            return localVarFp.getCouponCampaigns(requestParameters.q, requestParameters.count, requestParameters.cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a CouponData
         * @param {CouponCampaignApiGetCouponDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCouponData(requestParameters: CouponCampaignApiGetCouponDataRequest, options?: AxiosRequestConfig): AxiosPromise<GetCouponData200Response> {
            return localVarFp.getCouponData(requestParameters.couponId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Coupons
         * @param {CouponCampaignApiGetCouponsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoupons(requestParameters: CouponCampaignApiGetCouponsRequest, options?: AxiosRequestConfig): AxiosPromise<GetCoupons200Response> {
            return localVarFp.getCoupons(requestParameters.campaignId, requestParameters.q, requestParameters.count, requestParameters.cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Redeem a Coupon
         * @param {CouponCampaignApiRedeemCouponRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redeemCoupon(requestParameters: CouponCampaignApiRedeemCouponRequest, options?: AxiosRequestConfig): AxiosPromise<CouponCode> {
            return localVarFp.redeemCoupon(requestParameters.couponId, requestParameters.redeemCouponRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a CouponCampaign
         * @param {CouponCampaignApiUpdateCouponCampaignRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCouponCampaign(requestParameters: CouponCampaignApiUpdateCouponCampaignRequest, options?: AxiosRequestConfig): AxiosPromise<CouponCampaign> {
            return localVarFp.updateCouponCampaign(requestParameters.id, requestParameters.couponCampaign, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createCouponCampaign operation in CouponCampaignApi.
 * @export
 * @interface CouponCampaignApiCreateCouponCampaignRequest
 */
export interface CouponCampaignApiCreateCouponCampaignRequest {
    /**
     * CouponCampaign to create
     * @type {CouponCampaignCreate}
     * @memberof CouponCampaignApiCreateCouponCampaign
     */
    readonly couponCampaignCreate: CouponCampaignCreate
}

/**
 * Request parameters for deleteCouponCampaigns operation in CouponCampaignApi.
 * @export
 * @interface CouponCampaignApiDeleteCouponCampaignsRequest
 */
export interface CouponCampaignApiDeleteCouponCampaignsRequest {
    /**
     * CouponCampaigns to delete
     * @type {DeleteCouponCampaignsRequest}
     * @memberof CouponCampaignApiDeleteCouponCampaigns
     */
    readonly deleteCouponCampaignsRequest: DeleteCouponCampaignsRequest
}

/**
 * Request parameters for getCampaignData operation in CouponCampaignApi.
 * @export
 * @interface CouponCampaignApiGetCampaignDataRequest
 */
export interface CouponCampaignApiGetCampaignDataRequest {
    /**
     * The ID of the CampaignData to retrieve
     * @type {string}
     * @memberof CouponCampaignApiGetCampaignData
     */
    readonly campaignId: string
}

/**
 * Request parameters for getCoupon operation in CouponCampaignApi.
 * @export
 * @interface CouponCampaignApiGetCouponRequest
 */
export interface CouponCampaignApiGetCouponRequest {
    /**
     * The ID of the CouponCampaign to retrieve
     * @type {string}
     * @memberof CouponCampaignApiGetCoupon
     */
    readonly campaignId: string

    /**
     * The contact ID
     * @type {string}
     * @memberof CouponCampaignApiGetCoupon
     */
    readonly contactId: string

    /**
     * The captcha token
     * @type {string}
     * @memberof CouponCampaignApiGetCoupon
     */
    readonly captchaToken: string
}

/**
 * Request parameters for getCouponCampaign operation in CouponCampaignApi.
 * @export
 * @interface CouponCampaignApiGetCouponCampaignRequest
 */
export interface CouponCampaignApiGetCouponCampaignRequest {
    /**
     * The ID of the CouponCampaign to retrieve
     * @type {string}
     * @memberof CouponCampaignApiGetCouponCampaign
     */
    readonly id: string
}

/**
 * Request parameters for getCouponCampaigns operation in CouponCampaignApi.
 * @export
 * @interface CouponCampaignApiGetCouponCampaignsRequest
 */
export interface CouponCampaignApiGetCouponCampaignsRequest {
    /**
     * 
     * @type {string}
     * @memberof CouponCampaignApiGetCouponCampaigns
     */
    readonly q?: string

    /**
     * 
     * @type {number}
     * @memberof CouponCampaignApiGetCouponCampaigns
     */
    readonly count?: number

    /**
     * 
     * @type {string}
     * @memberof CouponCampaignApiGetCouponCampaigns
     */
    readonly cursor?: string
}

/**
 * Request parameters for getCouponData operation in CouponCampaignApi.
 * @export
 * @interface CouponCampaignApiGetCouponDataRequest
 */
export interface CouponCampaignApiGetCouponDataRequest {
    /**
     * The ID of the CouponData to retrieve
     * @type {string}
     * @memberof CouponCampaignApiGetCouponData
     */
    readonly couponId: string
}

/**
 * Request parameters for getCoupons operation in CouponCampaignApi.
 * @export
 * @interface CouponCampaignApiGetCouponsRequest
 */
export interface CouponCampaignApiGetCouponsRequest {
    /**
     * The ID of the CouponCampaign to retrieve
     * @type {string}
     * @memberof CouponCampaignApiGetCoupons
     */
    readonly campaignId: string

    /**
     * 
     * @type {string}
     * @memberof CouponCampaignApiGetCoupons
     */
    readonly q?: string

    /**
     * 
     * @type {number}
     * @memberof CouponCampaignApiGetCoupons
     */
    readonly count?: number

    /**
     * 
     * @type {string}
     * @memberof CouponCampaignApiGetCoupons
     */
    readonly cursor?: string
}

/**
 * Request parameters for redeemCoupon operation in CouponCampaignApi.
 * @export
 * @interface CouponCampaignApiRedeemCouponRequest
 */
export interface CouponCampaignApiRedeemCouponRequest {
    /**
     * The ID of the Coupon to redeem
     * @type {string}
     * @memberof CouponCampaignApiRedeemCoupon
     */
    readonly couponId: string

    /**
     * Coupon to redeem
     * @type {RedeemCouponRequest}
     * @memberof CouponCampaignApiRedeemCoupon
     */
    readonly redeemCouponRequest: RedeemCouponRequest
}

/**
 * Request parameters for updateCouponCampaign operation in CouponCampaignApi.
 * @export
 * @interface CouponCampaignApiUpdateCouponCampaignRequest
 */
export interface CouponCampaignApiUpdateCouponCampaignRequest {
    /**
     * The ID of the CouponCampaign to retrieve
     * @type {string}
     * @memberof CouponCampaignApiUpdateCouponCampaign
     */
    readonly id: string

    /**
     * CouponCampaign to update
     * @type {CouponCampaign}
     * @memberof CouponCampaignApiUpdateCouponCampaign
     */
    readonly couponCampaign: CouponCampaign
}

/**
 * CouponCampaignApi - object-oriented interface
 * @export
 * @class CouponCampaignApi
 * @extends {BaseAPI}
 */
export class CouponCampaignApi extends BaseAPI {
    /**
     * 
     * @summary Creates CouponCampaign
     * @param {CouponCampaignApiCreateCouponCampaignRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponCampaignApi
     */
    public createCouponCampaign(requestParameters: CouponCampaignApiCreateCouponCampaignRequest, options?: AxiosRequestConfig) {
        return CouponCampaignApiFp(this.configuration).createCouponCampaign(requestParameters.couponCampaignCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes CouponCampaigns
     * @param {CouponCampaignApiDeleteCouponCampaignsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponCampaignApi
     */
    public deleteCouponCampaigns(requestParameters: CouponCampaignApiDeleteCouponCampaignsRequest, options?: AxiosRequestConfig) {
        return CouponCampaignApiFp(this.configuration).deleteCouponCampaigns(requestParameters.deleteCouponCampaignsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a CampaignData
     * @param {CouponCampaignApiGetCampaignDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponCampaignApi
     */
    public getCampaignData(requestParameters: CouponCampaignApiGetCampaignDataRequest, options?: AxiosRequestConfig) {
        return CouponCampaignApiFp(this.configuration).getCampaignData(requestParameters.campaignId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a Coupon
     * @param {CouponCampaignApiGetCouponRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponCampaignApi
     */
    public getCoupon(requestParameters: CouponCampaignApiGetCouponRequest, options?: AxiosRequestConfig) {
        return CouponCampaignApiFp(this.configuration).getCoupon(requestParameters.campaignId, requestParameters.contactId, requestParameters.captchaToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a CouponCampaign
     * @param {CouponCampaignApiGetCouponCampaignRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponCampaignApi
     */
    public getCouponCampaign(requestParameters: CouponCampaignApiGetCouponCampaignRequest, options?: AxiosRequestConfig) {
        return CouponCampaignApiFp(this.configuration).getCouponCampaign(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all CouponCampaigns
     * @param {CouponCampaignApiGetCouponCampaignsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponCampaignApi
     */
    public getCouponCampaigns(requestParameters: CouponCampaignApiGetCouponCampaignsRequest = {}, options?: AxiosRequestConfig) {
        return CouponCampaignApiFp(this.configuration).getCouponCampaigns(requestParameters.q, requestParameters.count, requestParameters.cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a CouponData
     * @param {CouponCampaignApiGetCouponDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponCampaignApi
     */
    public getCouponData(requestParameters: CouponCampaignApiGetCouponDataRequest, options?: AxiosRequestConfig) {
        return CouponCampaignApiFp(this.configuration).getCouponData(requestParameters.couponId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Coupons
     * @param {CouponCampaignApiGetCouponsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponCampaignApi
     */
    public getCoupons(requestParameters: CouponCampaignApiGetCouponsRequest, options?: AxiosRequestConfig) {
        return CouponCampaignApiFp(this.configuration).getCoupons(requestParameters.campaignId, requestParameters.q, requestParameters.count, requestParameters.cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Redeem a Coupon
     * @param {CouponCampaignApiRedeemCouponRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponCampaignApi
     */
    public redeemCoupon(requestParameters: CouponCampaignApiRedeemCouponRequest, options?: AxiosRequestConfig) {
        return CouponCampaignApiFp(this.configuration).redeemCoupon(requestParameters.couponId, requestParameters.redeemCouponRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a CouponCampaign
     * @param {CouponCampaignApiUpdateCouponCampaignRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponCampaignApi
     */
    public updateCouponCampaign(requestParameters: CouponCampaignApiUpdateCouponCampaignRequest, options?: AxiosRequestConfig) {
        return CouponCampaignApiFp(this.configuration).updateCouponCampaign(requestParameters.id, requestParameters.couponCampaign, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * QrCodeApi - axios parameter creator
 * @export
 */
export const QrCodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates QrCodes
         * @param {CreateQrCodesRequest} createQrCodesRequest QrCodes to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQrCodes: async (createQrCodesRequest: CreateQrCodesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createQrCodesRequest' is not null or undefined
            assertParamExists('createQrCodes', 'createQrCodesRequest', createQrCodesRequest)
            const localVarPath = `/qr-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createQrCodesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes QrCodes
         * @param {Array<string>} ids The IDs of the QrCodes to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQrCodes: async (ids: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('deleteQrCodes', 'ids', ids)
            const localVarPath = `/qr-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", [], configuration)

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a QrCode
         * @param {string} id The ID of the QrCode to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQrCode: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getQrCode', 'id', id)
            const localVarPath = `/qr-code/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all QrCodes
         * @param {string} [q] 
         * @param {number} [count] 
         * @param {number} [page] The page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQrCodes: async (q?: string, count?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/qr-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", [], configuration)

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get QrCodes by phone
         * @param {string} phone The phone of QrCodes to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQrCodesByPhone: async (phone: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'phone' is not null or undefined
            assertParamExists('getQrCodesByPhone', 'phone', phone)
            const localVarPath = `/qr-codes/{phone}`
                .replace(`{${"phone"}}`, encodeURIComponent(String(phone)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Redirect based on QrCode state
         * @param {string} id The ID of the QrCode to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redirectQrCode: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('redirectQrCode', 'id', id)
            const localVarPath = `/redirect/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a QrCode
         * @param {string} id The ID of the QrCode to retrieve
         * @param {QRCodeUpdate} qRCodeUpdate QrCode to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQrCode: async (id: string, qRCodeUpdate: QRCodeUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateQrCode', 'id', id)
            // verify required parameter 'qRCodeUpdate' is not null or undefined
            assertParamExists('updateQrCode', 'qRCodeUpdate', qRCodeUpdate)
            const localVarPath = `/qr-code/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(qRCodeUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates QrCodes
         * @param {UpdateQrCodesRequest} updateQrCodesRequest QrCodes to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQrCodes: async (updateQrCodesRequest: UpdateQrCodesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateQrCodesRequest' is not null or undefined
            assertParamExists('updateQrCodes', 'updateQrCodesRequest', updateQrCodesRequest)
            const localVarPath = `/qr-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateQrCodesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QrCodeApi - functional programming interface
 * @export
 */
export const QrCodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QrCodeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates QrCodes
         * @param {CreateQrCodesRequest} createQrCodesRequest QrCodes to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createQrCodes(createQrCodesRequest: CreateQrCodesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateQrCodes200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createQrCodes(createQrCodesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes QrCodes
         * @param {Array<string>} ids The IDs of the QrCodes to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteQrCodes(ids: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteQrCodes(ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a QrCode
         * @param {string} id The ID of the QrCode to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQrCode(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QRCode>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQrCode(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all QrCodes
         * @param {string} [q] 
         * @param {number} [count] 
         * @param {number} [page] The page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQrCodes(q?: string, count?: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetQrCodes200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQrCodes(q, count, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get QrCodes by phone
         * @param {string} phone The phone of QrCodes to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQrCodesByPhone(phone: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateQrCodes200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQrCodesByPhone(phone, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Redirect based on QrCode state
         * @param {string} id The ID of the QrCode to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async redirectQrCode(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.redirectQrCode(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a QrCode
         * @param {string} id The ID of the QrCode to retrieve
         * @param {QRCodeUpdate} qRCodeUpdate QrCode to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateQrCode(id: string, qRCodeUpdate: QRCodeUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QRCode>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateQrCode(id, qRCodeUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates QrCodes
         * @param {UpdateQrCodesRequest} updateQrCodesRequest QrCodes to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateQrCodes(updateQrCodesRequest: UpdateQrCodesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateQrCodes200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateQrCodes(updateQrCodesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * QrCodeApi - factory interface
 * @export
 */
export const QrCodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QrCodeApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates QrCodes
         * @param {QrCodeApiCreateQrCodesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQrCodes(requestParameters: QrCodeApiCreateQrCodesRequest, options?: AxiosRequestConfig): AxiosPromise<CreateQrCodes200Response> {
            return localVarFp.createQrCodes(requestParameters.createQrCodesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes QrCodes
         * @param {QrCodeApiDeleteQrCodesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQrCodes(requestParameters: QrCodeApiDeleteQrCodesRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteQrCodes(requestParameters.ids, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a QrCode
         * @param {QrCodeApiGetQrCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQrCode(requestParameters: QrCodeApiGetQrCodeRequest, options?: AxiosRequestConfig): AxiosPromise<QRCode> {
            return localVarFp.getQrCode(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all QrCodes
         * @param {QrCodeApiGetQrCodesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQrCodes(requestParameters: QrCodeApiGetQrCodesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetQrCodes200Response> {
            return localVarFp.getQrCodes(requestParameters.q, requestParameters.count, requestParameters.page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get QrCodes by phone
         * @param {QrCodeApiGetQrCodesByPhoneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQrCodesByPhone(requestParameters: QrCodeApiGetQrCodesByPhoneRequest, options?: AxiosRequestConfig): AxiosPromise<CreateQrCodes200Response> {
            return localVarFp.getQrCodesByPhone(requestParameters.phone, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Redirect based on QrCode state
         * @param {QrCodeApiRedirectQrCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redirectQrCode(requestParameters: QrCodeApiRedirectQrCodeRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.redirectQrCode(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a QrCode
         * @param {QrCodeApiUpdateQrCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQrCode(requestParameters: QrCodeApiUpdateQrCodeRequest, options?: AxiosRequestConfig): AxiosPromise<QRCode> {
            return localVarFp.updateQrCode(requestParameters.id, requestParameters.qRCodeUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates QrCodes
         * @param {QrCodeApiUpdateQrCodesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQrCodes(requestParameters: QrCodeApiUpdateQrCodesRequest, options?: AxiosRequestConfig): AxiosPromise<CreateQrCodes200Response> {
            return localVarFp.updateQrCodes(requestParameters.updateQrCodesRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createQrCodes operation in QrCodeApi.
 * @export
 * @interface QrCodeApiCreateQrCodesRequest
 */
export interface QrCodeApiCreateQrCodesRequest {
    /**
     * QrCodes to create
     * @type {CreateQrCodesRequest}
     * @memberof QrCodeApiCreateQrCodes
     */
    readonly createQrCodesRequest: CreateQrCodesRequest
}

/**
 * Request parameters for deleteQrCodes operation in QrCodeApi.
 * @export
 * @interface QrCodeApiDeleteQrCodesRequest
 */
export interface QrCodeApiDeleteQrCodesRequest {
    /**
     * The IDs of the QrCodes to delete
     * @type {Array<string>}
     * @memberof QrCodeApiDeleteQrCodes
     */
    readonly ids: Array<string>
}

/**
 * Request parameters for getQrCode operation in QrCodeApi.
 * @export
 * @interface QrCodeApiGetQrCodeRequest
 */
export interface QrCodeApiGetQrCodeRequest {
    /**
     * The ID of the QrCode to retrieve
     * @type {string}
     * @memberof QrCodeApiGetQrCode
     */
    readonly id: string
}

/**
 * Request parameters for getQrCodes operation in QrCodeApi.
 * @export
 * @interface QrCodeApiGetQrCodesRequest
 */
export interface QrCodeApiGetQrCodesRequest {
    /**
     * 
     * @type {string}
     * @memberof QrCodeApiGetQrCodes
     */
    readonly q?: string

    /**
     * 
     * @type {number}
     * @memberof QrCodeApiGetQrCodes
     */
    readonly count?: number

    /**
     * The page number
     * @type {number}
     * @memberof QrCodeApiGetQrCodes
     */
    readonly page?: number
}

/**
 * Request parameters for getQrCodesByPhone operation in QrCodeApi.
 * @export
 * @interface QrCodeApiGetQrCodesByPhoneRequest
 */
export interface QrCodeApiGetQrCodesByPhoneRequest {
    /**
     * The phone of QrCodes to retrieve
     * @type {string}
     * @memberof QrCodeApiGetQrCodesByPhone
     */
    readonly phone: string
}

/**
 * Request parameters for redirectQrCode operation in QrCodeApi.
 * @export
 * @interface QrCodeApiRedirectQrCodeRequest
 */
export interface QrCodeApiRedirectQrCodeRequest {
    /**
     * The ID of the QrCode to retrieve
     * @type {string}
     * @memberof QrCodeApiRedirectQrCode
     */
    readonly id: string
}

/**
 * Request parameters for updateQrCode operation in QrCodeApi.
 * @export
 * @interface QrCodeApiUpdateQrCodeRequest
 */
export interface QrCodeApiUpdateQrCodeRequest {
    /**
     * The ID of the QrCode to retrieve
     * @type {string}
     * @memberof QrCodeApiUpdateQrCode
     */
    readonly id: string

    /**
     * QrCode to update
     * @type {QRCodeUpdate}
     * @memberof QrCodeApiUpdateQrCode
     */
    readonly qRCodeUpdate: QRCodeUpdate
}

/**
 * Request parameters for updateQrCodes operation in QrCodeApi.
 * @export
 * @interface QrCodeApiUpdateQrCodesRequest
 */
export interface QrCodeApiUpdateQrCodesRequest {
    /**
     * QrCodes to update
     * @type {UpdateQrCodesRequest}
     * @memberof QrCodeApiUpdateQrCodes
     */
    readonly updateQrCodesRequest: UpdateQrCodesRequest
}

/**
 * QrCodeApi - object-oriented interface
 * @export
 * @class QrCodeApi
 * @extends {BaseAPI}
 */
export class QrCodeApi extends BaseAPI {
    /**
     * 
     * @summary Creates QrCodes
     * @param {QrCodeApiCreateQrCodesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QrCodeApi
     */
    public createQrCodes(requestParameters: QrCodeApiCreateQrCodesRequest, options?: AxiosRequestConfig) {
        return QrCodeApiFp(this.configuration).createQrCodes(requestParameters.createQrCodesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes QrCodes
     * @param {QrCodeApiDeleteQrCodesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QrCodeApi
     */
    public deleteQrCodes(requestParameters: QrCodeApiDeleteQrCodesRequest, options?: AxiosRequestConfig) {
        return QrCodeApiFp(this.configuration).deleteQrCodes(requestParameters.ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a QrCode
     * @param {QrCodeApiGetQrCodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QrCodeApi
     */
    public getQrCode(requestParameters: QrCodeApiGetQrCodeRequest, options?: AxiosRequestConfig) {
        return QrCodeApiFp(this.configuration).getQrCode(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all QrCodes
     * @param {QrCodeApiGetQrCodesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QrCodeApi
     */
    public getQrCodes(requestParameters: QrCodeApiGetQrCodesRequest = {}, options?: AxiosRequestConfig) {
        return QrCodeApiFp(this.configuration).getQrCodes(requestParameters.q, requestParameters.count, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get QrCodes by phone
     * @param {QrCodeApiGetQrCodesByPhoneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QrCodeApi
     */
    public getQrCodesByPhone(requestParameters: QrCodeApiGetQrCodesByPhoneRequest, options?: AxiosRequestConfig) {
        return QrCodeApiFp(this.configuration).getQrCodesByPhone(requestParameters.phone, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Redirect based on QrCode state
     * @param {QrCodeApiRedirectQrCodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QrCodeApi
     */
    public redirectQrCode(requestParameters: QrCodeApiRedirectQrCodeRequest, options?: AxiosRequestConfig) {
        return QrCodeApiFp(this.configuration).redirectQrCode(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a QrCode
     * @param {QrCodeApiUpdateQrCodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QrCodeApi
     */
    public updateQrCode(requestParameters: QrCodeApiUpdateQrCodeRequest, options?: AxiosRequestConfig) {
        return QrCodeApiFp(this.configuration).updateQrCode(requestParameters.id, requestParameters.qRCodeUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates QrCodes
     * @param {QrCodeApiUpdateQrCodesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QrCodeApi
     */
    public updateQrCodes(requestParameters: QrCodeApiUpdateQrCodesRequest, options?: AxiosRequestConfig) {
        return QrCodeApiFp(this.configuration).updateQrCodes(requestParameters.updateQrCodesRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


