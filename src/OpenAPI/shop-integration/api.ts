const BASE_PATH = "https://replace.your.own.url.here".replace(/\/+$/, "");

/* tslint:disable */
/* eslint-disable */
/**
 * ChatDaddy Shop Integration Spec
 * This is the OpenAPI specification for the ChatDaddy Shop Integration. When integrating with ChatDaddy, implement a spec that follows this specification. Then, provide the URL to your hosted implementation on ChatDaddy.  The job of every integration will be to: 1. define parameters for authentication & a JSON schema spec for the data points (orders) that will be sent to the EasySend service 2. handle authentication when easysend service requests a new \"tracking\" for an integration 3. handle polling or receiving webhooks from the provider to get new orders, and then send them to the Shop service via the `dataPatch` operation. 4. the implementation must also let the Shop service know if the tracking\'s authentication has failed, and new data cannot be fetched via the `trackingUpdateErrorState` operation. 5. optionally, handle retreiving product listing from the provider  It is recommended to use the [ChatDaddy client](https://github.com/chatdaddy/typescript-client) to make the API calls. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
import type { RequestArgs } from '../base';
// @ts-ignore
import { COLLECTION_FORMATS, BaseAPI, RequiredError } from '../base';

/**
 * 
 * @export
 * @interface AddServiceModel
 */
interface AddServiceModel {
    /**
     * Name of the service/scrapper
     * @type {string}
     * @memberof AddServiceModel
     */
    'name': string;
    /**
     * A service that implements only the schema route
     * @type {boolean}
     * @memberof AddServiceModel
     */
    'isEphemeral'?: boolean;
    /**
     * If true, then parameters wont be checked when editing a trigger
     * @type {boolean}
     * @memberof AddServiceModel
     */
    'skipParameterValidation'?: boolean;
    /**
     * any image/link representing the service/scrapper
     * @type {string}
     * @memberof AddServiceModel
     */
    'imgUrl': string;
    /**
     * Description of the service/scrapper
     * @type {string}
     * @memberof AddServiceModel
     */
    'description': string;
    /**
     * Whether the service supports the products API
     * @type {boolean}
     * @memberof AddServiceModel
     */
    'supportsProducts'?: boolean;
    /**
     * If true, then it will allow additional parameters for condition
     * @type {boolean}
     * @memberof AddServiceModel
     */
    'allowAdditionalParamsForCondition'?: boolean;
    /**
     * 
     * @type {{ [key: string]: AddServiceModelParametersValue; }}
     * @memberof AddServiceModel
     */
    'parameters': { [key: string]: AddServiceModelParametersValue; };
    /**
     * 
     * @type {{ [key: string]: AddServiceModelSetupValue; }}
     * @memberof AddServiceModel
     */
    'setup': { [key: string]: AddServiceModelSetupValue; };
    /**
     * 
     * @type {AddServiceModelOutput}
     * @memberof AddServiceModel
     */
    'output'?: AddServiceModelOutput;
}
/**
 * 
 * @export
 * @interface AddServiceModelOutput
 */
interface AddServiceModelOutput {
    /**
     * URL to send webhooks to
     * @type {string}
     * @memberof AddServiceModelOutput
     */
    'webhookUrl'?: string;
}
/**
 * @type AddServiceModelParametersValue
 * @export
 */
type AddServiceModelParametersValue = AddServiceModelParametersValueOneOf | AddServiceModelParametersValueOneOf1 | AddServiceModelParametersValueOneOf2 | AddServiceModelParametersValueOneOf3;

/**
 * 
 * @export
 * @interface AddServiceModelParametersValueOneOf
 */
interface AddServiceModelParametersValueOneOf {
    /**
     * 
     * @type {AddServiceModelParametersValueOneOfCanBeConditionedOn}
     * @memberof AddServiceModelParametersValueOneOf
     */
    'canBeConditionedOn'?: AddServiceModelParametersValueOneOfCanBeConditionedOn;
    /**
     * 
     * @type {string}
     * @memberof AddServiceModelParametersValueOneOf
     */
    'type'?: AddServiceModelParametersValueOneOfTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof AddServiceModelParametersValueOneOf
     */
    'format'?: AddServiceModelParametersValueOneOfFormatEnum;
    /**
     * Inclusive array of possible values this property can take
     * @type {Array<string>}
     * @memberof AddServiceModelParametersValueOneOf
     */
    'enum'?: Array<string>;
    /**
     * Non-inclusive array of possible values this property can take
     * @type {Array<string>}
     * @memberof AddServiceModelParametersValueOneOf
     */
    'examples'?: Array<string>;
}

const AddServiceModelParametersValueOneOfTypeEnum = {
    String: 'string'
} as const;

type AddServiceModelParametersValueOneOfTypeEnum = typeof AddServiceModelParametersValueOneOfTypeEnum[keyof typeof AddServiceModelParametersValueOneOfTypeEnum];
const AddServiceModelParametersValueOneOfFormatEnum = {
    DateTime: 'date-time',
    Date: 'date'
} as const;

type AddServiceModelParametersValueOneOfFormatEnum = typeof AddServiceModelParametersValueOneOfFormatEnum[keyof typeof AddServiceModelParametersValueOneOfFormatEnum];

/**
 * 
 * @export
 * @interface AddServiceModelParametersValueOneOf1
 */
interface AddServiceModelParametersValueOneOf1 {
    /**
     * 
     * @type {AddServiceModelParametersValueOneOfCanBeConditionedOn}
     * @memberof AddServiceModelParametersValueOneOf1
     */
    'canBeConditionedOn'?: AddServiceModelParametersValueOneOfCanBeConditionedOn;
    /**
     * 
     * @type {string}
     * @memberof AddServiceModelParametersValueOneOf1
     */
    'type': AddServiceModelParametersValueOneOf1TypeEnum;
    /**
     * Inclusive array of possible values this property can take
     * @type {Array<number>}
     * @memberof AddServiceModelParametersValueOneOf1
     */
    'enum'?: Array<number>;
    /**
     * Non-inclusive array of possible values this property can take
     * @type {Array<number>}
     * @memberof AddServiceModelParametersValueOneOf1
     */
    'examples'?: Array<number>;
}

const AddServiceModelParametersValueOneOf1TypeEnum = {
    Number: 'number'
} as const;

type AddServiceModelParametersValueOneOf1TypeEnum = typeof AddServiceModelParametersValueOneOf1TypeEnum[keyof typeof AddServiceModelParametersValueOneOf1TypeEnum];

/**
 * 
 * @export
 * @interface AddServiceModelParametersValueOneOf2
 */
interface AddServiceModelParametersValueOneOf2 {
    /**
     * 
     * @type {string}
     * @memberof AddServiceModelParametersValueOneOf2
     */
    'type': AddServiceModelParametersValueOneOf2TypeEnum;
    /**
     * 
     * @type {AddServiceModelParametersValueOneOf2Items}
     * @memberof AddServiceModelParametersValueOneOf2
     */
    'items'?: AddServiceModelParametersValueOneOf2Items;
    /**
     * Non-inclusive array of possible values this property can take
     * @type {Array<Array<any>>}
     * @memberof AddServiceModelParametersValueOneOf2
     */
    'examples'?: Array<Array<any>>;
}

const AddServiceModelParametersValueOneOf2TypeEnum = {
    Array: 'array'
} as const;

type AddServiceModelParametersValueOneOf2TypeEnum = typeof AddServiceModelParametersValueOneOf2TypeEnum[keyof typeof AddServiceModelParametersValueOneOf2TypeEnum];

/**
 * 
 * @export
 * @interface AddServiceModelParametersValueOneOf2Items
 */
interface AddServiceModelParametersValueOneOf2Items {
    /**
     * 
     * @type {string}
     * @memberof AddServiceModelParametersValueOneOf2Items
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface AddServiceModelParametersValueOneOf3
 */
interface AddServiceModelParametersValueOneOf3 {
    /**
     * 
     * @type {string}
     * @memberof AddServiceModelParametersValueOneOf3
     */
    'type': AddServiceModelParametersValueOneOf3TypeEnum;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof AddServiceModelParametersValueOneOf3
     */
    'properties'?: { [key: string]: any; };
    /**
     * Non-inclusive array of possible values this property can take
     * @type {Array<{ [key: string]: any; }>}
     * @memberof AddServiceModelParametersValueOneOf3
     */
    'examples'?: Array<{ [key: string]: any; }>;
}

const AddServiceModelParametersValueOneOf3TypeEnum = {
    Object: 'object'
} as const;

type AddServiceModelParametersValueOneOf3TypeEnum = typeof AddServiceModelParametersValueOneOf3TypeEnum[keyof typeof AddServiceModelParametersValueOneOf3TypeEnum];

/**
 * @type AddServiceModelParametersValueOneOfCanBeConditionedOn
 * If this parameter can have conditions. If it is an object, it is forced to be false
 * @export
 */
type AddServiceModelParametersValueOneOfCanBeConditionedOn = boolean | string;

/**
 * 
 * @export
 * @interface AddServiceModelSetupValue
 */
interface AddServiceModelSetupValue {
    /**
     * 
     * @type {string}
     * @memberof AddServiceModelSetupValue
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof AddServiceModelSetupValue
     */
    'description'?: string;
    /**
     * 
     * @type {AddServiceModelSetupValueRequired}
     * @memberof AddServiceModelSetupValue
     */
    'required'?: AddServiceModelSetupValueRequired;
    /**
     * 
     * @type {string}
     * @memberof AddServiceModelSetupValue
     */
    'type': AddServiceModelSetupValueTypeEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof AddServiceModelSetupValue
     */
    'enum'?: Array<string>;
    /**
     * the url used for oauth login
     * @type {string}
     * @memberof AddServiceModelSetupValue
     */
    'url'?: string;
}

const AddServiceModelSetupValueTypeEnum = {
    String: 'string',
    Oauth: 'oauth',
    Password: 'password'
} as const;

type AddServiceModelSetupValueTypeEnum = typeof AddServiceModelSetupValueTypeEnum[keyof typeof AddServiceModelSetupValueTypeEnum];

/**
 * @type AddServiceModelSetupValueRequired
 * @export
 */
type AddServiceModelSetupValueRequired = boolean | string;

/**
 * 
 * @export
 * @interface AppError
 */
interface AppError {
    /**
     * 
     * @type {number}
     * @memberof AppError
     */
    'statusCode': number;
    /**
     * What the error was
     * @type {string}
     * @memberof AppError
     */
    'message': string;
    /**
     * 
     * @type {AppErrorData}
     * @memberof AppError
     */
    'data'?: AppErrorData;
}
/**
 * Some extra information about the error
 * @export
 * @interface AppErrorData
 */
interface AppErrorData {
    [key: string]: any;

    /**
     * 
     * @type {AppErrorDataHelpLink}
     * @memberof AppErrorData
     */
    'helpLink'?: AppErrorDataHelpLink;
}
/**
 * @type AppErrorDataHelpLink
 * @export
 */
type AppErrorDataHelpLink = AppErrorDataHelpLinkOneOf | AppErrorDataHelpLinkOneOf1;

/**
 * 
 * @export
 * @interface AppErrorDataHelpLinkOneOf
 */
interface AppErrorDataHelpLinkOneOf {
    /**
     * 
     * @type {string}
     * @memberof AppErrorDataHelpLinkOneOf
     */
    'docId': string;
}
/**
 * 
 * @export
 * @interface AppErrorDataHelpLinkOneOf1
 */
interface AppErrorDataHelpLinkOneOf1 {
    /**
     * 
     * @type {string}
     * @memberof AppErrorDataHelpLinkOneOf1
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface CreateTrackingRequest
 */
export interface CreateTrackingRequest {
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof CreateTrackingRequest
     */
    'credentials': { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface GetTrackingProducts200Response
 */
export interface GetTrackingProducts200Response {
    /**
     * 
     * @type {Array<ShopProduct>}
     * @memberof GetTrackingProducts200Response
     */
    'products': Array<ShopProduct>;
}
/**
 * Model for a product on an external platform (eg. WhatsApp)
 * @export
 * @interface PlatformProduct
 */
interface PlatformProduct {
    /**
     * 
     * @type {string}
     * @memberof PlatformProduct
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PlatformProduct
     */
    'retailerId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PlatformProduct
     */
    'url'?: string;
    /**
     * 
     * @type {Array<ProductCategory>}
     * @memberof PlatformProduct
     */
    'categories'?: Array<ProductCategory>;
    /**
     * 
     * @type {string}
     * @memberof PlatformProduct
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof PlatformProduct
     */
    'price': number | null;
    /**
     * 
     * @type {number}
     * @memberof PlatformProduct
     */
    'stock'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PlatformProduct
     */
    'totalStockSold'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PlatformProduct
     */
    'currency': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof PlatformProduct
     */
    'isHidden': boolean;
    /**
     * 
     * @type {string}
     * @memberof PlatformProduct
     */
    'id': string;
    /**
     * Unique identifier for an account.  The account ID is constructed from the first 21 characters of the team ID, prefixed by \"acc\" and suffixed by 4 random hex characters. This helps uniquely identify each account as well as establish a connection between the account\'s team by embedding the partial team ID in it.
     * @type {string}
     * @memberof PlatformProduct
     */
    'accountId': string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof PlatformProduct
     */
    'imageUrls': { [key: string]: string; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof PlatformProduct
     */
    'reviewStatus': { [key: string]: string; };
    /**
     * 
     * @type {ProductAvailability}
     * @memberof PlatformProduct
     */
    'availability'?: ProductAvailability;
    /**
     * 
     * @type {ProductSyncStatus}
     * @memberof PlatformProduct
     */
    'syncStatus': ProductSyncStatus;
    /**
     * True if sync is underway right now
     * @type {boolean}
     * @memberof PlatformProduct
     */
    'isSyncing'?: boolean;
    /**
     * 
     * @type {AppError}
     * @memberof PlatformProduct
     */
    'error'?: AppError;
    /**
     * An ISO formatted timestamp
     * @type {string}
     * @memberof PlatformProduct
     */
    'createdAt': string;
    /**
     * An ISO formatted timestamp
     * @type {string}
     * @memberof PlatformProduct
     */
    'updatedAt': string;
    /**
     * Cursor to sort products by
     * @type {string}
     * @memberof PlatformProduct
     */
    'cursor'?: string;
}


/**
 * 
 * @export
 * @enum {string}
 */

const ProductAvailability = {
    InStock: 'in-stock'
} as const;

type ProductAvailability = typeof ProductAvailability[keyof typeof ProductAvailability];


/**
 * 
 * @export
 * @interface ProductCategory
 */
interface ProductCategory {
    /**
     * 
     * @type {string}
     * @memberof ProductCategory
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ProductCategory
     */
    'name': string;
    /**
     * Unique identifier for an account.  The account ID is constructed from the first 21 characters of the team ID, prefixed by \"acc\" and suffixed by 4 random hex characters. This helps uniquely identify each account as well as establish a connection between the account\'s team by embedding the partial team ID in it.
     * @type {string}
     * @memberof ProductCategory
     */
    'accountId': string;
    /**
     * 
     * @type {number}
     * @memberof ProductCategory
     */
    'productCount': number;
}
/**
 * 
 * @export
 * @enum {string}
 */

const ProductSyncStatus = {
    Synced: 'synced',
    PendingCreate: 'pendingCreate',
    PendingUpdate: 'pendingUpdate',
    PendingDelete: 'pendingDelete'
} as const;

type ProductSyncStatus = typeof ProductSyncStatus[keyof typeof ProductSyncStatus];


/**
 * 
 * @export
 * @interface ServiceModel
 */
interface ServiceModel {
    /**
     * Used to store and uniquely identify a service/scraper
     * @type {string}
     * @memberof ServiceModel
     */
    'id': string;
    /**
     * URL of the service
     * @type {string}
     * @memberof ServiceModel
     */
    'url'?: string;
    /**
     * Name of the service/scrapper
     * @type {string}
     * @memberof ServiceModel
     */
    'name': string;
    /**
     * A service that implements only the schema route
     * @type {boolean}
     * @memberof ServiceModel
     */
    'isEphemeral'?: boolean;
    /**
     * If true, then parameters wont be checked when editing a trigger
     * @type {boolean}
     * @memberof ServiceModel
     */
    'skipParameterValidation'?: boolean;
    /**
     * any image/link representing the service/scrapper
     * @type {string}
     * @memberof ServiceModel
     */
    'imgUrl': string;
    /**
     * Description of the service/scrapper
     * @type {string}
     * @memberof ServiceModel
     */
    'description': string;
    /**
     * Whether the service supports the products API
     * @type {boolean}
     * @memberof ServiceModel
     */
    'supportsProducts'?: boolean;
    /**
     * If true, then it will allow additional parameters for condition
     * @type {boolean}
     * @memberof ServiceModel
     */
    'allowAdditionalParamsForCondition'?: boolean;
    /**
     * 
     * @type {{ [key: string]: AddServiceModelParametersValue; }}
     * @memberof ServiceModel
     */
    'parameters': { [key: string]: AddServiceModelParametersValue; };
    /**
     * 
     * @type {{ [key: string]: AddServiceModelSetupValue; }}
     * @memberof ServiceModel
     */
    'setup': { [key: string]: AddServiceModelSetupValue; };
    /**
     * 
     * @type {AddServiceModelOutput}
     * @memberof ServiceModel
     */
    'output'?: AddServiceModelOutput;
}
/**
 * Model for a product on an external platform (eg. WhatsApp)
 * @export
 * @interface ShopProduct
 */
interface ShopProduct {
    /**
     * 
     * @type {string}
     * @memberof ShopProduct
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ShopProduct
     */
    'retailerId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopProduct
     */
    'url'?: string;
    /**
     * 
     * @type {Array<ProductCategory>}
     * @memberof ShopProduct
     */
    'categories'?: Array<ProductCategory>;
    /**
     * 
     * @type {string}
     * @memberof ShopProduct
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof ShopProduct
     */
    'price': number | null;
    /**
     * 
     * @type {number}
     * @memberof ShopProduct
     */
    'stock'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ShopProduct
     */
    'totalStockSold'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ShopProduct
     */
    'currency': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ShopProduct
     */
    'isHidden': boolean;
    /**
     * 
     * @type {string}
     * @memberof ShopProduct
     */
    'id': string;
    /**
     * Unique identifier for an account.  The account ID is constructed from the first 21 characters of the team ID, prefixed by \"acc\" and suffixed by 4 random hex characters. This helps uniquely identify each account as well as establish a connection between the account\'s team by embedding the partial team ID in it.
     * @type {string}
     * @memberof ShopProduct
     */
    'accountId': string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof ShopProduct
     */
    'imageUrls': { [key: string]: string; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof ShopProduct
     */
    'reviewStatus': { [key: string]: string; };
    /**
     * 
     * @type {ProductAvailability}
     * @memberof ShopProduct
     */
    'availability'?: ProductAvailability;
    /**
     * 
     * @type {ProductSyncStatus}
     * @memberof ShopProduct
     */
    'syncStatus': ProductSyncStatus;
    /**
     * True if sync is underway right now
     * @type {boolean}
     * @memberof ShopProduct
     */
    'isSyncing'?: boolean;
    /**
     * 
     * @type {AppError}
     * @memberof ShopProduct
     */
    'error'?: AppError;
    /**
     * An ISO formatted timestamp
     * @type {string}
     * @memberof ShopProduct
     */
    'createdAt': string;
    /**
     * An ISO formatted timestamp
     * @type {string}
     * @memberof ShopProduct
     */
    'updatedAt': string;
    /**
     * Cursor to sort products by
     * @type {string}
     * @memberof ShopProduct
     */
    'cursor'?: string;
}


/**
 * 
 * @export
 * @interface ShopServiceSchema
 */
export interface ShopServiceSchema {
    /**
     * Used to store and uniquely identify a service/scraper
     * @type {string}
     * @memberof ShopServiceSchema
     */
    'id': string;
    /**
     * URL of the service
     * @type {string}
     * @memberof ShopServiceSchema
     */
    'url'?: string;
    /**
     * Name of the service/scrapper
     * @type {string}
     * @memberof ShopServiceSchema
     */
    'name': string;
    /**
     * A service that implements only the schema route
     * @type {boolean}
     * @memberof ShopServiceSchema
     */
    'isEphemeral'?: boolean;
    /**
     * If true, then parameters wont be checked when editing a trigger
     * @type {boolean}
     * @memberof ShopServiceSchema
     */
    'skipParameterValidation'?: boolean;
    /**
     * any image/link representing the service/scrapper
     * @type {string}
     * @memberof ShopServiceSchema
     */
    'imgUrl': string;
    /**
     * Description of the service/scrapper
     * @type {string}
     * @memberof ShopServiceSchema
     */
    'description': string;
    /**
     * Whether the service supports the products API
     * @type {boolean}
     * @memberof ShopServiceSchema
     */
    'supportsProducts'?: boolean;
    /**
     * If true, then it will allow additional parameters for condition
     * @type {boolean}
     * @memberof ShopServiceSchema
     */
    'allowAdditionalParamsForCondition'?: boolean;
    /**
     * 
     * @type {{ [key: string]: AddServiceModelParametersValue; }}
     * @memberof ShopServiceSchema
     */
    'parameters': { [key: string]: AddServiceModelParametersValue; };
    /**
     * 
     * @type {{ [key: string]: AddServiceModelSetupValue; }}
     * @memberof ShopServiceSchema
     */
    'setup': { [key: string]: AddServiceModelSetupValue; };
    /**
     * 
     * @type {AddServiceModelOutput}
     * @memberof ShopServiceSchema
     */
    'output'?: AddServiceModelOutput;
}
/**
 * 
 * @export
 * @interface ShopServiceSchemaAllOf
 */
export interface ShopServiceSchemaAllOf {
    /**
     * Used to store and uniquely identify a service/scraper
     * @type {string}
     * @memberof ShopServiceSchemaAllOf
     */
    'id': string;
    /**
     * URL of the service
     * @type {string}
     * @memberof ShopServiceSchemaAllOf
     */
    'url'?: string;
}

/**
 * ShopIntegrationApi - axios parameter creator
 * @export
 */
export const ShopIntegrationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This route is for registering a new tracking for a user   - The `id` parameter is the ID of this tracking   - Service should keep the `id` parameter secret 
         * @summary Create a new tracking with the specified ID
         * @param {string} id The ID of the tracking
         * @param {CreateTrackingRequest} [createTrackingRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTracking: async (id: string, createTrackingRequest?: CreateTrackingRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createTracking', 'id', id)
            const localVarPath = `/easysend/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTrackingRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This route is for deleting a tracking for a user  It is expected the tracking is removed from the service within 500ms of this request as the easysend service may create a new tracking with the same ID immediately after this request. 
         * @summary Delete a tracking with the specified ID
         * @param {string} id The ID of the tracking
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTracking: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTracking', 'id', id)
            const localVarPath = `/easysend/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This route is used by easysend to determine all the specifications of the service including: - JSON schema describing the parameters each data point will contain - credentials required - an image - description & name 
         * @summary Get the schema definition for the integration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchema: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/easysend/schema`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return products listed by the user on the provider. Eg. products listed on an ecommerce store. 
         * @summary Get products for the tracking
         * @param {string} id The ID of the tracking
         * @param {number} [limit] The maximum number of products to return
         * @param {number} [page] The page number to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrackingProducts: async (id: string, limit?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTrackingProducts', 'id', id)
            const localVarPath = `/easysend/{id}/products`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", [], configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShopIntegrationApi - functional programming interface
 * @export
 */
export const ShopIntegrationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShopIntegrationApiAxiosParamCreator(configuration)
    return {
        /**
         * This route is for registering a new tracking for a user   - The `id` parameter is the ID of this tracking   - Service should keep the `id` parameter secret 
         * @summary Create a new tracking with the specified ID
         * @param {string} id The ID of the tracking
         * @param {CreateTrackingRequest} [createTrackingRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTracking(id: string, createTrackingRequest?: CreateTrackingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTracking(id, createTrackingRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This route is for deleting a tracking for a user  It is expected the tracking is removed from the service within 500ms of this request as the easysend service may create a new tracking with the same ID immediately after this request. 
         * @summary Delete a tracking with the specified ID
         * @param {string} id The ID of the tracking
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTracking(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTracking(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This route is used by easysend to determine all the specifications of the service including: - JSON schema describing the parameters each data point will contain - credentials required - an image - description & name 
         * @summary Get the schema definition for the integration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSchema(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShopServiceSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSchema(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return products listed by the user on the provider. Eg. products listed on an ecommerce store. 
         * @summary Get products for the tracking
         * @param {string} id The ID of the tracking
         * @param {number} [limit] The maximum number of products to return
         * @param {number} [page] The page number to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTrackingProducts(id: string, limit?: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTrackingProducts200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTrackingProducts(id, limit, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShopIntegrationApi - factory interface
 * @export
 */
export const ShopIntegrationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShopIntegrationApiFp(configuration)
    return {
        /**
         * This route is for registering a new tracking for a user   - The `id` parameter is the ID of this tracking   - Service should keep the `id` parameter secret 
         * @summary Create a new tracking with the specified ID
         * @param {ShopIntegrationApiCreateTrackingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTracking(requestParameters: ShopIntegrationApiCreateTrackingRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createTracking(requestParameters.id, requestParameters.createTrackingRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This route is for deleting a tracking for a user  It is expected the tracking is removed from the service within 500ms of this request as the easysend service may create a new tracking with the same ID immediately after this request. 
         * @summary Delete a tracking with the specified ID
         * @param {ShopIntegrationApiDeleteTrackingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTracking(requestParameters: ShopIntegrationApiDeleteTrackingRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteTracking(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * This route is used by easysend to determine all the specifications of the service including: - JSON schema describing the parameters each data point will contain - credentials required - an image - description & name 
         * @summary Get the schema definition for the integration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchema(options?: AxiosRequestConfig): AxiosPromise<ShopServiceSchema> {
            return localVarFp.getSchema(options).then((request) => request(axios, basePath));
        },
        /**
         * Return products listed by the user on the provider. Eg. products listed on an ecommerce store. 
         * @summary Get products for the tracking
         * @param {ShopIntegrationApiGetTrackingProductsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrackingProducts(requestParameters: ShopIntegrationApiGetTrackingProductsRequest, options?: AxiosRequestConfig): AxiosPromise<GetTrackingProducts200Response> {
            return localVarFp.getTrackingProducts(requestParameters.id, requestParameters.limit, requestParameters.page, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createTracking operation in ShopIntegrationApi.
 * @export
 * @interface ShopIntegrationApiCreateTrackingRequest
 */
export interface ShopIntegrationApiCreateTrackingRequest {
    /**
     * The ID of the tracking
     * @type {string}
     * @memberof ShopIntegrationApiCreateTracking
     */
    readonly id: string

    /**
     * 
     * @type {CreateTrackingRequest}
     * @memberof ShopIntegrationApiCreateTracking
     */
    readonly createTrackingRequest?: CreateTrackingRequest
}

/**
 * Request parameters for deleteTracking operation in ShopIntegrationApi.
 * @export
 * @interface ShopIntegrationApiDeleteTrackingRequest
 */
export interface ShopIntegrationApiDeleteTrackingRequest {
    /**
     * The ID of the tracking
     * @type {string}
     * @memberof ShopIntegrationApiDeleteTracking
     */
    readonly id: string
}

/**
 * Request parameters for getTrackingProducts operation in ShopIntegrationApi.
 * @export
 * @interface ShopIntegrationApiGetTrackingProductsRequest
 */
export interface ShopIntegrationApiGetTrackingProductsRequest {
    /**
     * The ID of the tracking
     * @type {string}
     * @memberof ShopIntegrationApiGetTrackingProducts
     */
    readonly id: string

    /**
     * The maximum number of products to return
     * @type {number}
     * @memberof ShopIntegrationApiGetTrackingProducts
     */
    readonly limit?: number

    /**
     * The page number to return
     * @type {number}
     * @memberof ShopIntegrationApiGetTrackingProducts
     */
    readonly page?: number
}

/**
 * ShopIntegrationApi - object-oriented interface
 * @export
 * @class ShopIntegrationApi
 * @extends {BaseAPI}
 */
export class ShopIntegrationApi extends BaseAPI {
    /**
     * This route is for registering a new tracking for a user   - The `id` parameter is the ID of this tracking   - Service should keep the `id` parameter secret 
     * @summary Create a new tracking with the specified ID
     * @param {ShopIntegrationApiCreateTrackingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopIntegrationApi
     */
    public createTracking(requestParameters: ShopIntegrationApiCreateTrackingRequest, options?: AxiosRequestConfig) {
        return ShopIntegrationApiFp(this.configuration).createTracking(requestParameters.id, requestParameters.createTrackingRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This route is for deleting a tracking for a user  It is expected the tracking is removed from the service within 500ms of this request as the easysend service may create a new tracking with the same ID immediately after this request. 
     * @summary Delete a tracking with the specified ID
     * @param {ShopIntegrationApiDeleteTrackingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopIntegrationApi
     */
    public deleteTracking(requestParameters: ShopIntegrationApiDeleteTrackingRequest, options?: AxiosRequestConfig) {
        return ShopIntegrationApiFp(this.configuration).deleteTracking(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This route is used by easysend to determine all the specifications of the service including: - JSON schema describing the parameters each data point will contain - credentials required - an image - description & name 
     * @summary Get the schema definition for the integration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopIntegrationApi
     */
    public getSchema(options?: AxiosRequestConfig) {
        return ShopIntegrationApiFp(this.configuration).getSchema(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return products listed by the user on the provider. Eg. products listed on an ecommerce store. 
     * @summary Get products for the tracking
     * @param {ShopIntegrationApiGetTrackingProductsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopIntegrationApi
     */
    public getTrackingProducts(requestParameters: ShopIntegrationApiGetTrackingProductsRequest, options?: AxiosRequestConfig) {
        return ShopIntegrationApiFp(this.configuration).getTrackingProducts(requestParameters.id, requestParameters.limit, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }
}


